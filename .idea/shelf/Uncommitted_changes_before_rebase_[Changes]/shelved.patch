Index: order-service/src/main/java/com/orderservice/domain/repository/ItemRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/repository/ItemRepository.java b/order-service/src/main/java/com/orderservice/domain/repository/ItemRepository.java
new file mode 100644
--- /dev/null	(date 1714032042153)
+++ b/order-service/src/main/java/com/orderservice/domain/repository/ItemRepository.java	(date 1714032042153)
@@ -0,0 +1,11 @@
+package com.orderservice.domain.repository;
+
+import com.layby.domain.entity.Item;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface ItemRepository extends JpaRepository<Item, Long> {
+
+    Item findByItemId(Long itemId);
+
+    Item findByItemName(String itemName);
+}
Index: order-service/src/main/java/com/orderservice/domain/repository/OrderItemRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/repository/OrderItemRepository.java b/order-service/src/main/java/com/orderservice/domain/repository/OrderItemRepository.java
new file mode 100644
--- /dev/null	(date 1714032042155)
+++ b/order-service/src/main/java/com/orderservice/domain/repository/OrderItemRepository.java	(date 1714032042155)
@@ -0,0 +1,9 @@
+package com.orderservice.domain.repository;
+
+import com.orderservice.domain.entity.OrderItem;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface OrderItemRepository extends JpaRepository<OrderItem, Long> {
+
+    OrderItem findByOrderItemId(Long orderItemId);
+}
Index: order-service/src/main/java/com/orderservice/domain/repository/OrderRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/repository/OrderRepository.java b/order-service/src/main/java/com/orderservice/domain/repository/OrderRepository.java
new file mode 100644
--- /dev/null	(date 1714032042159)
+++ b/order-service/src/main/java/com/orderservice/domain/repository/OrderRepository.java	(date 1714032042159)
@@ -0,0 +1,14 @@
+package com.orderservice.domain.repository;
+
+import com.orderservice.domain.entity.Order;
+import com.orderservice.domain.entity.User;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import java.util.List;
+
+public interface OrderRepository extends JpaRepository<Order, Long>, OrderRepositoryCustom {
+
+    Order findByOrderId(Long orderId);
+
+    List<Order> findAllByUser(User user);
+}
Index: order-service/src/main/java/com/orderservice/domain/repository/OrderRepositoryCustom.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/repository/OrderRepositoryCustom.java b/order-service/src/main/java/com/orderservice/domain/repository/OrderRepositoryCustom.java
new file mode 100644
--- /dev/null	(date 1714032042161)
+++ b/order-service/src/main/java/com/orderservice/domain/repository/OrderRepositoryCustom.java	(date 1714032042161)
@@ -0,0 +1,14 @@
+package com.orderservice.domain.repository;
+
+import com.layby.domain.entity.Order;
+
+import java.util.List;
+
+public interface OrderRepositoryCustom {
+
+    List<Order> findAllByUserIdWithOrderItemAndItem(Long userId);
+
+    List<Order> findAfterRefund();
+
+    Order findByOrderIdWithDelivery(Long orderId);
+}
Index: order-service/src/main/java/com/orderservice/domain/repository/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/repository/UserRepository.java b/order-service/src/main/java/com/orderservice/domain/repository/UserRepository.java
new file mode 100644
--- /dev/null	(date 1714032042164)
+++ b/order-service/src/main/java/com/orderservice/domain/repository/UserRepository.java	(date 1714032042164)
@@ -0,0 +1,13 @@
+package com.orderservice.domain.repository;
+
+import com.layby.domain.entity.User;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface UserRepository extends JpaRepository<User, Long> {
+
+    boolean existsByUsername(String username);
+
+    User findByUserId(Long userId);
+
+    User findByUsername(String username);
+}
Index: order-service/src/main/java/com/orderservice/domain/repository/WishItemRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/repository/WishItemRepository.java b/order-service/src/main/java/com/orderservice/domain/repository/WishItemRepository.java
new file mode 100644
--- /dev/null	(date 1714032042167)
+++ b/order-service/src/main/java/com/orderservice/domain/repository/WishItemRepository.java	(date 1714032042167)
@@ -0,0 +1,14 @@
+package com.orderservice.domain.repository;
+
+import com.orderservice.domain.entity.User;
+import com.orderservice.domain.entity.WishItem;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import java.util.List;
+
+public interface WishItemRepository extends JpaRepository<WishItem, Long>, WishItemRepositoryCustom {
+
+    WishItem findByWishItemId(Long wishItemId);
+
+    List<WishItem> findAllByUserId(Long userId);
+}
Index: order-service/src/main/java/com/orderservice/domain/repository/WishItemRepositoryCustom.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/repository/WishItemRepositoryCustom.java b/order-service/src/main/java/com/orderservice/domain/repository/WishItemRepositoryCustom.java
new file mode 100644
--- /dev/null	(date 1714032042170)
+++ b/order-service/src/main/java/com/orderservice/domain/repository/WishItemRepositoryCustom.java	(date 1714032042170)
@@ -0,0 +1,10 @@
+package com.orderservice.domain.repository;
+
+import com.orderservice.domain.entity.WishItem;
+
+import java.util.List;
+
+public interface WishItemRepositoryCustom {
+
+    List<WishItem> findAllByUserIdWithItem(Long userId);
+}
Index: order-service/src/main/java/com/orderservice/domain/repository/implement/OrderRepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/repository/implement/OrderRepositoryImpl.java b/order-service/src/main/java/com/orderservice/domain/repository/implement/OrderRepositoryImpl.java
new file mode 100644
--- /dev/null	(date 1714032042174)
+++ b/order-service/src/main/java/com/orderservice/domain/repository/implement/OrderRepositoryImpl.java	(date 1714032042174)
@@ -0,0 +1,49 @@
+package com.orderservice.domain.repository.implement;
+
+import com.layby.domain.common.OrderStatus;
+import com.layby.domain.entity.Order;
+import com.layby.domain.repository.OrderRepositoryCustom;
+import com.querydsl.jpa.impl.JPAQueryFactory;
+import lombok.RequiredArgsConstructor;
+
+import java.util.List;
+
+import static com.layby.domain.entity.QDelivery.*;
+import static com.layby.domain.entity.QItem.*;
+import static com.layby.domain.entity.QOrder.*;
+import static com.layby.domain.entity.QOrderItem.orderItem;
+
+@RequiredArgsConstructor
+public class OrderRepositoryImpl implements OrderRepositoryCustom {
+
+    private final JPAQueryFactory query;
+
+    @Override
+    public List<Order> findAllByUserIdWithOrderItemAndItem(Long userId) {
+        return query
+                .selectFrom(order)
+                .join(order.orderItems, orderItem).fetchJoin()
+                .join(orderItem.item, item).fetchJoin()
+                .where(order.user.userId.eq(userId))
+                .fetch();
+    }
+
+    @Override
+    public List<Order> findAfterRefund() {
+        return query
+                .selectFrom(order)
+                .join(order.orderItems, orderItem).fetchJoin()
+                .join(orderItem.item, item).fetchJoin()
+                .where(order.orderStatus.eq(OrderStatus.REFUND_PROCESS))
+                .fetch();
+    }
+
+    @Override
+    public Order findByOrderIdWithDelivery(Long orderId) {
+        return query
+                .selectFrom(order)
+                .join(order.delivery, delivery).fetchJoin()
+                .where(order.orderId.eq(orderId))
+                .fetchOne();
+    }
+}
Index: order-service/src/main/java/com/orderservice/domain/repository/implement/WishItemRepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/repository/implement/WishItemRepositoryImpl.java b/order-service/src/main/java/com/orderservice/domain/repository/implement/WishItemRepositoryImpl.java
new file mode 100644
--- /dev/null	(date 1714032042177)
+++ b/order-service/src/main/java/com/orderservice/domain/repository/implement/WishItemRepositoryImpl.java	(date 1714032042177)
@@ -0,0 +1,26 @@
+package com.orderservice.domain.repository.implement;
+
+import com.layby.domain.entity.WishItem;
+import com.layby.domain.repository.WishItemRepositoryCustom;
+import com.querydsl.jpa.impl.JPAQueryFactory;
+import lombok.RequiredArgsConstructor;
+
+import java.util.List;
+
+import static com.layby.domain.entity.QItem.item;
+import static com.layby.domain.entity.QWishItem.*;
+
+@RequiredArgsConstructor
+public class WishItemRepositoryImpl implements WishItemRepositoryCustom {
+
+    private final JPAQueryFactory query;
+
+    @Override
+    public List<WishItem> findAllByUserIdWithItem(Long userId) {
+        return query
+                .selectFrom(wishItem)
+                .join(wishItem.item, item).fetchJoin()
+                .where(wishItem.user.userId.eq(userId))
+                .fetch();
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/client/ItemServiceClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/client/ItemServiceClient.java b/order-service/src/main/java/com/orderservice/web/client/ItemServiceClient.java
new file mode 100644
--- /dev/null	(date 1714032042180)
+++ b/order-service/src/main/java/com/orderservice/web/client/ItemServiceClient.java	(date 1714032042180)
@@ -0,0 +1,17 @@
+package com.orderservice.web.client;
+
+import com.orderservice.domain.dto.response.ItemResponseDto;
+import org.springframework.cloud.openfeign.FeignClient;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PatchMapping;
+import org.springframework.web.bind.annotation.PathVariable;
+
+@FeignClient(name = "item-service")
+public interface ItemServiceClient {
+
+    @GetMapping("/item-service/{item_id}")
+    ItemResponseDto getItem(@PathVariable(name = "item_id") Long itemId);
+
+    @PatchMapping("/{item_id}")
+    public void removeStockDuringPurchase(@PathVariable(name = "item_id") Long itemId, int count);
+}
Index: order-service/src/main/java/com/orderservice/web/client/UserServiceClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/client/UserServiceClient.java b/order-service/src/main/java/com/orderservice/web/client/UserServiceClient.java
new file mode 100644
--- /dev/null	(date 1714032042183)
+++ b/order-service/src/main/java/com/orderservice/web/client/UserServiceClient.java	(date 1714032042183)
@@ -0,0 +1,15 @@
+package com.orderservice.web.client;
+
+import com.orderservice.domain.dto.response.UserResponseDto;
+import jakarta.ws.rs.GET;
+import org.springframework.cloud.openfeign.FeignClient;
+import org.springframework.security.core.Authentication;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PathVariable;
+
+@FeignClient(name = "user-service")
+public interface UserServiceClient {
+
+    @GetMapping("/user-service/users")
+    UserResponseDto getUser(Authentication authentication);
+}
Index: order-service/src/main/java/com/orderservice/web/config/CorsConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/config/CorsConfig.java b/order-service/src/main/java/com/orderservice/web/config/CorsConfig.java
new file mode 100644
--- /dev/null	(date 1714032042185)
+++ b/order-service/src/main/java/com/orderservice/web/config/CorsConfig.java	(date 1714032042185)
@@ -0,0 +1,23 @@
+package com.orderservice.web.config;
+
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.web.cors.CorsConfiguration;
+import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
+import org.springframework.web.filter.CorsFilter;
+
+@Configuration
+public class CorsConfig {
+    @Bean
+    public CorsFilter corsFilter() {
+        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
+        CorsConfiguration config = new CorsConfiguration();
+        config.setAllowCredentials(true);
+        config.addAllowedOriginPattern("*");
+        config.addAllowedHeader("*");
+        config.addAllowedMethod("*");
+
+        source.registerCorsConfiguration("/api/**", config);
+        return new CorsFilter(source);
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/config/RedisConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/config/RedisConfig.java b/order-service/src/main/java/com/orderservice/web/config/RedisConfig.java
new file mode 100644
--- /dev/null	(date 1714032042189)
+++ b/order-service/src/main/java/com/orderservice/web/config/RedisConfig.java	(date 1714032042189)
@@ -0,0 +1,34 @@
+package com.orderservice.web.config;
+
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.data.redis.connection.RedisConnectionFactory;
+import org.springframework.data.redis.connection.RedisStandaloneConfiguration;
+import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;
+import org.springframework.data.redis.core.RedisTemplate;
+import org.springframework.data.redis.core.StringRedisTemplate;
+
+@Configuration
+public class RedisConfig {
+
+    @Value("${spring.data.redis.host}")
+    private String redisHost;
+
+    @Value("${spring.data.redis.port}")
+    private int redisPort;
+
+    @Bean
+    public RedisConnectionFactory redisConnectionFactory() {
+        return new LettuceConnectionFactory(
+                new RedisStandaloneConfiguration(redisHost, redisPort)
+        );
+    }
+
+    @Bean
+    public RedisTemplate<String, String> redisTemplate() {
+        StringRedisTemplate redisTemplate = new StringRedisTemplate();
+        redisTemplate.setConnectionFactory(redisConnectionFactory());
+        return redisTemplate;
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/config/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/config/SecurityConfig.java b/order-service/src/main/java/com/orderservice/web/config/SecurityConfig.java
new file mode 100644
--- /dev/null	(date 1714032042191)
+++ b/order-service/src/main/java/com/orderservice/web/config/SecurityConfig.java	(date 1714032042191)
@@ -0,0 +1,91 @@
+package com.orderservice.web.config;
+
+import com.layby.web.filter.JwtAuthenticationFilter;
+import jakarta.servlet.ServletException;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
+import lombok.RequiredArgsConstructor;
+import org.springframework.beans.factory.annotation.Configurable;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
+import org.springframework.security.config.annotation.web.configurers.CsrfConfigurer;
+import org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer;
+import org.springframework.security.config.http.SessionCreationPolicy;
+import org.springframework.security.core.AuthenticationException;
+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
+import org.springframework.security.crypto.password.PasswordEncoder;
+import org.springframework.security.web.AuthenticationEntryPoint;
+import org.springframework.security.web.SecurityFilterChain;
+import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
+import org.springframework.web.cors.CorsConfiguration;
+import org.springframework.web.cors.CorsConfigurationSource;
+import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
+
+import java.io.IOException;
+
+@Configurable
+@Configuration
+@EnableWebSecurity
+@EnableMethodSecurity
+@RequiredArgsConstructor
+public class SecurityConfig {
+
+    private final JwtAuthenticationFilter jwtAuthenticationFilter;
+
+    @Bean
+    public PasswordEncoder passwordEncoder() {
+        return new BCryptPasswordEncoder();
+    }
+
+    @Bean
+    protected SecurityFilterChain configure(HttpSecurity httpSecurity) throws Exception {
+
+        httpSecurity
+                .cors(cors -> cors
+                        .configurationSource(corsConfigurationSource()))
+                .csrf(CsrfConfigurer::disable)
+                .httpBasic(HttpBasicConfigurer::disable)
+                .sessionManagement(sessionManagement -> sessionManagement
+                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
+                )
+                .authorizeHttpRequests(request -> request
+                        .requestMatchers("/", "/api/v1/auth/**").permitAll()
+                        .anyRequest().authenticated()
+                )
+                .exceptionHandling(exceptionHandling -> exceptionHandling
+                        .authenticationEntryPoint(new FailedAuthenticationEntryPoint())
+                )
+                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
+
+        return httpSecurity.build();
+    }
+
+    @Bean
+    protected CorsConfigurationSource corsConfigurationSource() {
+
+        CorsConfiguration corsConfiguration = new CorsConfiguration();
+        corsConfiguration.addAllowedMethod("*");
+        corsConfiguration.addAllowedOrigin("*");
+        corsConfiguration.addAllowedHeader("*");
+
+        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
+        source.registerCorsConfiguration("/**", corsConfiguration);
+
+        return source;
+    }
+}
+
+
+class FailedAuthenticationEntryPoint implements AuthenticationEntryPoint {
+
+    @Override
+    public void commence(HttpServletRequest request, HttpServletResponse response,
+                         AuthenticationException authException) throws IOException, ServletException {
+        response.setContentType("application/json");
+        response.setStatus(HttpServletResponse.SC_FORBIDDEN);
+        response.getWriter().write("{\"code\": \"401\", \"message\": \"Authentication Failed.\"}");
+    }
+}
\ No newline at end of file
Index: order-service/src/main/java/com/orderservice/web/controller/ItemController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/controller/ItemController.java b/order-service/src/main/java/com/orderservice/web/controller/ItemController.java
new file mode 100644
--- /dev/null	(date 1714032042194)
+++ b/order-service/src/main/java/com/orderservice/web/controller/ItemController.java	(date 1714032042194)
@@ -0,0 +1,48 @@
+package com.orderservice.web.controller;
+
+import com.orderservice.domain.dto.request.WishItemSaveRequestDto;
+import com.orderservice.domain.dto.response.ItemListResponseDto;
+import com.orderservice.domain.dto.response.ItemResponseDto;
+import com.orderservice.domain.dto.response.ResponseDto;
+import com.orderservice.web.service.ItemService;
+import com.orderservice.web.service.WishItemService;
+import jakarta.validation.Valid;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.core.Authentication;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+@Slf4j
+@RequiredArgsConstructor
+@RestController
+@RequestMapping("/api/v1/item")
+public class ItemController {
+
+    private final ItemService itemService;
+    private final WishItemService wishItemService;
+
+    @GetMapping("/all")
+    public ResponseEntity<List<ItemListResponseDto>> referItemList() {
+        return itemService.referItemList();
+    }
+
+    @GetMapping("/{item_id}")
+    public ResponseEntity<ItemResponseDto> referItem(
+            @PathVariable(name = "item_id") Long itemId
+    ) {
+        return itemService.referItem(itemId);
+    }
+
+    @PostMapping("/{item_id}")
+    public ResponseEntity<ResponseDto> registerToWishlist(
+            @PathVariable(name = "item_id") Long itemId,
+            Authentication authentication,
+            @RequestBody @Valid WishItemSaveRequestDto dto
+    ) {
+        return wishItemService.register(itemId, authentication, dto);
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/controller/OrderController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/controller/OrderController.java b/order-service/src/main/java/com/orderservice/web/controller/OrderController.java
new file mode 100644
--- /dev/null	(date 1714032042197)
+++ b/order-service/src/main/java/com/orderservice/web/controller/OrderController.java	(date 1714032042197)
@@ -0,0 +1,45 @@
+package com.orderservice.web.controller;
+
+import com.layby.domain.dto.response.OrderStatusResponseDto;
+import com.layby.domain.dto.response.ResponseDto;
+import com.layby.web.service.OrderService;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.core.Authentication;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+@Slf4j
+@RequiredArgsConstructor
+@RestController
+@RequestMapping("/api/v1/order")
+public class OrderController {
+
+    private final OrderService orderService;
+
+    @GetMapping("/all")
+    @PreAuthorize("hasAnyRole('ROLE_USER')")
+    public ResponseEntity<List<OrderStatusResponseDto>> referOrdersStatus(Authentication authentication) {
+
+        return orderService.referOrdersStatus(authentication);
+    }
+
+    @PatchMapping("/{order_id}/cancel")
+    @PreAuthorize("hasAnyRole('ROLE_USER')")
+    public ResponseEntity<ResponseDto> cancelOrder(
+            @PathVariable(name = "order_id") Long orderId
+    ) {
+        return orderService.cancelOrder(orderId);
+    }
+
+    @PatchMapping("/{order_id}/refund")
+    @PreAuthorize("hasAnyRole('ROLE_USER')")
+    public ResponseEntity<ResponseDto> refundOrder(
+            @PathVariable(name = "order_id") Long orderId
+    ) {
+        return orderService.refundOrder(orderId);
+    }
+}
Index: order-service/src/main/java/com/orderservice/domain/dto/response/OrderStatusResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/dto/response/OrderStatusResponseDto.java b/order-service/src/main/java/com/orderservice/domain/dto/response/OrderStatusResponseDto.java
new file mode 100644
--- /dev/null	(date 1714032042103)
+++ b/order-service/src/main/java/com/orderservice/domain/dto/response/OrderStatusResponseDto.java	(date 1714032042103)
@@ -0,0 +1,21 @@
+package com.orderservice.domain.dto.response;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Getter;
+import lombok.Setter;
+
+import java.util.List;
+
+@Getter @Setter @Builder
+@AllArgsConstructor
+public class OrderStatusResponseDto {
+
+    private String orderStatus;
+
+    private String deliveryStatus;
+
+    private List<String> itemNames;
+
+    private int totalPrice;
+}
Index: order-service/src/main/java/com/orderservice/domain/dto/response/ResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/dto/response/ResponseDto.java b/order-service/src/main/java/com/orderservice/domain/dto/response/ResponseDto.java
new file mode 100644
--- /dev/null	(date 1714032042106)
+++ b/order-service/src/main/java/com/orderservice/domain/dto/response/ResponseDto.java	(date 1714032042106)
@@ -0,0 +1,24 @@
+package com.orderservice.domain.dto.response;
+
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+
+@Getter
+@AllArgsConstructor
+public class ResponseDto {
+
+    private String code;
+    private String message;
+
+    private ResponseDto() {
+        this.code = "200";
+        this.message = "Success.";
+    }
+
+    public static ResponseEntity<ResponseDto> success() {
+        ResponseDto responseBody = new ResponseDto();
+        return ResponseEntity.status(HttpStatus.OK).body(responseBody);
+    }
+}
Index: order-service/src/main/java/com/orderservice/domain/dto/response/UserResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/dto/response/UserResponseDto.java b/order-service/src/main/java/com/orderservice/domain/dto/response/UserResponseDto.java
new file mode 100644
--- /dev/null	(date 1714032042109)
+++ b/order-service/src/main/java/com/orderservice/domain/dto/response/UserResponseDto.java	(date 1714032042109)
@@ -0,0 +1,27 @@
+package com.orderservice.domain.dto.response;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import lombok.Builder;
+import lombok.Getter;
+import lombok.Setter;
+
+@Getter @Setter
+public class UserResponseDto {
+
+    @JsonIgnore
+    private Long userId;
+
+    private String username;
+
+    private String email;
+
+    private String phoneNumber;
+
+    @Builder
+    public UserResponseDto(Long userId, String username, String email, String phoneNumber) {
+        this.userId = userId;
+        this.username = username;
+        this.email = email;
+        this.phoneNumber = phoneNumber;
+    }
+}
Index: order-service/src/main/java/com/orderservice/domain/dto/response/WishItemResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/dto/response/WishItemResponseDto.java b/order-service/src/main/java/com/orderservice/domain/dto/response/WishItemResponseDto.java
new file mode 100644
--- /dev/null	(date 1714032042112)
+++ b/order-service/src/main/java/com/orderservice/domain/dto/response/WishItemResponseDto.java	(date 1714032042112)
@@ -0,0 +1,43 @@
+package com.orderservice.domain.dto.response;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.orderservice.domain.entity.Item;
+import com.orderservice.domain.entity.WishItem;
+import lombok.Builder;
+import lombok.Getter;
+import lombok.Setter;
+
+@Getter @Setter
+@Builder
+public class WishItemResponseDto {
+
+    @JsonIgnore
+    private Long wishItemId;
+
+    @JsonIgnore
+    private Long itemId;
+
+    private String itemName;
+
+    private int price;
+
+    private int count;
+
+    private int totalPrice;
+
+    //== 생성자 메서드 ==//
+    /** 위시아이템 엔티티로 WishItemResponseDto를 만드는 메서드 **/
+    public static WishItemResponseDto fromWishItem(WishItem wishItem, Item item) {
+
+        WishItemResponseDto wishItemResponseDto = WishItemResponseDto.builder()
+                .wishItemId(wishItem.getWishItemId())
+                .itemId(item.getItemId())
+                .itemName(item.getItemName())
+                .price(wishItem.getPrice())
+                .count(wishItem.getCount())
+                .totalPrice(wishItem.getTotalPrice())
+                .build();
+
+        return wishItemResponseDto;
+    }
+}
Index: order-service/src/main/java/com/orderservice/domain/dto/response/WishListReferResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/dto/response/WishListReferResponseDto.java b/order-service/src/main/java/com/orderservice/domain/dto/response/WishListReferResponseDto.java
new file mode 100644
--- /dev/null	(date 1714032042115)
+++ b/order-service/src/main/java/com/orderservice/domain/dto/response/WishListReferResponseDto.java	(date 1714032042115)
@@ -0,0 +1,30 @@
+package com.orderservice.domain.dto.response;
+
+import com.orderservice.domain.entity.WishItem;
+import lombok.Getter;
+import lombok.Setter;
+
+import java.util.ArrayList;
+import java.util.List;
+
+@Getter @Setter
+public class WishListReferResponseDto {
+
+    private List<WishItemResponseDto> wishItemResponseDtos = new ArrayList<>();
+
+    private int totalPrice = 0;
+
+    //== 생성자 ==//
+    /** 위시아이템 엔티티 리스트로 WishListReferResponseDto를 만드는 생성자 **/
+    public WishListReferResponseDto(List<WishItem> wishItems) {
+
+        for (WishItem wishItem : wishItems) {
+            this.wishItemResponseDtos
+                    .add(
+              WishItemResponseDto.fromWishItem(wishItem)
+            );
+
+            totalPrice += wishItem.getTotalPrice();
+        }
+    }
+}
Index: order-service/src/main/java/com/orderservice/domain/dto/response/auth/SignInResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/dto/response/auth/SignInResponseDto.java b/order-service/src/main/java/com/orderservice/domain/dto/response/auth/SignInResponseDto.java
new file mode 100644
--- /dev/null	(date 1714032042118)
+++ b/order-service/src/main/java/com/orderservice/domain/dto/response/auth/SignInResponseDto.java	(date 1714032042118)
@@ -0,0 +1,11 @@
+package com.orderservice.domain.dto.response.auth;
+
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+
+@Getter
+@AllArgsConstructor
+public class SignInResponseDto {
+
+    private String token;
+}
Index: order-service/src/main/java/com/orderservice/domain/entity/Address.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/entity/Address.java b/order-service/src/main/java/com/orderservice/domain/entity/Address.java
new file mode 100644
--- /dev/null	(date 1714032042121)
+++ b/order-service/src/main/java/com/orderservice/domain/entity/Address.java	(date 1714032042121)
@@ -0,0 +1,39 @@
+package com.orderservice.domain.entity;
+
+import com.orderservice.domain.dto.request.AddressRequestDto;
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+
+@Getter @Builder
+@AllArgsConstructor
+@NoArgsConstructor
+@Table(name = "address")
+@Entity(name = "address")
+public class Address {
+
+    @Id
+    @Column(name = "address_id")
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long addressId;
+
+    @Column(name = "city")
+    private String city;
+
+    @Column(name = "street")
+    private String street;
+
+    @Column(name = "zipcode")
+    private String zipCode;
+
+    @Column(name = "user_id")
+    private Long userId;
+
+    public void updateAddress(AddressRequestDto dto) {
+        this.city = dto.getCity();
+        this.street = dto.getStreet();
+        this.zipCode = dto.getZipCode();
+    }
+}
Index: order-service/src/main/java/com/orderservice/domain/entity/Delivery.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/entity/Delivery.java b/order-service/src/main/java/com/orderservice/domain/entity/Delivery.java
new file mode 100644
--- /dev/null	(date 1714032042124)
+++ b/order-service/src/main/java/com/orderservice/domain/entity/Delivery.java	(date 1714032042124)
@@ -0,0 +1,74 @@
+package com.orderservice.domain.entity;
+
+import com.orderservice.domain.common.DeliveryStatus;
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+
+import java.time.LocalDateTime;
+import java.time.temporal.ChronoUnit;
+
+@Getter
+@AllArgsConstructor
+@NoArgsConstructor
+@Table(name = "delivery")
+@Entity(name = "delivery")
+public class Delivery {
+
+    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Column(name = "delivery_id")
+    private Long deliveryId;
+
+    @Enumerated(EnumType.STRING)
+    private DeliveryStatus deliveryStatus;
+
+    @Column(name = "created_date")
+    private LocalDateTime createdDate;
+
+    @Column(name = "modified_date")
+    private LocalDateTime modifiedDate;
+
+    @Column(name = "address_id")
+    private Long addressId;
+
+//    public void mappingOrder(Order order) {
+//        this.orderId = order;
+//    }
+
+    // 주문 창에서 필요한 생성자
+    @Builder
+    public Delivery(Address address) {
+        this.addressId = address.getAddressId();
+        this.deliveryStatus = DeliveryStatus.PREPARE;
+    }
+
+    //== 비즈니스 로직 ==//
+
+    /** 배송 상태 업데이트하는 메서드 **/
+    public void updateStatus(DeliveryStatus status) {
+        this.deliveryStatus = status;
+    }
+
+    /** 날짜를 체크해 배송 상태를 업데이트하는 메서드 **/
+    public DeliveryStatus checkStatus() {
+        LocalDateTime now = LocalDateTime.now();
+        LocalDateTime createdDate = getCreatedDate();
+
+        long passDays = ChronoUnit.DAYS.between(now, createdDate);
+        if (passDays == 1L) updateStatus(DeliveryStatus.PROCESS);
+        else if (passDays > 1L) updateStatus(DeliveryStatus.COMPLETE);
+
+        return this.deliveryStatus;
+    }
+
+    /** 배송 정보가 생성되고 지난 일 수를 반환하는 메서드 **/
+    public long checkPastDay() {
+        LocalDateTime now = LocalDateTime.now();
+        LocalDateTime createdDate = getCreatedDate();
+
+        long passDays = ChronoUnit.DAYS.between(createdDate, now);
+        return passDays;
+    }
+}
Index: order-service/src/main/java/com/orderservice/domain/entity/Item.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/entity/Item.java b/order-service/src/main/java/com/orderservice/domain/entity/Item.java
new file mode 100644
--- /dev/null	(date 1714032042128)
+++ b/order-service/src/main/java/com/orderservice/domain/entity/Item.java	(date 1714032042128)
@@ -0,0 +1,53 @@
+package com.orderservice.domain.entity;
+
+import com.orderservice.domain.dto.request.ItemSaveRequestDto;
+import com.orderservice.web.exception.NotEnoughStockException;
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+
+import static com.layby.domain.common.ErrorCode.NOT_ENOUGH_STOCK;
+import static com.orderservice.domain.common.ErrorCode.NOT_ENOUGH_STOCK;
+
+@Getter
+@AllArgsConstructor
+@NoArgsConstructor
+@Table(name = "item")
+@Entity(name = "item")
+public class Item {
+
+    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Column(name = "item_id")
+    private Long itemId;
+
+    @Column(name = "item_name")
+    private String itemName;
+
+    @Column(name = "price")
+    private int price;
+
+    @Column(name = "details")
+    private String details;
+
+    @Column(name = "stock_quantity")
+    private int stockQuantity;
+
+    public void addStock(int quantity) {
+        this.stockQuantity += quantity;
+    }
+
+    public void removeStock(int quantity) {
+        int restStock = this.stockQuantity - quantity;
+        if (restStock < 0)
+            throw new NotEnoughStockException(NOT_ENOUGH_STOCK.getMessage());
+        this.stockQuantity = restStock;
+    }
+
+    public Item(ItemSaveRequestDto dto) {
+        this.itemName = dto.getItemName();
+        this.price = Integer.parseInt(dto.getPrice());
+        this.details = dto.getDetails();
+        this.stockQuantity = Integer.parseInt(dto.getStockQuantity());
+    }
+}
Index: order-service/src/main/java/com/orderservice/domain/entity/Order.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/entity/Order.java b/order-service/src/main/java/com/orderservice/domain/entity/Order.java
new file mode 100644
--- /dev/null	(date 1714032042132)
+++ b/order-service/src/main/java/com/orderservice/domain/entity/Order.java	(date 1714032042132)
@@ -0,0 +1,135 @@
+package com.orderservice.domain.entity;
+
+
+import com.orderservice.domain.common.DeliveryStatus;
+import com.orderservice.domain.common.OrderStatus;
+import com.orderservice.domain.dto.response.OrderStatusResponseDto;
+import com.orderservice.web.exception.DeliveryCancelFailedException;
+import com.orderservice.web.exception.RefundFailedException;
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+
+import java.time.LocalDateTime;
+
+import static com.orderservice.domain.common.DeliveryStatus.*;
+import static com.orderservice.domain.common.ErrorCode.DELIVERY_ALEADY_START;
+import static com.orderservice.domain.common.ErrorCode.REFUND_IS_NOT_POSSIBLE;
+import static com.orderservice.domain.common.OrderStatus.*;
+
+
+@Getter @Builder
+@AllArgsConstructor
+@NoArgsConstructor
+@Table(name = "orders")
+@Entity(name = "orders")
+public class Order {
+
+    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Column(name = "order_id")
+    private Long orderId;
+
+    @Enumerated(EnumType.STRING)
+    private OrderStatus orderStatus;
+
+    @Enumerated(EnumType.STRING)
+    private DeliveryStatus deliveryStatus;
+
+    @Column(name = "refund_request_date")
+    private LocalDateTime refundRequestDate;
+
+    @Column(name = "created_date")
+    private LocalDateTime createdDate;
+
+    @Column(name = "modified_date")
+    private LocalDateTime modifiedDate;
+
+    @Column(name = "user_id")
+    private Long userId;
+
+    @Column(name = "delvery_id")
+    private Long deliveryId;
+
+    //== 연관 관계 메서드 ==//
+    public void mappingUser(User user) {
+        this.userId = user.getUserId();
+//        user.getOrders().add(this);
+    }
+
+//    public void addOrderItem(OrderItem orderItem) {
+//        orderItems.add(orderItem);
+//        orderItem.mappingOrder(this);
+//    }
+
+    public void mappingDeliveryId(Long deliveryId) {
+        this.deliveryId = deliveryId;
+    }
+
+    //== 생성 메서드 ==//
+    public static Order createOrder(Long userId, Long deliveryId) {
+        Order order = Order.builder()
+                .orderStatus(ORDER)
+                .deliveryStatus(PREPARE)
+                .createdDate(LocalDateTime.now())
+                .modifiedDate(LocalDateTime.now())
+                .userId(userId)
+                .deliveryId(deliveryId)
+                .build();
+
+        return order;
+    }
+
+    //== 변환 메서드 ==//
+    public static OrderStatusResponseDto convertToStatusDto(Order order) {
+
+        // 배송 정보는 checkStatus() 로 업데이트해서 response
+        OrderStatusResponseDto orderStatusResponseDto = OrderStatusResponseDto.builder()
+                .orderStatus(order.getOrderStatus().getDescription())
+                .deliveryStatus(order.getDeliveryStatus().getDescription())
+                .totalPrice(order.getTotalPrice())
+                .build();
+
+        return orderStatusResponseDto;
+    }
+
+    //== 비즈니스 로직 ==//
+    /** 주문 취소 **/
+    public void cancel() {
+        if (this.deliveryStatus == PROCESS ||
+                this.deliveryStatus == COMPLETE) {
+            throw new DeliveryCancelFailedException(DELIVERY_ALEADY_START.getMessage());
+        }
+
+        this.orderStatus = CANCEL;
+        this.deliveryStatus = null;
+    }
+
+    /** 환불 **/
+    public void refund() {
+        long pastDay = delivery.checkPastDay();
+        if (pastDay == 3) {
+            this.orderStatus = REFUND_PROCESS;
+            this.refundRequestDate = LocalDateTime.now();
+        }
+        else throw new RefundFailedException(REFUND_IS_NOT_POSSIBLE.getMessage());
+    }
+
+    /** 상태 업데이트 **/
+    public void updateStatus(OrderStatus orderStatus) {
+        this.orderStatus = orderStatus;
+    }
+
+
+
+    //== 조회 로직 ==//
+    /** 전체 주문 가격 조회 -> 서비스 레이어로 이전 필요 **/
+//    public int getTotalPrice() {
+//        int totalPrice = 0;
+//        for (OrderItem orderItem : orderItems) {
+//            totalPrice += orderItem.getTotalPrice();
+//        }
+//        return totalPrice;
+//    }
+}
Index: order-service/src/main/java/com/orderservice/domain/entity/OrderItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/entity/OrderItem.java b/order-service/src/main/java/com/orderservice/domain/entity/OrderItem.java
new file mode 100644
--- /dev/null	(date 1714032042134)
+++ b/order-service/src/main/java/com/orderservice/domain/entity/OrderItem.java	(date 1714032042134)
@@ -0,0 +1,69 @@
+package com.orderservice.domain.entity;
+
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+
+@Getter @Builder
+@AllArgsConstructor
+@NoArgsConstructor
+@Table(name = "order_item")
+@Entity(name = "order_item")
+public class OrderItem {
+
+    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Column(name = "order_item_id")
+    private Long orderItemId;
+
+    @Column(name = "total_price")
+    private int totalPrice;
+
+    @Column(name = "count")
+    private int count;
+
+    @Column(name = "item_name")
+    private String itemName;
+
+    @Column(name = "price")
+    private int price;
+
+    @Column(name = "order_id")
+    private Long orderId;
+
+    @Column(name = "item_id")
+    private Long itemId;
+
+    public void mappingOrderId(Long orderId) {
+        this.orderId = orderId;
+    }
+
+    //== 생성 메서드 ==//
+    public static OrderItem convertFromWishItem(
+            WishItem wishItem
+    ) {
+
+        OrderItem orderItem = OrderItem.builder()
+                .totalPrice(wishItem.getTotalPrice())
+                .count(wishItem.getCount())
+                .itemName(wishItem.getItemName())
+                .price(wishItem.getPrice())
+                .itemId(wishItem.getItemId())
+                .build();
+
+        return orderItem;
+    }
+
+    //== 비즈니스 로직 ==//
+    /** 주문 취소 -> 서비스 레이어로 이전 필요 **/
+//    public void cancel() {
+//        this.item.addStock(this.count);
+//    }
+
+    //== 조회 로직 ==//
+    /** 주문 상품 전체 가격 계산 **/
+    public void calculateTotalPrice() {
+        this.totalPrice = price * count;
+    }
+}
Index: order-service/src/main/java/com/orderservice/domain/entity/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/entity/User.java b/order-service/src/main/java/com/orderservice/domain/entity/User.java
new file mode 100644
--- /dev/null	(date 1714032042137)
+++ b/order-service/src/main/java/com/orderservice/domain/entity/User.java	(date 1714032042137)
@@ -0,0 +1,61 @@
+package com.orderservice.domain.entity;
+
+import com.orderservice.domain.common.Role;
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import org.springframework.data.annotation.CreatedDate;
+import org.springframework.data.annotation.LastModifiedDate;
+
+import java.time.LocalDateTime;
+
+@Getter @Builder
+@AllArgsConstructor
+@NoArgsConstructor
+@Table(name = "user")
+@Entity(name = "user")
+public class User {
+
+    @Id
+    @Column(name = "user_id")
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long userId;
+
+    @Column(name = "username", length = 50, unique = true)
+    private String username;
+
+    @Column(name = "email", length = 100, unique = true)
+    private String email;
+
+    @Column(name = "email_verified_at")
+    private LocalDateTime emailVerifiedAt;
+
+    @Column(name = "password")
+    private String password;
+
+    @Column(name = "phone_number", length = 50)
+    private String phoneNumber;
+
+    @Enumerated(EnumType.STRING)
+    private Role role;
+
+    @CreatedDate
+    private LocalDateTime createdDate;
+
+    @LastModifiedDate
+    private LocalDateTime modifiedDate;
+
+    public void updatePhoneNumber(String phoneNumber) {
+        this.phoneNumber = phoneNumber;
+    }
+
+    public void updatePassword(String password) {
+        this.password = password;
+    }
+
+    public void updateRoleAfterEmailCF() {
+        this.role = Role.USER;
+    }
+}
\ No newline at end of file
Index: order-service/src/main/java/com/orderservice/domain/entity/WishItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/entity/WishItem.java b/order-service/src/main/java/com/orderservice/domain/entity/WishItem.java
new file mode 100644
--- /dev/null	(date 1714032042142)
+++ b/order-service/src/main/java/com/orderservice/domain/entity/WishItem.java	(date 1714032042142)
@@ -0,0 +1,65 @@
+package com.orderservice.domain.entity;
+
+
+import com.orderservice.domain.dto.response.WishItemResponseDto;
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+
+@Getter @Builder
+@AllArgsConstructor
+@NoArgsConstructor
+@Table(name = "wish_item")
+@Entity(name = "wish_item")
+public class WishItem {
+
+    @Id @Column(name = "wish_item_id")
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long wishItemId;
+
+    @Column(name = "item_name")
+    private String itemName;
+
+    @Column(name = "price")
+    private int price;
+
+    @Column(name = "count")
+    private int count;
+
+    @Column(name = "item_id")
+    private Long itemId;
+
+    @Column(name = "user_id")
+    private Long userId;
+
+    //== 조회 로직 ==//
+    /** 주문 상품 전체 가격 조회 **/
+    public int getTotalPrice() {
+        return this.price * this.count;
+    }
+
+    //== 생성 메서드 ==//
+    /** 위시리스트에서 사용자가 선택한 위시아이템 Dto를 위시아이템으로 바꾸는 메서드 **/
+    public static WishItem covertFromChooseDto(WishItemResponseDto dto, Long itemId) {
+        WishItem wishItem = WishItem.builder()
+                .price(dto.getPrice())
+                .count(dto.getCount())
+                .itemId(itemId)
+                .build();
+
+        return wishItem;
+    }
+
+    //== 비즈니스 로직 ==//
+
+    /** 수량 up **/
+    public void increaseCount() {
+        this.count++;
+    }
+
+    public void decreaseCount() {
+        this.count--;
+    }
+}
Index: order-service/src/main/java/com/orderservice/domain/repository/AddressRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/repository/AddressRepository.java b/order-service/src/main/java/com/orderservice/domain/repository/AddressRepository.java
new file mode 100644
--- /dev/null	(date 1714032042144)
+++ b/order-service/src/main/java/com/orderservice/domain/repository/AddressRepository.java	(date 1714032042144)
@@ -0,0 +1,14 @@
+package com.orderservice.domain.repository;
+
+import com.layby.domain.entity.Address;
+import com.layby.domain.entity.User;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import java.util.List;
+
+public interface AddressRepository extends JpaRepository<Address, Long> {
+
+    Address findByAddressId(Long addressId);
+
+    List<Address> findAllByUser(User user);
+}
Index: order-service/src/main/java/com/orderservice/domain/repository/CertificationRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/repository/CertificationRepository.java b/order-service/src/main/java/com/orderservice/domain/repository/CertificationRepository.java
new file mode 100644
--- /dev/null	(date 1714032042147)
+++ b/order-service/src/main/java/com/orderservice/domain/repository/CertificationRepository.java	(date 1714032042147)
@@ -0,0 +1,13 @@
+package com.orderservice.domain.repository;
+
+import com.layby.domain.entity.MailCertification;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface CertificationRepository extends JpaRepository<MailCertification, Long> {
+
+    MailCertification findByUsername(String username);
+
+    boolean existsByUsername(String username);
+
+    void deleteAllByUsername(String username);
+}
Index: order-service/src/main/java/com/orderservice/domain/repository/DeliveryRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/repository/DeliveryRepository.java b/order-service/src/main/java/com/orderservice/domain/repository/DeliveryRepository.java
new file mode 100644
--- /dev/null	(date 1714032042150)
+++ b/order-service/src/main/java/com/orderservice/domain/repository/DeliveryRepository.java	(date 1714032042150)
@@ -0,0 +1,9 @@
+package com.orderservice.domain.repository;
+
+import com.orderservice.domain.entity.Delivery;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface DeliveryRepository extends JpaRepository<Delivery, Long> {
+
+    Delivery findByDeliveryId(Long deliveryId);
+}
Index: order-service/src/main/java/com/orderservice/web/provider/EmailProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/provider/EmailProvider.java b/order-service/src/main/java/com/orderservice/web/provider/EmailProvider.java
new file mode 100644
--- /dev/null	(date 1714032042248)
+++ b/order-service/src/main/java/com/orderservice/web/provider/EmailProvider.java	(date 1714032042248)
@@ -0,0 +1,47 @@
+package com.orderservice.web.provider;
+
+import jakarta.mail.MessagingException;
+import jakarta.mail.internet.MimeMessage;
+import lombok.RequiredArgsConstructor;
+import org.springframework.mail.javamail.JavaMailSender;
+import org.springframework.mail.javamail.MimeMessageHelper;
+import org.springframework.stereotype.Component;
+
+@RequiredArgsConstructor
+@Component
+public class EmailProvider {
+
+    private final JavaMailSender javaMailSender;
+    private final String SUBJECT = "[예약 구매 서비스] 인증 메일입니다.";
+
+    public boolean sendCertificationMail(String email, String certificationNumber) {
+
+        try {
+            MimeMessage message = javaMailSender.createMimeMessage();
+            MimeMessageHelper messageHelper = new MimeMessageHelper(message, true);
+
+            String htmlContent = getCertificationMessage(certificationNumber);
+
+            messageHelper.setTo(email);
+            messageHelper.setSubject(SUBJECT);
+            messageHelper.setText(htmlContent, true);
+
+            javaMailSender.send(message);
+
+        } catch (MessagingException e) {
+            e.printStackTrace();
+            return false;
+        }
+
+        return true;
+    }
+
+    private String getCertificationMessage(String certificationNumber) {
+
+        StringBuilder certificationMessage = new StringBuilder();
+        certificationMessage.append("<h1 style='text-align: center;'>[예약 구매 서비스] 인증 메일</h1>");
+        certificationMessage.append("<h3 style='text-align: center;'>인증 코드 : <strong style='font-size: 32px; letter-spacing: 8px;'>")
+                .append(certificationNumber).append("</strong><h3>");
+        return certificationMessage.toString();
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/service/AddressService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/service/AddressService.java b/order-service/src/main/java/com/orderservice/web/service/AddressService.java
new file mode 100644
--- /dev/null	(date 1714032042251)
+++ b/order-service/src/main/java/com/orderservice/web/service/AddressService.java	(date 1714032042251)
@@ -0,0 +1,23 @@
+package com.orderservice.web.service;
+
+import com.orderservice.domain.dto.request.AddressRequestDto;
+import com.orderservice.domain.dto.response.AddressListReferResponseDto;
+import com.orderservice.domain.dto.response.ResponseDto;
+import com.orderservice.domain.entity.Address;
+import com.orderservice.domain.entity.User;
+import org.springframework.http.ResponseEntity;
+
+import java.util.List;
+
+public interface AddressService {
+
+    Address findByAddressId(Long addressId);
+
+    List<Address> findAllByUserId(Long userId);
+
+    ResponseEntity<ResponseDto> updateAddress(Long addressId, AddressRequestDto dto);
+
+    ResponseEntity<ResponseDto> addAddress(String username, AddressRequestDto dto);
+
+    ResponseEntity<AddressListReferResponseDto> referAddressListByUserId(Long userId);
+}
Index: order-service/src/main/java/com/orderservice/web/service/AuthService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/service/AuthService.java b/order-service/src/main/java/com/orderservice/web/service/AuthService.java
new file mode 100644
--- /dev/null	(date 1714032042254)
+++ b/order-service/src/main/java/com/orderservice/web/service/AuthService.java	(date 1714032042254)
@@ -0,0 +1,22 @@
+package com.orderservice.web.service;
+
+import com.layby.domain.dto.request.auth.*;
+import com.layby.domain.dto.response.ResponseDto;
+import com.layby.domain.dto.response.auth.*;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.Authentication;
+
+public interface AuthService {
+
+    ResponseEntity<ResponseDto> usernameCheck(UsernameCheckRequestDto dto);
+
+    ResponseEntity<ResponseDto> emailCertification(EmailCertificationRequestDto dto);
+
+    ResponseEntity<ResponseDto> checkCertification(CheckCertificationRequestDto dto);
+
+    ResponseEntity<ResponseDto> signUp(SignUpRequestDto dto);
+
+    ResponseEntity<SignInResponseDto> signIn(SignInRequestDto dto);
+
+    ResponseEntity<ResponseDto> logout(Authentication authentication);
+}
Index: order-service/src/main/java/com/orderservice/web/service/DeliveryService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/service/DeliveryService.java b/order-service/src/main/java/com/orderservice/web/service/DeliveryService.java
new file mode 100644
--- /dev/null	(date 1714032042257)
+++ b/order-service/src/main/java/com/orderservice/web/service/DeliveryService.java	(date 1714032042257)
@@ -0,0 +1,8 @@
+package com.orderservice.web.service;
+
+import com.orderservice.domain.entity.Delivery;
+
+public interface DeliveryService {
+
+    Long save(Delivery delivery);
+}
Index: order-service/src/main/java/com/orderservice/web/service/ItemService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/service/ItemService.java b/order-service/src/main/java/com/orderservice/web/service/ItemService.java
new file mode 100644
--- /dev/null	(date 1714032042261)
+++ b/order-service/src/main/java/com/orderservice/web/service/ItemService.java	(date 1714032042261)
@@ -0,0 +1,23 @@
+package com.orderservice.web.service;
+
+import com.orderservice.domain.dto.request.ItemSaveRequestDto;
+import com.orderservice.domain.dto.response.ItemListResponseDto;
+import com.orderservice.domain.dto.response.ItemResponseDto;
+import com.orderservice.domain.dto.response.ResponseDto;
+import com.orderservice.domain.entity.Item;
+import org.springframework.http.ResponseEntity;
+
+import java.util.List;
+
+public interface ItemService {
+
+    Item findByItemId(Long itemId);
+
+    Item findByItemName(String itemName);
+
+    ResponseEntity<ResponseDto> saveItem(ItemSaveRequestDto dto);
+
+    ResponseEntity<List<ItemListResponseDto>> referItemList();
+
+    ResponseEntity<ItemResponseDto> referItem(Long itemId);
+}
Index: order-service/src/main/java/com/orderservice/web/service/OrderItemService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/service/OrderItemService.java b/order-service/src/main/java/com/orderservice/web/service/OrderItemService.java
new file mode 100644
--- /dev/null	(date 1714032042263)
+++ b/order-service/src/main/java/com/orderservice/web/service/OrderItemService.java	(date 1714032042263)
@@ -0,0 +1,9 @@
+package com.orderservice.web.service;
+
+
+import com.orderservice.domain.entity.OrderItem;
+
+public interface OrderItemService {
+
+    void save(OrderItem orderItem);
+}
Index: order-service/src/main/java/com/orderservice/web/service/OrderService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/service/OrderService.java b/order-service/src/main/java/com/orderservice/web/service/OrderService.java
new file mode 100644
--- /dev/null	(date 1714032042266)
+++ b/order-service/src/main/java/com/orderservice/web/service/OrderService.java	(date 1714032042266)
@@ -0,0 +1,22 @@
+package com.orderservice.web.service;
+
+import com.orderservice.domain.entity.Order;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.Authentication;
+
+import java.util.List;
+
+public interface OrderService {
+
+    Long save(Order order);
+
+    Order findByOrderId(Long orderId);
+
+    List<Order> findAtferRefund();
+
+    ResponseEntity<List<OrderStatusResponseDto>> referOrdersStatus(Authentication authentication);
+
+    ResponseEntity<ResponseDto> cancelOrder(Long orderId);
+
+    ResponseEntity<ResponseDto> refundOrder(Long orderId);
+}
Index: order-service/src/main/java/com/orderservice/web/service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/service/UserService.java b/order-service/src/main/java/com/orderservice/web/service/UserService.java
new file mode 100644
--- /dev/null	(date 1714032042270)
+++ b/order-service/src/main/java/com/orderservice/web/service/UserService.java	(date 1714032042270)
@@ -0,0 +1,24 @@
+package com.orderservice.web.service;
+
+import com.layby.domain.dto.request.PhoneNumberUpdateRequestDto;
+import com.layby.domain.dto.request.UserPasswordUpdateRequestDto;
+import com.layby.domain.dto.response.ResponseDto;
+import com.layby.domain.dto.response.UserResponseDto;
+import com.layby.domain.entity.User;
+import org.springframework.http.ResponseEntity;
+import org.springframework.transaction.annotation.Transactional;
+
+public interface UserService {
+
+    User findByUserId(Long userId);
+
+    UserResponseDto referUser(Long userId);
+
+    User findByUsername(String username);
+
+    @Transactional
+    ResponseEntity<ResponseDto> updatePhoneNumber(Long userId, PhoneNumberUpdateRequestDto dto);
+
+    @Transactional
+    ResponseEntity<ResponseDto> updatePassword(Long userId, UserPasswordUpdateRequestDto dto);
+}
\ No newline at end of file
Index: order-service/src/main/java/com/orderservice/web/service/WishItemService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/service/WishItemService.java b/order-service/src/main/java/com/orderservice/web/service/WishItemService.java
new file mode 100644
--- /dev/null	(date 1714032042273)
+++ b/order-service/src/main/java/com/orderservice/web/service/WishItemService.java	(date 1714032042273)
@@ -0,0 +1,36 @@
+package com.orderservice.web.service;
+
+import com.orderservice.domain.dto.request.WishItemSaveRequestDto;
+import com.orderservice.domain.dto.response.WishItemResponseDto;
+import com.orderservice.domain.dto.response.WishListReferResponseDto;
+import com.orderservice.domain.entity.User;
+import com.orderservice.domain.entity.WishItem;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.Authentication;
+import com.orderservice.domain.dto.response.ResponseDto;
+
+import java.util.List;
+
+public interface WishItemService {
+
+    ResponseEntity<ResponseDto> save(WishItem wishItem);
+
+    WishItem findByWishItemId(Long wishItemId);
+
+    List<WishItem> findAllByUserId(Long userId);
+
+    ResponseEntity<ResponseDto> increaseCount(Long wishItemId);
+
+    ResponseEntity<ResponseDto> decreaseCount(Long wishItemId);
+
+    ResponseEntity<ResponseDto> delete(Long wishItemId);
+
+    ResponseEntity<ResponseDto> register(Long itemId, Authentication authentication, WishItemSaveRequestDto dto);
+
+    ResponseEntity<WishListReferResponseDto> referWishList(Authentication authentication);
+
+    ResponseEntity<ResponseDto> purchaseWishList(
+            Authentication authentication, Long addressId, List<WishItemResponseDto> dtos);
+
+    ResponseEntity<ResponseDto> purchaseWishListTest(Authentication authentication);
+}
Index: order-service/src/main/java/com/orderservice/web/service/implement/AddressServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/service/implement/AddressServiceImpl.java b/order-service/src/main/java/com/orderservice/web/service/implement/AddressServiceImpl.java
new file mode 100644
--- /dev/null	(date 1714032042276)
+++ b/order-service/src/main/java/com/orderservice/web/service/implement/AddressServiceImpl.java	(date 1714032042276)
@@ -0,0 +1,98 @@
+package com.orderservice.web.service.implement;
+
+import com.orderservice.domain.dto.request.AddressRequestDto;
+import com.orderservice.domain.dto.response.AddressListReferResponseDto;
+import com.orderservice.domain.dto.response.ResponseDto;
+import com.orderservice.domain.entity.Address;
+import com.orderservice.domain.entity.User;
+import com.orderservice.domain.repository.AddressRepository;
+import com.orderservice.web.exception.InternalServerErrorException;
+import com.orderservice.web.service.AddressService;
+import com.orderservice.web.service.UserService;
+import com.orderservice.web.util.AES256;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.util.List;
+
+import static com.orderservice.domain.common.ErrorCode.INTERNAL_SERVER_ERROR;
+
+
+@Slf4j
+@Transactional(readOnly = true)
+@RequiredArgsConstructor
+@Service
+public class AddressServiceImpl implements AddressService {
+
+    private final AddressRepository addressRepository;
+    private final UserService userService;
+    private final AES256 personalDataEncoder;
+
+    @Override
+    public Address findByAddressId(Long addressId) {
+        return addressRepository.findByAddressId(addressId);
+    }
+
+    @Override
+    public List<Address> findAllByUser(User user) {
+        return addressRepository.findAllByUser(user);
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> updateAddress(Long addressId, AddressRequestDto dto) {
+        Address foundAddress = addressRepository.findById(addressId).orElse(null);
+        foundAddress.updateAddress(dto);
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> addAddress(String username, AddressRequestDto dto) {
+
+        String city = dto.getCity();
+        String street = dto.getStreet();
+        String zipCode = dto.getZipCode();
+        String encodedCity = null;
+        String encodedStreet = null;
+        String encodedZipCode = null;
+        String encodedUsername = null;
+
+        try {
+            encodedCity = personalDataEncoder.encode(city);
+            encodedStreet = personalDataEncoder.encode(street);
+            encodedZipCode = personalDataEncoder.encode(zipCode);
+            encodedUsername = personalDataEncoder.encode(username);
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new InternalServerErrorException(INTERNAL_SERVER_ERROR.getMessage());
+        }
+
+        User user = userService.findByUsername(encodedUsername);
+        Address address = Address.builder()
+                    .city(encodedCity)
+                    .street(encodedStreet)
+                    .zipCode(encodedZipCode)
+                    .user(user)
+                    .build();
+
+        addressRepository.save(address);
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    public ResponseEntity<AddressListReferResponseDto> referAddressListByUserId(Long userId) {
+
+        User user = userService.findByUserId(userId);
+        List<Address> addressList = findAllByUser(user);
+        AddressListReferResponseDto addressListReferResponseDto = new AddressListReferResponseDto(addressList);
+
+        return ResponseEntity.status(HttpStatus.OK).body(addressListReferResponseDto);
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/service/implement/AuthServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/service/implement/AuthServiceImpl.java b/order-service/src/main/java/com/orderservice/web/service/implement/AuthServiceImpl.java
new file mode 100644
--- /dev/null	(date 1714032042278)
+++ b/order-service/src/main/java/com/orderservice/web/service/implement/AuthServiceImpl.java	(date 1714032042278)
@@ -0,0 +1,242 @@
+package com.orderservice.web.service.implement;
+
+import com.layby.domain.common.RedisDao;
+import com.layby.domain.common.Role;
+import com.layby.domain.dto.request.auth.*;
+import com.layby.domain.dto.response.ResponseDto;
+import com.layby.domain.dto.response.auth.*;
+import com.layby.domain.entity.MailCertification;
+import com.layby.domain.entity.User;
+import com.layby.domain.repository.CertificationRepository;
+import com.layby.domain.repository.UserRepository;
+import com.layby.web.exception.*;
+import com.layby.web.jwt.JwtProvider;
+import com.layby.web.provider.EmailProvider;
+import com.layby.web.service.AuthService;
+import com.layby.web.util.AES256;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.Authentication;
+import org.springframework.security.crypto.password.PasswordEncoder;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.time.Duration;
+import java.time.LocalDateTime;
+
+import static com.layby.domain.common.ErrorCode.*;
+
+@Slf4j
+@RequiredArgsConstructor
+@Service
+public class AuthServiceImpl implements AuthService {
+
+    private final CertificationRepository certificationRepository;
+    private final UserRepository userRepository;
+    private final PasswordEncoder passwordEncoder;
+    private final AES256 personalDataEncoder;
+
+    private final JwtProvider jwtProvider;
+    private final EmailProvider emailProvider;
+
+    private final RedisDao redisDao;
+
+    @Override
+    @Transactional(readOnly = true)
+    public ResponseEntity<ResponseDto> usernameCheck(UsernameCheckRequestDto dto) {
+
+        try {
+            String username = dto.getUsername();
+            boolean isExist = userRepository.existsByUsername(username);
+            if (isExist) throw new DuplicatedUsernameException(DUPLICATED_USERNAME.getMessage());
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new DatabaseErrorException(DATABASE_ERROR.getMessage());
+        }
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> emailCertification(EmailCertificationRequestDto dto) {
+
+        String username = null;
+        String encodedUsername = null;
+        String email = null;
+        String encodedEmail = null;
+
+        try {
+            username = dto.getUsername();
+            encodedUsername = personalDataEncoder.encode(username);
+            email = dto.getEmail();
+            encodedEmail = personalDataEncoder.encode(email);
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new InternalServerErrorException(INTERNAL_SERVER_ERROR.getMessage());
+        }
+
+        try {
+            boolean isExist = userRepository.existsByUsername(encodedUsername);
+            if (!isExist) throw new MailFailedException(MAIL_FAIL.getMessage());
+
+            String certificationNumber = getCertificationNumber();
+
+            boolean isSuccessed = emailProvider.sendCertificationMail(email, certificationNumber);
+            if (!isSuccessed) throw new MailFailedException(MAIL_FAIL.getMessage());
+
+            boolean isExistCF = certificationRepository.existsByUsername(username);
+            if (isExistCF) certificationRepository.deleteAllByUsername(username);
+
+            MailCertification mailCertification = new MailCertification(username, email, certificationNumber);
+            certificationRepository.save(mailCertification);
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new DatabaseErrorException(DATABASE_ERROR.getMessage());
+        }
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> checkCertification(CheckCertificationRequestDto dto) {
+
+        String username = dto.getUsername();
+        String email = dto.getEmail();
+        String certificationNumber = dto.getCertificationNumber();
+
+        boolean isExist = certificationRepository.existsByUsername(username);
+        if (!isExist) throw new CertificationFailedException(CERTIFICATION_FAIL.getMessage());
+
+        MailCertification mailCertification = certificationRepository.findByUsername(username);
+        boolean isMatched = mailCertification.getEmail().equals(email) &&
+                mailCertification.getCertificationNumber().equals(certificationNumber);
+        if (!isMatched) throw new CertificationFailedException(CERTIFICATION_FAIL.getMessage());
+
+        String encodedUsername = null;
+
+        try {
+            encodedUsername = personalDataEncoder.encode(username);
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new InternalServerErrorException(INTERNAL_SERVER_ERROR.getMessage());
+        }
+
+        try {
+            User user = userRepository.findByUsername(encodedUsername);
+
+            user.updateAfterCertification(Role.USER, LocalDateTime.now());
+
+            certificationRepository.deleteAllByUsername(username);
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new DatabaseErrorException(DATABASE_ERROR.getMessage());
+        }
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> signUp(SignUpRequestDto dto) {
+
+        try {
+            String username = dto.getUsername();
+            boolean isExist = userRepository.existsByUsername(username);
+            if (isExist) throw new DuplicatedUsernameException(DUPLICATED_USERNAME.getMessage());
+            String encodedUsername = personalDataEncoder.encode(username);
+            dto.setUsername(encodedUsername);
+
+            String password = dto.getPassword();
+            String encodedPassword= passwordEncoder.encode(password);
+            dto.setPassword(encodedPassword);
+
+            String email = dto.getEmail();
+            String encodedEmail = personalDataEncoder.encode(email);
+            dto.setEmail(encodedEmail);
+
+            String phoneNumber = dto.getPhoneNumber();
+            String encodedPhoneNumber = personalDataEncoder.encode(phoneNumber);
+            dto.setPhoneNumber(encodedPhoneNumber);
+
+            User user = new User(dto);
+            userRepository.save(user);
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new InternalServerErrorException(INTERNAL_SERVER_ERROR.getMessage());
+        }
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<SignInResponseDto> signIn(SignInRequestDto dto) {
+
+        String token = null;
+        String encodedUsername = null;
+
+        try {
+            String username = dto.getUsername();
+            encodedUsername = personalDataEncoder.encode(username);
+            User user = userRepository.findByUsername(encodedUsername);
+            if (user == null) throw new SignInFailedException(SIGN_IN_FAIL.getMessage());
+
+            String password = dto.getPassword();
+            String encodedPassword = user.getPassword();
+            boolean isMatched = passwordEncoder.matches(password, encodedPassword);
+            if (!isMatched) throw new SignInFailedException(SIGN_IN_FAIL.getMessage());
+
+            token = jwtProvider.createToken(username);
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new InternalServerErrorException(INTERNAL_SERVER_ERROR.getMessage());
+        }
+
+        redisDao.setValue("JWT_TOKEN:" + encodedUsername, token, Duration.ofMillis(jwtProvider.getTokenValidTime()));
+        SignInResponseDto signInResponseDto = new SignInResponseDto(token);
+
+        return ResponseEntity.status(HttpStatus.OK).body(signInResponseDto);
+    }
+
+    public ResponseEntity<ResponseDto> logout(Authentication authentication) {
+        String username = authentication.getPrincipal().toString();
+        String encodedUsername = null;
+
+        try {
+            encodedUsername = personalDataEncoder.encode(username);
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new InternalServerErrorException(INTERNAL_SERVER_ERROR.getMessage());
+        }
+
+        String key = "JWT_TOKEN:" + encodedUsername;
+        String token = redisDao.getValue(key);
+        if (token != null) {
+            redisDao.deleteValue(key);
+        }
+
+        return ResponseDto.success();
+    }
+
+    private String getCertificationNumber() {
+
+        StringBuilder certificationNumber = new StringBuilder();
+
+        for (int i = 0; i < 6; i++) {
+            certificationNumber.append((int) (Math.random() * 10));
+        }
+
+        return certificationNumber.toString();
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/service/implement/DeliveryServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/service/implement/DeliveryServiceImpl.java b/order-service/src/main/java/com/orderservice/web/service/implement/DeliveryServiceImpl.java
new file mode 100644
--- /dev/null	(date 1714032042280)
+++ b/order-service/src/main/java/com/orderservice/web/service/implement/DeliveryServiceImpl.java	(date 1714032042280)
@@ -0,0 +1,22 @@
+package com.orderservice.web.service.implement;
+
+import com.orderservice.domain.entity.Delivery;
+import com.orderservice.domain.repository.DeliveryRepository;
+import com.orderservice.web.service.DeliveryService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+@Service
+@RequiredArgsConstructor
+public class DeliveryServiceImpl implements DeliveryService {
+
+    private final DeliveryRepository deliveryRepository;
+
+    @Override
+    @Transactional
+    public Long save(Delivery delivery) {
+        Delivery saved = deliveryRepository.save(delivery);
+        return saved.getDeliveryId();
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/service/implement/ItemServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/service/implement/ItemServiceImpl.java b/order-service/src/main/java/com/orderservice/web/service/implement/ItemServiceImpl.java
new file mode 100644
--- /dev/null	(date 1714032042284)
+++ b/order-service/src/main/java/com/orderservice/web/service/implement/ItemServiceImpl.java	(date 1714032042284)
@@ -0,0 +1,67 @@
+package com.orderservice.web.service.implement;
+
+import com.layby.domain.dto.request.ItemSaveRequestDto;
+import com.layby.domain.dto.response.ItemListResponseDto;
+import com.layby.domain.dto.response.ItemResponseDto;
+import com.layby.domain.dto.response.ResponseDto;
+import com.layby.domain.entity.Item;
+import com.layby.domain.repository.ItemRepository;
+import com.layby.web.service.ItemService;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.util.List;
+import java.util.stream.Collectors;
+
+
+@Slf4j
+@Transactional(readOnly = true)
+@RequiredArgsConstructor
+@Service
+public class ItemServiceImpl implements ItemService {
+
+    private final ItemRepository itemRepository;
+
+    @Override
+    public Item findByItemId(Long itemId) {
+        return itemRepository.findByItemId(itemId);
+    }
+
+    @Override
+    public Item findByItemName(String itemName) {
+        return itemRepository.findByItemName(itemName);
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> saveItem(ItemSaveRequestDto dto) {
+        Item item = new Item(dto);
+        itemRepository.save(item);
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    public ResponseEntity<List<ItemListResponseDto>> referItemList() {
+        List<ItemListResponseDto> itemList = itemRepository.findAll().stream()
+                .map(itemEntity -> {
+                    return ItemListResponseDto.builder()
+                            .itemName(itemEntity.getItemName())
+                            .price(itemEntity.getPrice())
+                            .build();
+                })
+                .collect(Collectors.toList());
+
+        return ResponseEntity.status(HttpStatus.OK).body(itemList);
+    }
+
+    @Override
+    public ResponseEntity<ItemResponseDto> referItem(Long itemId) {
+        Item item = itemRepository.findById(itemId).orElse(null);
+        return ResponseEntity.status(HttpStatus.OK).body(new ItemResponseDto(item));
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/service/implement/OrderItemServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/service/implement/OrderItemServiceImpl.java b/order-service/src/main/java/com/orderservice/web/service/implement/OrderItemServiceImpl.java
new file mode 100644
--- /dev/null	(date 1714032042286)
+++ b/order-service/src/main/java/com/orderservice/web/service/implement/OrderItemServiceImpl.java	(date 1714032042286)
@@ -0,0 +1,20 @@
+package com.orderservice.web.service.implement;
+
+import com.orderservice.domain.entity.OrderItem;
+import com.orderservice.domain.repository.OrderItemRepository;
+import com.orderservice.web.service.OrderItemService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+
+@Service
+@RequiredArgsConstructor
+public class OrderItemServiceImpl implements OrderItemService {
+
+    private final OrderItemRepository orderItemRepository;
+
+
+    @Override
+    public void save(OrderItem orderItem) {
+        orderItemRepository.save(orderItem);
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/service/implement/OrderServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/service/implement/OrderServiceImpl.java b/order-service/src/main/java/com/orderservice/web/service/implement/OrderServiceImpl.java
new file mode 100644
--- /dev/null	(date 1714032042289)
+++ b/order-service/src/main/java/com/orderservice/web/service/implement/OrderServiceImpl.java	(date 1714032042289)
@@ -0,0 +1,91 @@
+package com.orderservice.web.service.implement;
+
+import com.orderservice.domain.common.ErrorCode;
+import com.orderservice.domain.dto.response.OrderStatusResponseDto;
+import com.orderservice.domain.dto.response.ResponseDto;
+import com.orderservice.domain.entity.Order;
+import com.orderservice.domain.entity.User;
+import com.orderservice.domain.repository.OrderRepository;
+import com.orderservice.web.exception.InternalServerErrorException;
+import com.orderservice.web.service.OrderService;
+import com.orderservice.web.service.UserService;
+import com.orderservice.web.util.AES256;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.Authentication;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.util.ArrayList;
+import java.util.List;
+
+@Service
+@RequiredArgsConstructor
+public class OrderServiceImpl implements OrderService {
+
+    private final OrderRepository orderRepository;
+    private final UserService userService;
+    private final AES256 personalDataEncoder;
+
+    @Override
+    public Long save(Order order) {
+        Order saved = orderRepository.save(order);
+        return saved.getOrderId();
+    }
+
+    @Override
+    public Order findByOrderId(Long orderId) {
+        return orderRepository.findByOrderId(orderId);
+    }
+
+    @Override
+    public List<Order> findAtferRefund() {
+        return orderRepository.findAfterRefund();
+    }
+
+    @Override
+    public ResponseEntity<List<OrderStatusResponseDto>> referOrdersStatus(Authentication authentication) {
+        String username = authentication.getPrincipal().toString();
+        String encodedUsername = null;
+
+        try {
+            encodedUsername = personalDataEncoder.encode(username);
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new InternalServerErrorException(ErrorCode.INTERNAL_SERVER_ERROR.getMessage());
+        }
+
+        // 현재 인증되어진 유저의 전체 주문 목록을 조회해서
+        User user = userService.findByUsername(encodedUsername);
+        List<Order> allByUser = orderRepository.findAllByUserIdWithOrderItemAndItem(user.getUserId());
+        List<OrderStatusResponseDto> responseBody = new ArrayList<>();
+
+        // Dto로 변환해서
+        for (Order order : allByUser) {
+            OrderStatusResponseDto orderStatusResponseDto = Order.convertToStatusDto(order);
+            responseBody.add(orderStatusResponseDto);
+        }
+
+        // 반환한다.
+        return ResponseEntity.status(HttpStatus.OK).body(responseBody);
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> cancelOrder(Long orderId) {
+        Order order = orderRepository.findByOrderId(orderId);
+        order.cancel();
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> refundOrder(Long orderId) {
+        Order order = orderRepository.findByOrderIdWithDelivery(orderId);
+        order.refund();
+
+        return ResponseDto.success();
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/service/implement/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/service/implement/UserServiceImpl.java b/order-service/src/main/java/com/orderservice/web/service/implement/UserServiceImpl.java
new file mode 100644
--- /dev/null	(date 1714032042291)
+++ b/order-service/src/main/java/com/orderservice/web/service/implement/UserServiceImpl.java	(date 1714032042291)
@@ -0,0 +1,99 @@
+package com.orderservice.web.service.implement;
+
+
+import com.layby.domain.common.ErrorCode;
+import com.layby.domain.dto.request.PhoneNumberUpdateRequestDto;
+import com.layby.domain.dto.request.UserPasswordUpdateRequestDto;
+import com.layby.domain.dto.response.ResponseDto;
+import com.layby.domain.dto.response.UserResponseDto;
+import com.layby.domain.entity.User;
+import com.layby.domain.repository.UserRepository;
+import com.layby.web.exception.AES256Exception;
+import com.layby.web.service.UserService;
+import com.layby.web.util.AES256;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.ResponseEntity;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+@Slf4j
+@Transactional(readOnly = true)
+@RequiredArgsConstructor
+@Service
+public class UserServiceImpl implements UserService {
+
+    private final UserRepository userRepository;
+    private final AES256 personalDataEncoder;
+
+
+    @Override
+    public User findByUserId(Long userId) {
+        return userRepository.findByUserId(userId);
+    }
+
+    @Override
+    public UserResponseDto referUser(Long userId) {
+        User user = userRepository.findByUserId(userId);
+
+        String encodedPhoneNumber = user.getPhoneNumber();
+        String phoneNumber = null;
+
+        log.info("encodedPhoneNumber = {}", encodedPhoneNumber);
+
+        try {
+            phoneNumber = personalDataEncoder.decode(encodedPhoneNumber);
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new AES256Exception(ErrorCode.INTERNAL_SERVER_ERROR.getMessage());
+        }
+
+        return new UserResponseDto(phoneNumber);
+    }
+
+    @Override
+    public User findByUsername(String username) {
+        return userRepository.findByUsername(username);
+    }
+
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> updatePhoneNumber(Long userId, PhoneNumberUpdateRequestDto dto) {
+        User foundUser = userRepository.findByUserId(userId);
+
+        String phoneNumber = dto.getPhoneNumber();
+        String encodedPhoneNumber = null;
+
+        try {
+            encodedPhoneNumber  = personalDataEncoder.encode(phoneNumber);
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new AES256Exception(ErrorCode.INTERNAL_SERVER_ERROR.getMessage());
+        }
+
+        foundUser.updatePhoneNumber(encodedPhoneNumber);
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> updatePassword(Long userId, UserPasswordUpdateRequestDto dto) {
+        User foundUser = userRepository.findByUserId(userId);
+
+        String password = dto.getPassword();
+        String encodedPassword = null;
+
+        try {
+            encodedPassword = personalDataEncoder.encode(password);
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new AES256Exception(ErrorCode.INTERNAL_SERVER_ERROR.getMessage());
+        }
+
+        foundUser.updatePassword(encodedPassword);
+
+        return ResponseDto.success();
+    }
+}
\ No newline at end of file
Index: order-service/src/main/java/com/orderservice/web/controller/WishItemController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/controller/WishItemController.java b/order-service/src/main/java/com/orderservice/web/controller/WishItemController.java
new file mode 100644
--- /dev/null	(date 1714032042199)
+++ b/order-service/src/main/java/com/orderservice/web/controller/WishItemController.java	(date 1714032042199)
@@ -0,0 +1,75 @@
+package com.orderservice.web.controller;
+
+import com.orderservice.domain.dto.response.AddressReferResponseDto;
+import com.orderservice.domain.dto.response.ResponseDto;
+import com.orderservice.domain.dto.response.WishItemResponseDto;
+import com.orderservice.domain.dto.response.WishListReferResponseDto;
+import com.orderservice.web.service.WishItemService;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.core.Authentication;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+@Slf4j
+@RequiredArgsConstructor
+@RestController
+@RequestMapping("/api/v1/wish-item/")
+public class WishItemController {
+
+    private final WishItemService wishItemService;
+
+    @GetMapping("/{user_id}")
+    public ResponseEntity<WishListReferResponseDto> referWishlist(
+            Authentication authentication
+    ) {
+        return wishItemService.referWishList(authentication);
+    }
+
+    /**
+    클라이언트가 위시리스트에서 구입할 상품을 고르고 배송받을 주소를 고를 때 사용되는 API
+    */
+    @PostMapping("/{user_id}")
+    public ResponseEntity<ResponseDto> purchaseWishList(
+            Authentication authentication,
+            @RequestBody AddressReferResponseDto addressReferResponseDto,
+            @RequestBody List<WishItemResponseDto> dtos
+    ) {
+        Long addressId = addressReferResponseDto.getAddressId();
+        return wishItemService.purchaseWishList(authentication, addressId, dtos);
+    }
+
+    /**
+     사용자의 주소 중 한 곳으로 위시리스트 상품 모두를 주문하는 API
+     */
+    @PostMapping("/{user_id}/test")
+    public ResponseEntity<ResponseDto> purchaseWishListTest(
+            @PathVariable(name = "user_id") Long userId
+    ) {
+        return wishItemService.purchaseWishListTest(userId);
+    }
+
+    @PatchMapping("/{wish_item_id}/increase-count")
+    public ResponseEntity<ResponseDto> increaseCount(
+            @PathVariable(name = "wish_item_id") Long wishItemId
+    ) {
+        return wishItemService.increaseCount(wishItemId);
+    }
+
+    @PatchMapping("/{wish_item_id}/decrease-count")
+    public ResponseEntity<ResponseDto> decreaseCount(
+            @PathVariable(name = "wish_item_id") Long wishItemId
+    ) {
+        return wishItemService.decreaseCount(wishItemId);
+    }
+
+    @DeleteMapping("/{wish_item_id}/")
+    public ResponseEntity<ResponseDto> delete(
+            @PathVariable(name = "wish_item_id") Long wishItemId
+    ) {
+        return wishItemService.delete(wishItemId);
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/exception/AES256Exception.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/exception/AES256Exception.java b/order-service/src/main/java/com/orderservice/web/exception/AES256Exception.java
new file mode 100644
--- /dev/null	(date 1714032042202)
+++ b/order-service/src/main/java/com/orderservice/web/exception/AES256Exception.java	(date 1714032042202)
@@ -0,0 +1,19 @@
+package com.orderservice.web.exception;
+
+public class AES256Exception extends RuntimeException {
+    public AES256Exception() {
+        super();
+    }
+
+    public AES256Exception(String message) {
+        super(message);
+    }
+
+    public AES256Exception(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public AES256Exception(Throwable cause) {
+        super(cause);
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/exception/CertificationFailedException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/exception/CertificationFailedException.java b/order-service/src/main/java/com/orderservice/web/exception/CertificationFailedException.java
new file mode 100644
--- /dev/null	(date 1714032042207)
+++ b/order-service/src/main/java/com/orderservice/web/exception/CertificationFailedException.java	(date 1714032042207)
@@ -0,0 +1,19 @@
+package com.orderservice.web.exception;
+
+public class CertificationFailedException extends RuntimeException {
+    public CertificationFailedException() {
+        super();
+    }
+
+    public CertificationFailedException(String message) {
+        super(message);
+    }
+
+    public CertificationFailedException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public CertificationFailedException(Throwable cause) {
+        super(cause);
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/exception/DatabaseErrorException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/exception/DatabaseErrorException.java b/order-service/src/main/java/com/orderservice/web/exception/DatabaseErrorException.java
new file mode 100644
--- /dev/null	(date 1714032042210)
+++ b/order-service/src/main/java/com/orderservice/web/exception/DatabaseErrorException.java	(date 1714032042210)
@@ -0,0 +1,19 @@
+package com.orderservice.web.exception;
+
+public class DatabaseErrorException extends RuntimeException {
+    public DatabaseErrorException() {
+        super();
+    }
+
+    public DatabaseErrorException(String message) {
+        super(message);
+    }
+
+    public DatabaseErrorException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public DatabaseErrorException(Throwable cause) {
+        super(cause);
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/exception/DeliveryCancelFailedException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/exception/DeliveryCancelFailedException.java b/order-service/src/main/java/com/orderservice/web/exception/DeliveryCancelFailedException.java
new file mode 100644
--- /dev/null	(date 1714032042213)
+++ b/order-service/src/main/java/com/orderservice/web/exception/DeliveryCancelFailedException.java	(date 1714032042213)
@@ -0,0 +1,19 @@
+package com.orderservice.web.exception;
+
+public class DeliveryCancelFailedException extends RuntimeException {
+    public DeliveryCancelFailedException() {
+        super();
+    }
+
+    public DeliveryCancelFailedException(String message) {
+        super(message);
+    }
+
+    public DeliveryCancelFailedException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public DeliveryCancelFailedException(Throwable cause) {
+        super(cause);
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/exception/DuplicatedUsernameException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/exception/DuplicatedUsernameException.java b/order-service/src/main/java/com/orderservice/web/exception/DuplicatedUsernameException.java
new file mode 100644
--- /dev/null	(date 1714032042216)
+++ b/order-service/src/main/java/com/orderservice/web/exception/DuplicatedUsernameException.java	(date 1714032042216)
@@ -0,0 +1,19 @@
+package com.orderservice.web.exception;
+
+public class DuplicatedUsernameException extends RuntimeException {
+    public DuplicatedUsernameException() {
+        super();
+    }
+
+    public DuplicatedUsernameException(String message) {
+        super(message);
+    }
+
+    public DuplicatedUsernameException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public DuplicatedUsernameException(Throwable cause) {
+        super(cause);
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/exception/InternalServerErrorException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/exception/InternalServerErrorException.java b/order-service/src/main/java/com/orderservice/web/exception/InternalServerErrorException.java
new file mode 100644
--- /dev/null	(date 1714032042219)
+++ b/order-service/src/main/java/com/orderservice/web/exception/InternalServerErrorException.java	(date 1714032042219)
@@ -0,0 +1,19 @@
+package com.orderservice.web.exception;
+
+public class InternalServerErrorException extends RuntimeException {
+    public InternalServerErrorException() {
+        super();
+    }
+
+    public InternalServerErrorException(String message) {
+        super(message);
+    }
+
+    public InternalServerErrorException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public InternalServerErrorException(Throwable cause) {
+        super(cause);
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/exception/MailFailedException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/exception/MailFailedException.java b/order-service/src/main/java/com/orderservice/web/exception/MailFailedException.java
new file mode 100644
--- /dev/null	(date 1714032042222)
+++ b/order-service/src/main/java/com/orderservice/web/exception/MailFailedException.java	(date 1714032042222)
@@ -0,0 +1,19 @@
+package com.orderservice.web.exception;
+
+public class MailFailedException extends RuntimeException {
+    public MailFailedException() {
+        super();
+    }
+
+    public MailFailedException(String message) {
+        super(message);
+    }
+
+    public MailFailedException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public MailFailedException(Throwable cause) {
+        super(cause);
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/exception/NotEnoughStockException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/exception/NotEnoughStockException.java b/order-service/src/main/java/com/orderservice/web/exception/NotEnoughStockException.java
new file mode 100644
--- /dev/null	(date 1714032042225)
+++ b/order-service/src/main/java/com/orderservice/web/exception/NotEnoughStockException.java	(date 1714032042225)
@@ -0,0 +1,19 @@
+package com.orderservice.web.exception;
+
+public class NotEnoughStockException extends RuntimeException {
+    public NotEnoughStockException() {
+        super();
+    }
+
+    public NotEnoughStockException(String message) {
+        super(message);
+    }
+
+    public NotEnoughStockException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public NotEnoughStockException(Throwable cause) {
+        super(cause);
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/exception/RefundFailedException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/exception/RefundFailedException.java b/order-service/src/main/java/com/orderservice/web/exception/RefundFailedException.java
new file mode 100644
--- /dev/null	(date 1714032042228)
+++ b/order-service/src/main/java/com/orderservice/web/exception/RefundFailedException.java	(date 1714032042228)
@@ -0,0 +1,19 @@
+package com.orderservice.web.exception;
+
+public class RefundFailedException extends RuntimeException {
+    public RefundFailedException() {
+        super();
+    }
+
+    public RefundFailedException(String message) {
+        super(message);
+    }
+
+    public RefundFailedException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public RefundFailedException(Throwable cause) {
+        super(cause);
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/exception/SignInFailedException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/exception/SignInFailedException.java b/order-service/src/main/java/com/orderservice/web/exception/SignInFailedException.java
new file mode 100644
--- /dev/null	(date 1714032042230)
+++ b/order-service/src/main/java/com/orderservice/web/exception/SignInFailedException.java	(date 1714032042230)
@@ -0,0 +1,19 @@
+package com.orderservice.web.exception;
+
+public class SignInFailedException extends RuntimeException {
+    public SignInFailedException() {
+        super();
+    }
+
+    public SignInFailedException(String message) {
+        super(message);
+    }
+
+    public SignInFailedException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public SignInFailedException(Throwable cause) {
+        super(cause);
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/exception/ValidationFailedException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/exception/ValidationFailedException.java b/order-service/src/main/java/com/orderservice/web/exception/ValidationFailedException.java
new file mode 100644
--- /dev/null	(date 1714032042234)
+++ b/order-service/src/main/java/com/orderservice/web/exception/ValidationFailedException.java	(date 1714032042234)
@@ -0,0 +1,19 @@
+package com.orderservice.web.exception;
+
+public class ValidationFailedException extends RuntimeException {
+    public ValidationFailedException() {
+        super();
+    }
+
+    public ValidationFailedException(String message) {
+        super(message);
+    }
+
+    public ValidationFailedException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public ValidationFailedException(Throwable cause) {
+        super(cause);
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/filter/JwtAuthenticationFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/filter/JwtAuthenticationFilter.java b/order-service/src/main/java/com/orderservice/web/filter/JwtAuthenticationFilter.java
new file mode 100644
--- /dev/null	(date 1714032042237)
+++ b/order-service/src/main/java/com/orderservice/web/filter/JwtAuthenticationFilter.java	(date 1714032042237)
@@ -0,0 +1,97 @@
+package com.orderservice.web.filter;
+
+import com.layby.domain.common.RedisDao;
+import com.layby.domain.entity.User;
+import com.layby.domain.repository.UserRepository;
+import com.layby.web.jwt.JwtProvider;
+import com.layby.web.util.AES256;
+import jakarta.servlet.FilterChain;
+import jakarta.servlet.ServletException;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
+import lombok.RequiredArgsConstructor;
+import org.springframework.security.authentication.AbstractAuthenticationToken;
+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
+import org.springframework.security.core.GrantedAuthority;
+import org.springframework.security.core.authority.SimpleGrantedAuthority;
+import org.springframework.security.core.context.SecurityContext;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
+import org.springframework.stereotype.Component;
+import org.springframework.util.StringUtils;
+import org.springframework.web.filter.OncePerRequestFilter;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+@Component
+@RequiredArgsConstructor
+public class JwtAuthenticationFilter extends OncePerRequestFilter {
+
+    private final JwtProvider jwtProvider;
+    private final UserRepository userRepository;
+    private final AES256 personalDataEncoder;
+
+    private final RedisDao redisDao;
+
+    @Override
+    protected void doFilterInternal(
+            HttpServletRequest request, HttpServletResponse response, FilterChain filterChain
+    ) throws ServletException, IOException {
+
+        try {
+            String token = parseBearerToken(request);
+            if (token == null) { // 토큰이 없으면
+                filterChain.doFilter(request, response); // 다음 필터로 넘어가게 한다.
+                return;
+            }
+
+            String username = jwtProvider.validate(token);
+            if (username == null) { // 토큰에 유저 정보가 없으면
+                filterChain.doFilter(request, response); // 다음 필터로 넘어가게 한다.
+                return;
+            }
+
+            String encodedUsername = personalDataEncoder.encode(username);
+            String key = "JWT_TOKEN:" + encodedUsername;
+            String storedToken = redisDao.getValue(key);
+
+            // 로그인 여부 체크
+            if (redisDao.hasKey(key) && storedToken.equals(token)) {
+                User user = userRepository.findByUsername(encodedUsername);
+                String role = user.getRole().getKey(); // role : ROLE_USER, ROLE_ADMIN
+
+                List<GrantedAuthority> authorities = new ArrayList<>();
+                authorities.add(new SimpleGrantedAuthority(role));
+
+                SecurityContext securityContext = SecurityContextHolder.createEmptyContext();
+                AbstractAuthenticationToken authenticationToken =
+                        new UsernamePasswordAuthenticationToken(username, null, authorities);
+                authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
+
+                securityContext.setAuthentication(authenticationToken);
+                SecurityContextHolder.setContext(securityContext);
+            }
+
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+        filterChain.doFilter(request, response);
+    }
+
+    private String parseBearerToken(HttpServletRequest request) {
+
+        String authorization = request.getHeader("Authorization");
+
+        boolean hasAuthorization = StringUtils.hasText(authorization);
+        if (!hasAuthorization) return null;
+
+        boolean isBearer = authorization.startsWith("Bearer ");
+        if (!isBearer) return null;
+
+        String token = authorization.substring(7);
+        return token;
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/handler/RestResponseExceptionHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/handler/RestResponseExceptionHandler.java b/order-service/src/main/java/com/orderservice/web/handler/RestResponseExceptionHandler.java
new file mode 100644
--- /dev/null	(date 1714032042240)
+++ b/order-service/src/main/java/com/orderservice/web/handler/RestResponseExceptionHandler.java	(date 1714032042240)
@@ -0,0 +1,55 @@
+package com.orderservice.web.handler;
+
+import com.layby.domain.dto.ErrorDto;
+import com.layby.web.exception.*;
+import org.springframework.security.access.AccessDeniedException;
+import org.springframework.web.bind.annotation.ExceptionHandler;
+import org.springframework.web.bind.annotation.ResponseBody;
+import org.springframework.web.bind.annotation.ResponseStatus;
+import org.springframework.web.bind.annotation.RestControllerAdvice;
+import org.springframework.web.context.request.WebRequest;
+import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;
+
+import static org.springframework.http.HttpStatus.*;
+
+@RestControllerAdvice
+public class RestResponseExceptionHandler extends ResponseEntityExceptionHandler {
+
+    @ResponseStatus(INTERNAL_SERVER_ERROR)
+    @ExceptionHandler(value = { AES256Exception.class, DatabaseErrorException.class,
+            InternalServerErrorException.class })
+    @ResponseBody
+    protected ErrorDto interalServerError(RuntimeException ex, WebRequest request) {
+        return new ErrorDto(INTERNAL_SERVER_ERROR.value(), ex.getMessage());
+    }
+
+    @ResponseStatus(FORBIDDEN)
+    @ExceptionHandler(value = { AccessDeniedException.class })
+    @ResponseBody
+    protected ErrorDto forbidden(RuntimeException ex, WebRequest request) {
+        return new ErrorDto(FORBIDDEN.value(), ex.getMessage());
+    }
+
+    @ResponseStatus(UNAUTHORIZED)
+    @ExceptionHandler(value = { SignInFailedException.class, CertificationFailedException.class })
+    @ResponseBody
+    protected ErrorDto unauthorized(RuntimeException ex, WebRequest request) {
+        return new ErrorDto(UNAUTHORIZED.value(), ex.getMessage());
+    }
+
+
+    @ResponseStatus(BAD_REQUEST)
+    @ExceptionHandler(value = { DuplicatedUsernameException.class, MailFailedException.class })
+    @ResponseBody
+    protected ErrorDto badRequest(RuntimeException ex, WebRequest request) {
+        return new ErrorDto(BAD_REQUEST.value(), ex.getMessage());
+    }
+
+    @ResponseStatus(CONFLICT)
+    @ExceptionHandler(value = { NotEnoughStockException.class, DeliveryCancelFailedException.class,
+            RefundFailedException.class, NotEnoughStockException.class, DeliveryCancelFailedException.class })
+    @ResponseBody
+    protected ErrorDto conflict(RuntimeException ex, WebRequest request) {
+        return new ErrorDto(CONFLICT.value(), ex.getMessage());
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/handler/ValidationExceptionHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/handler/ValidationExceptionHandler.java b/order-service/src/main/java/com/orderservice/web/handler/ValidationExceptionHandler.java
new file mode 100644
--- /dev/null	(date 1714032042243)
+++ b/order-service/src/main/java/com/orderservice/web/handler/ValidationExceptionHandler.java	(date 1714032042243)
@@ -0,0 +1,21 @@
+package com.orderservice.web.handler;
+
+import com.layby.domain.dto.ErrorDto;
+import org.springframework.http.converter.HttpMessageNotReadableException;
+import org.springframework.web.bind.MethodArgumentNotValidException;
+import org.springframework.web.bind.annotation.ExceptionHandler;
+import org.springframework.web.bind.annotation.ResponseStatus;
+import org.springframework.web.bind.annotation.RestControllerAdvice;
+
+import static com.layby.domain.common.ErrorCode.*;
+import static org.springframework.http.HttpStatus.UNAUTHORIZED;
+
+@RestControllerAdvice
+public class ValidationExceptionHandler {
+
+    @ResponseStatus(UNAUTHORIZED)
+    @ExceptionHandler({ MethodArgumentNotValidException.class, HttpMessageNotReadableException.class })
+    public ErrorDto validationExceptionHandler(Exception e) {
+        return new ErrorDto(UNAUTHORIZED.value(), VALIDATION_FAIL.getMessage());
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/jwt/JwtProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/jwt/JwtProvider.java b/order-service/src/main/java/com/orderservice/web/jwt/JwtProvider.java
new file mode 100644
--- /dev/null	(date 1714032042245)
+++ b/order-service/src/main/java/com/orderservice/web/jwt/JwtProvider.java	(date 1714032042245)
@@ -0,0 +1,69 @@
+package com.orderservice.web.jwt;
+
+import io.jsonwebtoken.Jwts;
+import io.jsonwebtoken.SignatureAlgorithm;
+import io.jsonwebtoken.io.Decoders;
+import io.jsonwebtoken.security.Keys;
+import lombok.Getter;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.InitializingBean;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.stereotype.Component;
+
+import java.security.Key;
+import java.time.Instant;
+import java.time.temporal.ChronoUnit;
+import java.util.Date;
+
+@Slf4j
+@Component
+public class JwtProvider implements InitializingBean {
+
+    private final String secretKey;
+    private Key key;
+
+    @Getter
+    private final long tokenValidTime = 60 * 60 * 1000L;
+
+    public JwtProvider(
+            @Value("${jwt.secret-key}") String secretKey) {
+        this.secretKey = secretKey;
+    }
+
+    @Override
+    public void afterPropertiesSet() {
+        byte[] keyBytes = Decoders.BASE64.decode(secretKey);
+        this.key = Keys.hmacShaKeyFor(keyBytes);
+    }
+
+    public String createToken(String username) {
+
+        Date expiredDate = Date.from(Instant.now().plus(1, ChronoUnit.HOURS));
+
+        return Jwts.builder()
+                .signWith(key, SignatureAlgorithm.HS512)
+                .setSubject(username).setIssuedAt(new Date())
+                .setExpiration(expiredDate)
+                .compact();
+    }
+
+    public String validate(String jwt) {
+
+        String subject = null;
+
+        try {
+            subject = Jwts.parserBuilder()
+                    .setSigningKey(key)
+                    .build()
+                    .parseClaimsJws(jwt)
+                    .getBody()
+                    .getSubject();
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            return null;
+        }
+
+        return subject;
+    }
+}
\ No newline at end of file
Index: order-service/src/main/java/com/orderservice/web/service/implement/WishItemServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/service/implement/WishItemServiceImpl.java b/order-service/src/main/java/com/orderservice/web/service/implement/WishItemServiceImpl.java
new file mode 100644
--- /dev/null	(date 1714032042294)
+++ b/order-service/src/main/java/com/orderservice/web/service/implement/WishItemServiceImpl.java	(date 1714032042294)
@@ -0,0 +1,208 @@
+package com.orderservice.web.service.implement;
+
+
+import com.orderservice.domain.common.ErrorCode;
+import com.orderservice.domain.dto.request.WishItemSaveRequestDto;
+import com.orderservice.domain.dto.response.*;
+import com.orderservice.domain.entity.*;
+import com.orderservice.domain.repository.WishItemRepository;
+import com.orderservice.web.client.ItemServiceClient;
+import com.orderservice.web.client.UserServiceClient;
+import com.orderservice.web.exception.DatabaseErrorException;
+import com.orderservice.web.service.*;
+import com.orderservice.web.util.AES256;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.core.env.Environment;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.Authentication;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.util.ArrayList;
+import java.util.List;
+
+@Service @Slf4j
+@RequiredArgsConstructor
+@Transactional(readOnly = true)
+public class WishItemServiceImpl implements WishItemService {
+
+    private final WishItemRepository wishItemRepository;
+    private final OrderService orderService;
+    private final OrderItemService orderItemService;
+    private final AddressService addressService;
+    private final DeliveryService deliveryService;
+    private final AES256 personalDataEncoder;
+
+    private final Environment env;
+    private final UserServiceClient userServiceClient;
+    private final ItemServiceClient itemServiceClient;
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> save(WishItem wishItem) {
+        try {
+            wishItemRepository.save(wishItem);
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new DatabaseErrorException(ErrorCode.DATABASE_ERROR.getMessage());
+        }
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    public WishItem findByWishItemId(Long wishItemId) {
+        return wishItemRepository.findByWishItemId(wishItemId);
+    }
+
+    @Override
+    public List<WishItem> findAllByUserId(Long userId) {
+        return wishItemRepository.findAllByUserId(userId);
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> increaseCount(Long wishItemId) {
+        WishItem wishItem = findByWishItemId(wishItemId);
+        wishItem.increaseCount();
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> decreaseCount(Long wishItemId) {
+        WishItem wishItem = findByWishItemId(wishItemId);
+        wishItem.decreaseCount();
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    public ResponseEntity<ResponseDto> delete(Long wishItemId) {
+        WishItem forDelete = findByWishItemId(wishItemId);
+        wishItemRepository.delete(forDelete);
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> register(Long itemId, Authentication authentication, WishItemSaveRequestDto dto) {
+
+        UserResponseDto userResponseDto = userServiceClient.getUser(authentication);
+        ItemResponseDto itemResponseDto = itemServiceClient.getItem(itemId);
+
+
+        WishItem wishItem = WishItem.builder()
+                .itemId(itemId)
+                .price(itemResponseDto.getPrice())
+                .count(dto.getCount())
+                .userId(userResponseDto.getUserId())
+                .build();
+
+        wishItemRepository.save(wishItem);
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    public ResponseEntity<WishListReferResponseDto> referWishList(Authentication authentication) {
+        UserResponseDto userResponseDto = userServiceClient.getUser(authentication);
+
+        // 사용자의 위시 리스트에 담긴 위시 아이템 리스트를 가져온다
+        List<WishItem> allByUser = wishItemRepository.findAllByUserId(userResponseDto.getUserId());
+
+        // 가져온 위시 아이템 리스트를 응답 Dto로 변환한다.
+        WishListReferResponseDto wishlistReferResponseDto = new WishListReferResponseDto(allByUser);
+
+        return ResponseEntity.status(HttpStatus.OK).body(wishlistReferResponseDto);
+    }
+
+    /**
+     purchaseWishList 흐름
+     1. 클라이언트가 위시리스트에서 구매할 위시 아이템을 고른 후 결제창으로 넘어간다.
+     2. 결제창에서 이번에 배송받을 주소 정보를 선택한다.
+     3. user, delivery, orderItems 로 주문을 생성해 저장한다.
+     */
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> purchaseWishList(
+            Authentication authentication, Long addressId, List<WishItemResponseDto> dtos
+    ) {
+        UserResponseDto userResponseDto = userServiceClient.getUser(authentication);
+        Address address = addressService.findByAddressId(addressId); // 유저가 선택한 주소
+
+        // 사용자가 선택한 주소값으로 Delivery를 생성한다.
+        Delivery delivery = new Delivery(address);
+        Long deliveryId = deliveryService.save(delivery);
+
+        // 유저 정보와 배송 정보를 매핑해서 주문을 생성한다.
+        Order order = Order.createOrder(userResponseDto.getUserId(), deliveryId);
+
+        // 사용자가 고른 위시 아이템들을 각각 orderItem으로 변환하는 루프
+        for (WishItemResponseDto dto : dtos) { // 위시리스트에 담은 상품들을 조회하는 화면에서 넘어오므로 Dto이다.
+
+            // 선택한 수량만큼 재고를 감소시킨다.
+            itemServiceClient.removeStockDuringPurchase(dto.getItemId(), dto.getCount());
+
+            // 선택한 위시 아이템을 가져온다.
+            WishItem wishItem = findByWishItemId(dto.getWishItemId());
+
+            // 그 위시 아이템을 오더 아이템으로 변환해 저장한다.
+            OrderItem orderItem = OrderItem.convertFromWishItem(wishItem);
+            orderItem.mappingOrderId(order.getOrderId()); // 주문 Id와 매핑한다.
+            orderItemService.save(orderItem);
+
+            // 오더 아이템으로 변환된 것은 위시 리스트에서 삭제된다.
+            wishItemRepository.delete(wishItem);
+        }
+
+        orderService.save(order);
+
+        return ResponseDto.success();
+    }
+
+    /**
+     purchaseWishListTest 흐름
+     1. 클라이언트가 위시리스트에서 구입할 품목들만 선택하는 것 없이 위시리스트의 아이템들을 모두 구매한다.
+     2. 사용자가 갖고 있는 주소 중 처음으로 조회되는 곳으로 주문한다.
+     3. user, delivery, orderItems 로 주문을 생성해 저장한다.
+     */
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> purchaseWishListTest(Authentication authentication) {
+        UserResponseDto dto = userServiceClient.getUser(authentication);
+        List<WishItem> wishItems = wishItemRepository.findAllByUserIdWithItem(dto.getUserId());
+        Address address = addressService.findAllByUserId(dto.getUserId()).get(0);
+        List<OrderItem> orderItems = new ArrayList<>(); // 오더에 매핑할 오더아이템 리스트
+
+        // 사용자가 선택한 주소값으로 Delivery를 생성한다.
+        Delivery delivery = new Delivery(address);
+        Long deliveryId = deliveryService.save(delivery);
+
+        // 해당 결제에 대한 오더를 생성한 후 배송 정보에 매핑하고
+        Order order = Order.createOrder(dto.getUserId(), deliveryId);
+
+        // 각 상품의 재고를 위시리스트에 담은 갯수만큼 감소시키고, 처리가 끝난 상품은 위시리스트에서 제거한다.
+        for (WishItem wishItem : wishItems) {
+
+            // 선택한 수량만큼 재고를 감소시킨다.
+            itemServiceClient.removeStockDuringPurchase(wishItem.getItemId(), wishItem.getCount());
+
+            // 구입한 상품은 위시 리스트에서 삭제된다.
+            wishItemRepository.delete(wishItem);
+
+            // 위시 아이템을 오더 아이템으로 변환해 저장한다.
+            OrderItem orderItem = OrderItem.convertFromWishItem(wishItem);
+            orderItem.mappingOrderId(order.getOrderId()); // 주문 Id와 매핑한다.
+            orderItemService.save(orderItem);
+        }
+
+        orderService.save(order);
+
+        return ResponseDto.success();
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/util/AES256.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/util/AES256.java b/order-service/src/main/java/com/orderservice/web/util/AES256.java
new file mode 100644
--- /dev/null	(date 1714032042297)
+++ b/order-service/src/main/java/com/orderservice/web/util/AES256.java	(date 1714032042297)
@@ -0,0 +1,37 @@
+package com.orderservice.web.util;
+
+import org.springframework.stereotype.Component;
+
+import javax.crypto.Cipher;
+import javax.crypto.spec.IvParameterSpec;
+import javax.crypto.spec.SecretKeySpec;
+import java.util.Base64;
+
+@Component
+public class AES256 {
+
+    public static String alg = "AES/CBC/PKCS5Padding";
+    private final String key = "01234567890123456789012345678901";
+    private final String iv = key.substring(0, 16); // 16byte
+
+    public String encode(String text) throws Exception {
+        Cipher cipher = Cipher.getInstance(alg);
+        SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(), "AES");
+        IvParameterSpec ivParamSpec = new IvParameterSpec(iv.getBytes());
+        cipher.init(Cipher.ENCRYPT_MODE, keySpec, ivParamSpec);
+
+        byte[] encrypted = cipher.doFinal(text.getBytes("UTF-8"));
+        return Base64.getEncoder().encodeToString(encrypted);
+    }
+
+    public String decode(String cipherText) throws Exception {
+        Cipher cipher = Cipher.getInstance(alg);
+        SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(), "AES");
+        IvParameterSpec ivParamSpec = new IvParameterSpec(iv.getBytes());
+        cipher.init(Cipher.DECRYPT_MODE, keySpec, ivParamSpec);
+
+        byte[] decodedBytes = Base64.getDecoder().decode(cipherText);
+        byte[] decrypted = cipher.doFinal(decodedBytes);
+        return new String(decrypted, "UTF-8");
+    }
+}
Index: order-service/src/main/java/com/orderservice/web/util/Scheduler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/util/Scheduler.java b/order-service/src/main/java/com/orderservice/web/util/Scheduler.java
new file mode 100644
--- /dev/null	(date 1714032042301)
+++ b/order-service/src/main/java/com/orderservice/web/util/Scheduler.java	(date 1714032042301)
@@ -0,0 +1,44 @@
+package com.orderservice.web.util;
+
+import com.layby.web.service.OrderService;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.stereotype.Component;
+
+@Slf4j
+@Component
+@RequiredArgsConstructor
+public class Scheduler {
+
+    private final OrderService orderService;
+
+    // 반품 후 재고 처리를 하는 로직
+//    @Scheduled(fixedRate = 10000)
+//    @Transactional
+//    public void inventoryProcessAfterRefund() throws InterruptedException {
+//
+//        // 반품 신청 상태인 오더들을 조회해온 후
+//        List<Order> orders = orderService.findAtferRefund();
+//
+//        // 만약 없으면 여기서 로직 종료
+//        if (orders.isEmpty()) return;
+//
+//        // 현재 시간으로 부터
+//        LocalDate now = LocalDate.now();
+//
+//        for (Order order : orders) {
+//            // 반품 신청한 날짜의 간격이 1일 이상이면
+//            LocalDate refundRequestDate = order.getRefundRequestDate();
+//            Period period = Period.between(refundRequestDate, now);
+//
+//            if (period.getDays() >= 1) {
+//                // 반품 완료로 상태를 바꾸고 재고를 채운다.
+//                order.updateStatus(OrderStatus.REFUND_COMPLETE);
+//                List<OrderItem> orderItems = order.getOrderItems();
+//                for (OrderItem orderItem : orderItems) {
+//                    orderItem.cancel();
+//                }
+//            }
+//        }
+//    }
+}
Index: order-service/src/main/java/com/orderservice/web/util/SecurityUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/web/util/SecurityUtil.java b/order-service/src/main/java/com/orderservice/web/util/SecurityUtil.java
new file mode 100644
--- /dev/null	(date 1714032042304)
+++ b/order-service/src/main/java/com/orderservice/web/util/SecurityUtil.java	(date 1714032042304)
@@ -0,0 +1,35 @@
+package com.orderservice.web.util;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.security.core.userdetails.UserDetails;
+
+import java.util.Optional;
+
+public class SecurityUtil {
+
+    private static final Logger logger = LoggerFactory.getLogger(SecurityUtil.class);
+
+    private SecurityUtil() {}
+
+    public static Optional<String> getCurrentUsername() {
+        final Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
+
+        if (authentication == null) {
+            logger.debug("Security Context에 인증 정보가 없습니다.");
+            return Optional.empty();
+        }
+
+        String username = null;
+        if (authentication.getPrincipal() instanceof UserDetails) {
+            UserDetails springSecurityUser = (UserDetails) authentication.getPrincipal();
+            username = springSecurityUser.getUsername();
+        } else if (authentication.getPrincipal() instanceof String) {
+            username = (String) authentication.getPrincipal();
+        }
+
+        return Optional.ofNullable(username);
+    }
+}
Index: order-service/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/order-service/src/main/resources/application.properties b/order-service/src/main/resources/application.properties
new file mode 100644
--- /dev/null	(date 1714032042307)
+++ b/order-service/src/main/resources/application.properties	(date 1714032042307)
@@ -0,0 +1,1 @@
+spring.application.name=order-service
Index: order-service/src/test/java/com/orderservice/OrderServiceApplicationTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/test/java/com/orderservice/OrderServiceApplicationTests.java b/order-service/src/test/java/com/orderservice/OrderServiceApplicationTests.java
new file mode 100644
--- /dev/null	(date 1714032042309)
+++ b/order-service/src/test/java/com/orderservice/OrderServiceApplicationTests.java	(date 1714032042309)
@@ -0,0 +1,13 @@
+package com.orderservice;
+
+import org.junit.jupiter.api.Test;
+import org.springframework.boot.test.context.SpringBootTest;
+
+@SpringBootTest
+class OrderServiceApplicationTests {
+
+	@Test
+	void contextLoads() {
+	}
+
+}
Index: item-service/src/main/java/com/itemservice/domain/dto/request/AddressRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/dto/request/AddressRequestDto.java b/item-service/src/main/java/com/itemservice/domain/dto/request/AddressRequestDto.java
new file mode 100644
--- /dev/null	(date 1714032041731)
+++ b/item-service/src/main/java/com/itemservice/domain/dto/request/AddressRequestDto.java	(date 1714032041731)
@@ -0,0 +1,18 @@
+package com.itemservice.domain.dto.request;
+
+import jakarta.validation.constraints.NotBlank;
+import lombok.Getter;
+import lombok.Setter;
+
+@Getter @Setter
+public class AddressRequestDto {
+
+    @NotBlank
+    private String city;
+
+    @NotBlank
+    private String street;
+
+    @NotBlank
+    private String zipCode;
+}
Index: item-service/src/main/java/com/itemservice/domain/dto/request/ItemSaveRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/dto/request/ItemSaveRequestDto.java b/item-service/src/main/java/com/itemservice/domain/dto/request/ItemSaveRequestDto.java
new file mode 100644
--- /dev/null	(date 1714032041734)
+++ b/item-service/src/main/java/com/itemservice/domain/dto/request/ItemSaveRequestDto.java	(date 1714032041734)
@@ -0,0 +1,21 @@
+package com.itemservice.domain.dto.request;
+
+import jakarta.validation.constraints.NotBlank;
+import lombok.Getter;
+import lombok.Setter;
+
+@Getter @Setter
+public class ItemSaveRequestDto {
+
+    @NotBlank
+    private String itemName;
+
+    @NotBlank
+    private String price;
+
+    @NotBlank
+    private String details;
+
+    @NotBlank
+    private String stockQuantity;
+}
Index: item-service/src/main/java/com/itemservice/domain/dto/request/PhoneNumberUpdateRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/dto/request/PhoneNumberUpdateRequestDto.java b/item-service/src/main/java/com/itemservice/domain/dto/request/PhoneNumberUpdateRequestDto.java
new file mode 100644
--- /dev/null	(date 1714032041736)
+++ b/item-service/src/main/java/com/itemservice/domain/dto/request/PhoneNumberUpdateRequestDto.java	(date 1714032041736)
@@ -0,0 +1,10 @@
+package com.itemservice.domain.dto.request;
+
+import lombok.Getter;
+import lombok.Setter;
+
+@Getter @Setter
+public class PhoneNumberUpdateRequestDto {
+
+    private String phoneNumber;
+}
Index: item-service/src/main/java/com/itemservice/domain/dto/request/UserPasswordUpdateRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/dto/request/UserPasswordUpdateRequestDto.java b/item-service/src/main/java/com/itemservice/domain/dto/request/UserPasswordUpdateRequestDto.java
new file mode 100644
--- /dev/null	(date 1714032041738)
+++ b/item-service/src/main/java/com/itemservice/domain/dto/request/UserPasswordUpdateRequestDto.java	(date 1714032041738)
@@ -0,0 +1,12 @@
+package com.itemservice.domain.dto.request;
+
+import jakarta.validation.constraints.NotBlank;
+import lombok.Getter;
+import lombok.Setter;
+
+@Getter @Setter
+public class UserPasswordUpdateRequestDto {
+
+    @NotBlank
+    private String password;
+}
Index: item-service/src/main/java/com/itemservice/domain/dto/request/WishItemSaveRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/dto/request/WishItemSaveRequestDto.java b/item-service/src/main/java/com/itemservice/domain/dto/request/WishItemSaveRequestDto.java
new file mode 100644
--- /dev/null	(date 1714032041741)
+++ b/item-service/src/main/java/com/itemservice/domain/dto/request/WishItemSaveRequestDto.java	(date 1714032041741)
@@ -0,0 +1,10 @@
+package com.itemservice.domain.dto.request;
+
+import lombok.Getter;
+import lombok.Setter;
+
+@Getter @Setter
+public class WishItemSaveRequestDto {
+
+    private int count;
+}
Index: item-service/src/main/java/com/itemservice/domain/dto/request/auth/CheckCertificationRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/dto/request/auth/CheckCertificationRequestDto.java b/item-service/src/main/java/com/itemservice/domain/dto/request/auth/CheckCertificationRequestDto.java
new file mode 100644
--- /dev/null	(date 1714032041744)
+++ b/item-service/src/main/java/com/itemservice/domain/dto/request/auth/CheckCertificationRequestDto.java	(date 1714032041744)
@@ -0,0 +1,22 @@
+package com.itemservice.domain.dto.request.auth;
+
+import jakarta.validation.constraints.Email;
+import jakarta.validation.constraints.NotBlank;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+@Getter @Setter
+@NoArgsConstructor
+public class CheckCertificationRequestDto {
+
+    @NotBlank
+    private String username;
+
+    @NotBlank
+    @Email
+    private String email;
+
+    @NotBlank
+    private String certificationNumber;
+}
Index: item-service/src/main/java/com/itemservice/domain/dto/request/auth/EmailCertificationRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/dto/request/auth/EmailCertificationRequestDto.java b/item-service/src/main/java/com/itemservice/domain/dto/request/auth/EmailCertificationRequestDto.java
new file mode 100644
--- /dev/null	(date 1714032041747)
+++ b/item-service/src/main/java/com/itemservice/domain/dto/request/auth/EmailCertificationRequestDto.java	(date 1714032041747)
@@ -0,0 +1,20 @@
+package com.itemservice.domain.dto.request.auth;
+
+import jakarta.validation.constraints.Email;
+import jakarta.validation.constraints.NotBlank;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+@Getter @Setter
+@NoArgsConstructor
+public class EmailCertificationRequestDto {
+
+    @NotBlank
+    String username;
+
+    @NotBlank
+    @Email
+    private String email;
+
+}
Index: item-service/src/main/java/com/itemservice/domain/dto/request/auth/SignInRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/dto/request/auth/SignInRequestDto.java b/item-service/src/main/java/com/itemservice/domain/dto/request/auth/SignInRequestDto.java
new file mode 100644
--- /dev/null	(date 1714032041750)
+++ b/item-service/src/main/java/com/itemservice/domain/dto/request/auth/SignInRequestDto.java	(date 1714032041750)
@@ -0,0 +1,19 @@
+package com.itemservice.domain.dto.request.auth;
+
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.Size;
+import lombok.*;
+
+@Getter @Setter @Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class SignInRequestDto {
+
+    @NotBlank
+    @Size(min = 3, max = 50)
+    private String username;
+
+    @NotBlank
+    @Size(min = 3, max = 100)
+    private String password;
+}
Index: item-service/src/main/java/com/itemservice/domain/dto/request/auth/SignUpRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/dto/request/auth/SignUpRequestDto.java b/item-service/src/main/java/com/itemservice/domain/dto/request/auth/SignUpRequestDto.java
new file mode 100644
--- /dev/null	(date 1714032041753)
+++ b/item-service/src/main/java/com/itemservice/domain/dto/request/auth/SignUpRequestDto.java	(date 1714032041753)
@@ -0,0 +1,27 @@
+package com.itemservice.domain.dto.request.auth;
+
+import jakarta.validation.constraints.Email;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.Size;
+import lombok.*;
+
+@Getter @Setter @Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class SignUpRequestDto {
+
+    @NotBlank
+    @Size(min = 3, max = 50)
+    private String username;
+
+    @NotBlank
+    @Size(min = 3, max = 100)
+    private String password;
+
+    @NotBlank
+    @Email
+    private String email;
+
+    @NotBlank
+    private String phoneNumber;
+}
Index: item-service/src/main/java/com/itemservice/domain/dto/request/auth/UsernameCheckRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/dto/request/auth/UsernameCheckRequestDto.java b/item-service/src/main/java/com/itemservice/domain/dto/request/auth/UsernameCheckRequestDto.java
new file mode 100644
--- /dev/null	(date 1714032041756)
+++ b/item-service/src/main/java/com/itemservice/domain/dto/request/auth/UsernameCheckRequestDto.java	(date 1714032041756)
@@ -0,0 +1,13 @@
+package com.itemservice.domain.dto.request.auth;
+
+import jakarta.validation.constraints.NotBlank;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+
+@Getter
+@NoArgsConstructor
+public class UsernameCheckRequestDto {
+
+    @NotBlank
+    private String username;
+}
Index: item-service/src/main/java/com/itemservice/domain/dto/response/AddressListReferResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/dto/response/AddressListReferResponseDto.java b/item-service/src/main/java/com/itemservice/domain/dto/response/AddressListReferResponseDto.java
new file mode 100644
--- /dev/null	(date 1714032041760)
+++ b/item-service/src/main/java/com/itemservice/domain/dto/response/AddressListReferResponseDto.java	(date 1714032041760)
@@ -0,0 +1,24 @@
+package com.itemservice.domain.dto.response;
+
+import com.layby.domain.entity.Address;
+import lombok.Getter;
+import lombok.Setter;
+
+import java.util.ArrayList;
+import java.util.List;
+
+@Getter @Setter
+public class AddressListReferResponseDto {
+
+    private List<AddressReferResponseDto> addressReferResponseDtos = new ArrayList<>();
+
+    //== 생성자 ==//
+    /** Address 엔티티 리스트로 AddressListReferResponseDto를 생성하는 생성자 **/
+    public AddressListReferResponseDto(List<Address> addressList) {
+
+        for (Address address : addressList) {
+            AddressReferResponseDto addressReferResponseDto = new AddressReferResponseDto(address);
+            this.addressReferResponseDtos.add(addressReferResponseDto);
+        }
+    }
+}
Index: item-service/src/main/java/com/itemservice/domain/dto/response/AddressReferResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/dto/response/AddressReferResponseDto.java b/item-service/src/main/java/com/itemservice/domain/dto/response/AddressReferResponseDto.java
new file mode 100644
--- /dev/null	(date 1714032041765)
+++ b/item-service/src/main/java/com/itemservice/domain/dto/response/AddressReferResponseDto.java	(date 1714032041765)
@@ -0,0 +1,29 @@
+package com.itemservice.domain.dto.response;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.layby.domain.entity.Address;
+import lombok.Getter;
+import lombok.Setter;
+
+@Getter @Setter
+public class AddressReferResponseDto {
+
+    @JsonIgnore
+    private Long addressId;
+
+    private String city;
+
+    private String street;
+
+    private String zipCode;
+
+
+    //== 생성자 ==//
+    // Address -> AddressReferResponseDto로 변환하는 생성자
+    public AddressReferResponseDto(Address address) {
+        this.addressId = address.getAddressId();
+        this.city = address.getCity();
+        this.street = address.getStreet();
+        this.zipCode = address.getZipCode();
+    }
+}
Index: item-service/src/main/java/com/itemservice/domain/dto/response/ItemListResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/dto/response/ItemListResponseDto.java b/item-service/src/main/java/com/itemservice/domain/dto/response/ItemListResponseDto.java
new file mode 100644
--- /dev/null	(date 1714032041768)
+++ b/item-service/src/main/java/com/itemservice/domain/dto/response/ItemListResponseDto.java	(date 1714032041768)
@@ -0,0 +1,14 @@
+package com.itemservice.domain.dto.response;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Getter;
+
+@Builder @Getter
+@AllArgsConstructor
+public class ItemListResponseDto {
+
+    private String itemName;
+
+    private int price;
+}
Index: item-service/src/main/java/com/itemservice/domain/dto/response/ItemResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/dto/response/ItemResponseDto.java b/item-service/src/main/java/com/itemservice/domain/dto/response/ItemResponseDto.java
new file mode 100644
--- /dev/null	(date 1714032041770)
+++ b/item-service/src/main/java/com/itemservice/domain/dto/response/ItemResponseDto.java	(date 1714032041770)
@@ -0,0 +1,25 @@
+package com.itemservice.domain.dto.response;
+
+import com.layby.domain.entity.Item;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Getter;
+
+@Builder @Getter
+@AllArgsConstructor
+public class ItemResponseDto {
+
+    private String itemName;
+
+    private int price;
+
+    private String details;
+
+    //== 생성자 ==//
+    /** Item 엔티티로 ItemResponseDto를 만드는 생성자 **/
+    public ItemResponseDto(Item item) {
+        this.itemName = item.getItemName();
+        this.price = item.getPrice();
+        this.details = item.getDetails();
+    }
+}
Index: item-service/src/main/java/com/itemservice/domain/dto/response/OrderItemResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/dto/response/OrderItemResponseDto.java b/item-service/src/main/java/com/itemservice/domain/dto/response/OrderItemResponseDto.java
new file mode 100644
--- /dev/null	(date 1714032041774)
+++ b/item-service/src/main/java/com/itemservice/domain/dto/response/OrderItemResponseDto.java	(date 1714032041774)
@@ -0,0 +1,7 @@
+package com.itemservice.domain.dto.response;
+
+public class OrderItemResponseDto {
+
+    private ItemResponseDto itemResponseDto;
+
+}
Index: item-service/src/main/java/com/itemservice/domain/dto/response/OrderStatusResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/dto/response/OrderStatusResponseDto.java b/item-service/src/main/java/com/itemservice/domain/dto/response/OrderStatusResponseDto.java
new file mode 100644
--- /dev/null	(date 1714032041778)
+++ b/item-service/src/main/java/com/itemservice/domain/dto/response/OrderStatusResponseDto.java	(date 1714032041778)
@@ -0,0 +1,21 @@
+package com.itemservice.domain.dto.response;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Getter;
+import lombok.Setter;
+
+import java.util.List;
+
+@Getter @Setter @Builder
+@AllArgsConstructor
+public class OrderStatusResponseDto {
+
+    private String orderStatus;
+
+    private String deliveryStatus;
+
+    private List<String> itemNames;
+
+    private int totalPrice;
+}
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1714032041688)
+++ b/.gitignore	(date 1714032041688)
@@ -0,0 +1,5 @@
+### IntelliJ IDEA ###
+.idea
+*.iws
+*.iml
+*.ipr
\ No newline at end of file
Index: item-service/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/.gitignore b/item-service/.gitignore
new file mode 100644
--- /dev/null	(date 1714032041691)
+++ b/item-service/.gitignore	(date 1714032041691)
@@ -0,0 +1,37 @@
+HELP.md
+.gradle
+build/
+!gradle/wrapper/gradle-wrapper.jar
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### STS ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+bin/
+!**/src/main/**/bin/
+!**/src/test/**/bin/
+
+### IntelliJ IDEA ###
+.idea
+*.iws
+*.iml
+*.ipr
+out/
+!**/src/main/**/out/
+!**/src/test/**/out/
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+
+### VS Code ###
+.vscode/
Index: item-service/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/build.gradle b/item-service/build.gradle
new file mode 100644
--- /dev/null	(date 1714032041694)
+++ b/item-service/build.gradle	(date 1714032041694)
@@ -0,0 +1,42 @@
+plugins {
+    id 'java'
+    id 'org.springframework.boot' version '3.2.5'
+    id 'io.spring.dependency-management' version '1.1.4'
+}
+
+group = 'com'
+version = '0.0.1-SNAPSHOT'
+
+java {
+    sourceCompatibility = '21'
+}
+
+repositories {
+    mavenCentral()
+}
+
+ext {
+    set('springCloudVersion', "2023.0.1")
+}
+
+dependencies {
+    implementation 'org.springframework.boot:spring-boot-starter-web'
+    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
+    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
+    implementation 'org.projectlombok:lombok'
+    implementation 'org.springframework.boot:spring-boot-starter-validation'
+    implementation 'org.springframework.boot:spring-boot-starter-security'
+    testImplementation 'org.springframework.boot:spring-boot-starter-test'
+    testImplementation 'org.springframework.security:spring-security-test'
+    runtimeOnly 'com.mysql:mysql-connector-j'
+}
+
+dependencyManagement {
+    imports {
+        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
+    }
+}
+
+tasks.named('test') {
+    useJUnitPlatform()
+}
Index: item-service/gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/item-service/gradle/wrapper/gradle-wrapper.properties b/item-service/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
--- /dev/null	(date 1714032041700)
+++ b/item-service/gradle/wrapper/gradle-wrapper.properties	(date 1714032041700)
@@ -0,0 +1,7 @@
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.7-bin.zip
+networkTimeout=10000
+validateDistributionUrl=true
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
Index: item-service/gradlew
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/gradlew b/item-service/gradlew
new file mode 100644
--- /dev/null	(date 1714032041703)
+++ b/item-service/gradlew	(date 1714032041703)
@@ -0,0 +1,249 @@
+#!/bin/sh
+
+#
+# Copyright © 2015-2021 the original authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+##############################################################################
+#
+#   Gradle start up script for POSIX generated by Gradle.
+#
+#   Important for running:
+#
+#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
+#       noncompliant, but you have some other compliant shell such as ksh or
+#       bash, then to run this script, type that shell name before the whole
+#       command line, like:
+#
+#           ksh Gradle
+#
+#       Busybox and similar reduced shells will NOT work, because this script
+#       requires all of these POSIX shell features:
+#         * functions;
+#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
+#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
+#         * compound commands having a testable exit status, especially «case»;
+#         * various built-in commands including «command», «set», and «ulimit».
+#
+#   Important for patching:
+#
+#   (2) This script targets any POSIX shell, so it avoids extensions provided
+#       by Bash, Ksh, etc; in particular arrays are avoided.
+#
+#       The "traditional" practice of packing multiple parameters into a
+#       space-separated string is a well documented source of bugs and security
+#       problems, so this is (mostly) avoided, by progressively accumulating
+#       options in "$@", and eventually passing that to Java.
+#
+#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
+#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
+#       see the in-line comments for details.
+#
+#       There are tweaks for specific operating systems such as AIX, CygWin,
+#       Darwin, MinGW, and NonStop.
+#
+#   (3) This script is generated from the Groovy template
+#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
+#       within the Gradle project.
+#
+#       You can find Gradle at https://github.com/gradle/gradle/.
+#
+##############################################################################
+
+# Attempt to set APP_HOME
+
+# Resolve links: $0 may be a link
+app_path=$0
+
+# Need this for daisy-chained symlinks.
+while
+    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
+    [ -h "$app_path" ]
+do
+    ls=$( ls -ld "$app_path" )
+    link=${ls#*' -> '}
+    case $link in             #(
+      /*)   app_path=$link ;; #(
+      *)    app_path=$APP_HOME$link ;;
+    esac
+done
+
+# This is normally unused
+# shellcheck disable=SC2034
+APP_BASE_NAME=${0##*/}
+# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
+APP_HOME=$( cd "${APP_HOME:-./}" > /dev/null && pwd -P ) || exit
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD=maximum
+
+warn () {
+    echo "$*"
+} >&2
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+} >&2
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "$( uname )" in                #(
+  CYGWIN* )         cygwin=true  ;; #(
+  Darwin* )         darwin=true  ;; #(
+  MSYS* | MINGW* )  msys=true    ;; #(
+  NONSTOP* )        nonstop=true ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD=$JAVA_HOME/jre/sh/java
+    else
+        JAVACMD=$JAVA_HOME/bin/java
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD=java
+    if ! command -v java >/dev/null 2>&1
+    then
+        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+fi
+
+# Increase the maximum file descriptors if we can.
+if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
+    case $MAX_FD in #(
+      max*)
+        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
+        # shellcheck disable=SC2039,SC3045
+        MAX_FD=$( ulimit -H -n ) ||
+            warn "Could not query maximum file descriptor limit"
+    esac
+    case $MAX_FD in  #(
+      '' | soft) :;; #(
+      *)
+        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
+        # shellcheck disable=SC2039,SC3045
+        ulimit -n "$MAX_FD" ||
+            warn "Could not set maximum file descriptor limit to $MAX_FD"
+    esac
+fi
+
+# Collect all arguments for the java command, stacking in reverse order:
+#   * args from the command line
+#   * the main class name
+#   * -classpath
+#   * -D...appname settings
+#   * --module-path (only if needed)
+#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.
+
+# For Cygwin or MSYS, switch paths to Windows format before running java
+if "$cygwin" || "$msys" ; then
+    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
+    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )
+
+    JAVACMD=$( cygpath --unix "$JAVACMD" )
+
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    for arg do
+        if
+            case $arg in                                #(
+              -*)   false ;;                            # don't mess with options #(
+              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
+                    [ -e "$t" ] ;;                      #(
+              *)    false ;;
+            esac
+        then
+            arg=$( cygpath --path --ignore --mixed "$arg" )
+        fi
+        # Roll the args list around exactly as many times as the number of
+        # args, so each arg winds up back in the position where it started, but
+        # possibly modified.
+        #
+        # NB: a `for` loop captures its iteration list before it begins, so
+        # changing the positional parameters here affects neither the number of
+        # iterations, nor the values presented in `arg`.
+        shift                   # remove old arg
+        set -- "$@" "$arg"      # push replacement arg
+    done
+fi
+
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
+
+# Collect all arguments for the java command:
+#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
+#     and any embedded shellness will be escaped.
+#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
+#     treated as '${Hostname}' itself on the command line.
+
+set -- \
+        "-Dorg.gradle.appname=$APP_BASE_NAME" \
+        -classpath "$CLASSPATH" \
+        org.gradle.wrapper.GradleWrapperMain \
+        "$@"
+
+# Stop when "xargs" is not available.
+if ! command -v xargs >/dev/null 2>&1
+then
+    die "xargs is not available"
+fi
+
+# Use "xargs" to parse quoted args.
+#
+# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
+#
+# In Bash we could simply go:
+#
+#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
+#   set -- "${ARGS[@]}" "$@"
+#
+# but POSIX shell has neither arrays nor command substitution, so instead we
+# post-process each arg (as a line of input to sed) to backslash-escape any
+# character that might be a shell metacharacter, then use eval to reverse
+# that process (while maintaining the separation between arguments), and wrap
+# the whole thing up as a single "set" statement.
+#
+# This will of course break if any of these variables contains a newline or
+# an unmatched quote.
+#
+
+eval "set -- $(
+        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
+        xargs -n1 |
+        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
+        tr '\n' ' '
+    )" '"$@"'
+
+exec "$JAVACMD" "$@"
Index: item-service/gradlew.bat
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/gradlew.bat b/item-service/gradlew.bat
new file mode 100644
--- /dev/null	(date 1714032041707)
+++ b/item-service/gradlew.bat	(date 1714032041707)
@@ -0,0 +1,92 @@
+@rem
+@rem Copyright 2015 the original author or authors.
+@rem
+@rem Licensed under the Apache License, Version 2.0 (the "License");
+@rem you may not use this file except in compliance with the License.
+@rem You may obtain a copy of the License at
+@rem
+@rem      https://www.apache.org/licenses/LICENSE-2.0
+@rem
+@rem Unless required by applicable law or agreed to in writing, software
+@rem distributed under the License is distributed on an "AS IS" BASIS,
+@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+@rem See the License for the specific language governing permissions and
+@rem limitations under the License.
+@rem
+
+@if "%DEBUG%"=="" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%"=="" set DIRNAME=.
+@rem This is normally unused
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Resolve any "." and ".." in APP_HOME to make it shorter.
+for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if %ERRORLEVEL% equ 0 goto execute
+
+echo. 1>&2
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
+echo. 1>&2
+echo Please set the JAVA_HOME variable in your environment to match the 1>&2
+echo location of your Java installation. 1>&2
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto execute
+
+echo. 1>&2
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
+echo. 1>&2
+echo Please set the JAVA_HOME variable in your environment to match the 1>&2
+echo location of your Java installation. 1>&2
+
+goto fail
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
+
+:end
+@rem End local scope for the variables with windows NT shell
+if %ERRORLEVEL% equ 0 goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+set EXIT_CODE=%ERRORLEVEL%
+if %EXIT_CODE% equ 0 set EXIT_CODE=1
+if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
+exit /b %EXIT_CODE%
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
Index: item-service/settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/settings.gradle b/item-service/settings.gradle
new file mode 100644
--- /dev/null	(date 1714032041710)
+++ b/item-service/settings.gradle	(date 1714032041710)
@@ -0,0 +1,1 @@
+rootProject.name = 'item-service'
Index: item-service/src/main/java/com/itemservice/ItemServiceApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/ItemServiceApplication.java b/item-service/src/main/java/com/itemservice/ItemServiceApplication.java
new file mode 100644
--- /dev/null	(date 1714032041712)
+++ b/item-service/src/main/java/com/itemservice/ItemServiceApplication.java	(date 1714032041712)
@@ -0,0 +1,13 @@
+package com.itemservice;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+
+@SpringBootApplication
+public class ItemServiceApplication {
+
+    public static void main(String[] args) {
+        SpringApplication.run(ItemServiceApplication.class, args);
+    }
+
+}
Index: item-service/src/main/java/com/itemservice/domain/common/DeliveryStatus.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/common/DeliveryStatus.java b/item-service/src/main/java/com/itemservice/domain/common/DeliveryStatus.java
new file mode 100644
--- /dev/null	(date 1714032041715)
+++ b/item-service/src/main/java/com/itemservice/domain/common/DeliveryStatus.java	(date 1714032041715)
@@ -0,0 +1,14 @@
+package com.itemservice.domain.common;
+
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+
+@Getter
+@RequiredArgsConstructor
+public enum DeliveryStatus {
+    PREPARE("상품 준비중"),
+    PROCESS("배송 중"),
+    COMPLETE("배송 완료");
+
+    private final String description;
+}
Index: item-service/src/main/java/com/itemservice/domain/common/ErrorCode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/common/ErrorCode.java b/item-service/src/main/java/com/itemservice/domain/common/ErrorCode.java
new file mode 100644
--- /dev/null	(date 1714032041717)
+++ b/item-service/src/main/java/com/itemservice/domain/common/ErrorCode.java	(date 1714032041717)
@@ -0,0 +1,33 @@
+package com.itemservice.domain.common;
+
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+
+@Getter
+@RequiredArgsConstructor
+public enum ErrorCode {
+    VALIDATION_FAIL("401", "Validation failed."),
+
+    DUPLICATED_USERNAME("409", "Duplicate Id."),
+
+    SIGN_IN_FAIL("400", "Login information mismatch."),
+
+    CERTIFICATION_FAIL("400", "Certification failed"),
+
+    MAIL_FAIL("400", "Mail send failed."),
+
+    DATABASE_ERROR("500", "Database error."),
+
+    INTERNAL_SERVER_ERROR("500", "Server Error aroused. Please contact the server administrator"),
+
+    NOT_ENOUGH_STOCK("409", "All stock has been sold out."),
+
+    DELIVERY_ALEADY_START("409", "Cancellation is only possible before delivery begins."),
+
+    REFUND_IS_NOT_POSSIBLE("409", "Refunds are not possible after 2 days after delivery.");
+
+
+    private final String code;
+
+    private final String message;
+}
Index: item-service/src/main/java/com/itemservice/domain/common/OrderStatus.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/common/OrderStatus.java b/item-service/src/main/java/com/itemservice/domain/common/OrderStatus.java
new file mode 100644
--- /dev/null	(date 1714032041720)
+++ b/item-service/src/main/java/com/itemservice/domain/common/OrderStatus.java	(date 1714032041720)
@@ -0,0 +1,15 @@
+package com.itemservice.domain.common;
+
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+
+@Getter
+@RequiredArgsConstructor
+public enum OrderStatus {
+    ORDER("주문 완료"),
+    CANCEL("주문 취소"),
+    REFUND_PROCESS("반품 처리중"),
+    REFUND_COMPLETE("반품 완료");
+
+    private final String description;
+}
Index: item-service/src/main/java/com/itemservice/domain/common/RedisDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/common/RedisDao.java b/item-service/src/main/java/com/itemservice/domain/common/RedisDao.java
new file mode 100644
--- /dev/null	(date 1714032041723)
+++ b/item-service/src/main/java/com/itemservice/domain/common/RedisDao.java	(date 1714032041723)
@@ -0,0 +1,40 @@
+package com.itemservice.domain.common;
+
+import org.springframework.data.redis.core.RedisTemplate;
+import org.springframework.data.redis.core.ValueOperations;
+import org.springframework.stereotype.Component;
+
+import java.time.Duration;
+
+@Component
+public class RedisDao {
+
+    private final RedisTemplate<String, String> redisTemplate;
+
+    public RedisDao(RedisTemplate<String, String> redisTemplate) {
+        this.redisTemplate = redisTemplate;
+    }
+
+    public void setValue(String key, String data) {
+        ValueOperations<String, String> values = redisTemplate.opsForValue();
+        values.set(key, data);
+    }
+
+    public void setValue(String key, String data, Duration duration) {
+        ValueOperations<String, String> values = redisTemplate.opsForValue();
+        values.set(key, data, duration);
+    }
+
+    public String getValue(String key) {
+        ValueOperations<String, String> values = redisTemplate.opsForValue();
+        return values.get(key);
+    }
+
+    public void deleteValue(String key) {
+        redisTemplate.delete(key);
+    }
+
+    public boolean hasKey(String key) {
+        return redisTemplate.hasKey(key);
+    }
+}
Index: item-service/src/main/java/com/itemservice/domain/common/Role.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/common/Role.java b/item-service/src/main/java/com/itemservice/domain/common/Role.java
new file mode 100644
--- /dev/null	(date 1714032041726)
+++ b/item-service/src/main/java/com/itemservice/domain/common/Role.java	(date 1714032041726)
@@ -0,0 +1,14 @@
+package com.itemservice.domain.common;
+
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+
+@Getter
+@RequiredArgsConstructor
+public enum Role {
+    USER("ROLE_USER", "서비스 사용자"),
+    ADMIN("ROLE_ADMIN", "관리자");
+
+    private final String key;
+    private final String description;
+}
Index: item-service/src/main/java/com/itemservice/domain/dto/ErrorDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/dto/ErrorDto.java b/item-service/src/main/java/com/itemservice/domain/dto/ErrorDto.java
new file mode 100644
--- /dev/null	(date 1714032041728)
+++ b/item-service/src/main/java/com/itemservice/domain/dto/ErrorDto.java	(date 1714032041728)
@@ -0,0 +1,22 @@
+package com.itemservice.domain.dto;
+
+import lombok.Getter;
+
+@Getter
+public class ErrorDto {
+    private final int status;
+    private final String message;
+
+    public ErrorDto(int status, String message) {
+        this.status = status;
+        this.message = message;
+    }
+
+    public int getStatus() {
+        return status;
+    }
+
+    public String getMessage() {
+        return message;
+    }
+}
Index: item-service/src/main/java/com/itemservice/domain/repository/DeliveryRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/repository/DeliveryRepository.java b/item-service/src/main/java/com/itemservice/domain/repository/DeliveryRepository.java
new file mode 100644
--- /dev/null	(date 1714032041833)
+++ b/item-service/src/main/java/com/itemservice/domain/repository/DeliveryRepository.java	(date 1714032041833)
@@ -0,0 +1,9 @@
+package com.itemservice.domain.repository;
+
+import com.layby.domain.entity.Delivery;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface DeliveryRepository extends JpaRepository<Delivery, Long> {
+
+    Delivery findByDeliveryId(Long deliveryId);
+}
Index: item-service/src/main/java/com/itemservice/domain/repository/ItemRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/repository/ItemRepository.java b/item-service/src/main/java/com/itemservice/domain/repository/ItemRepository.java
new file mode 100644
--- /dev/null	(date 1714032041835)
+++ b/item-service/src/main/java/com/itemservice/domain/repository/ItemRepository.java	(date 1714032041835)
@@ -0,0 +1,11 @@
+package com.itemservice.domain.repository;
+
+import com.layby.domain.entity.Item;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface ItemRepository extends JpaRepository<Item, Long> {
+
+    Item findByItemId(Long itemId);
+
+    Item findByItemName(String itemName);
+}
Index: item-service/src/main/java/com/itemservice/domain/repository/OrderItemRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/repository/OrderItemRepository.java b/item-service/src/main/java/com/itemservice/domain/repository/OrderItemRepository.java
new file mode 100644
--- /dev/null	(date 1714032041838)
+++ b/item-service/src/main/java/com/itemservice/domain/repository/OrderItemRepository.java	(date 1714032041838)
@@ -0,0 +1,9 @@
+package com.itemservice.domain.repository;
+
+import com.layby.domain.entity.OrderItem;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface OrderItemRepository extends JpaRepository<OrderItem, Long> {
+
+    OrderItem findByOrderItemId(Long orderItemId);
+}
Index: item-service/src/main/java/com/itemservice/domain/repository/OrderRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/repository/OrderRepository.java b/item-service/src/main/java/com/itemservice/domain/repository/OrderRepository.java
new file mode 100644
--- /dev/null	(date 1714032041841)
+++ b/item-service/src/main/java/com/itemservice/domain/repository/OrderRepository.java	(date 1714032041841)
@@ -0,0 +1,14 @@
+package com.itemservice.domain.repository;
+
+import com.layby.domain.entity.Order;
+import com.layby.domain.entity.User;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import java.util.List;
+
+public interface OrderRepository extends JpaRepository<Order, Long>, OrderRepositoryCustom {
+
+    Order findByOrderId(Long orderId);
+
+    List<Order> findAllByUser(User user);
+}
Index: item-service/src/main/java/com/itemservice/domain/repository/OrderRepositoryCustom.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/repository/OrderRepositoryCustom.java b/item-service/src/main/java/com/itemservice/domain/repository/OrderRepositoryCustom.java
new file mode 100644
--- /dev/null	(date 1714032041844)
+++ b/item-service/src/main/java/com/itemservice/domain/repository/OrderRepositoryCustom.java	(date 1714032041844)
@@ -0,0 +1,14 @@
+package com.itemservice.domain.repository;
+
+import com.layby.domain.entity.Order;
+
+import java.util.List;
+
+public interface OrderRepositoryCustom {
+
+    List<Order> findAllByUserIdWithOrderItemAndItem(Long userId);
+
+    List<Order> findAfterRefund();
+
+    Order findByOrderIdWithDelivery(Long orderId);
+}
Index: item-service/src/main/java/com/itemservice/domain/repository/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/repository/UserRepository.java b/item-service/src/main/java/com/itemservice/domain/repository/UserRepository.java
new file mode 100644
--- /dev/null	(date 1714032041846)
+++ b/item-service/src/main/java/com/itemservice/domain/repository/UserRepository.java	(date 1714032041846)
@@ -0,0 +1,13 @@
+package com.itemservice.domain.repository;
+
+import com.layby.domain.entity.User;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface UserRepository extends JpaRepository<User, Long> {
+
+    boolean existsByUsername(String username);
+
+    User findByUserId(Long userId);
+
+    User findByUsername(String username);
+}
Index: item-service/src/main/java/com/itemservice/domain/repository/WishItemRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/repository/WishItemRepository.java b/item-service/src/main/java/com/itemservice/domain/repository/WishItemRepository.java
new file mode 100644
--- /dev/null	(date 1714032041848)
+++ b/item-service/src/main/java/com/itemservice/domain/repository/WishItemRepository.java	(date 1714032041848)
@@ -0,0 +1,14 @@
+package com.itemservice.domain.repository;
+
+import com.layby.domain.entity.User;
+import com.layby.domain.entity.WishItem;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import java.util.List;
+
+public interface WishItemRepository extends JpaRepository<WishItem, Long>, WishItemRepositoryCustom {
+
+    WishItem findByWishItemId(Long wishItemId);
+
+    List<WishItem> findAllByUser(User user);
+}
Index: item-service/src/main/java/com/itemservice/domain/repository/WishItemRepositoryCustom.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/repository/WishItemRepositoryCustom.java b/item-service/src/main/java/com/itemservice/domain/repository/WishItemRepositoryCustom.java
new file mode 100644
--- /dev/null	(date 1714032041851)
+++ b/item-service/src/main/java/com/itemservice/domain/repository/WishItemRepositoryCustom.java	(date 1714032041851)
@@ -0,0 +1,10 @@
+package com.itemservice.domain.repository;
+
+import com.layby.domain.entity.WishItem;
+
+import java.util.List;
+
+public interface WishItemRepositoryCustom {
+
+    List<WishItem> findAllByUserIdWithItem(Long userId);
+}
Index: item-service/src/main/java/com/itemservice/domain/repository/implement/OrderRepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/repository/implement/OrderRepositoryImpl.java b/item-service/src/main/java/com/itemservice/domain/repository/implement/OrderRepositoryImpl.java
new file mode 100644
--- /dev/null	(date 1714032041854)
+++ b/item-service/src/main/java/com/itemservice/domain/repository/implement/OrderRepositoryImpl.java	(date 1714032041854)
@@ -0,0 +1,49 @@
+package com.itemservice.domain.repository.implement;
+
+import com.layby.domain.common.OrderStatus;
+import com.layby.domain.entity.Order;
+import com.layby.domain.repository.OrderRepositoryCustom;
+import com.querydsl.jpa.impl.JPAQueryFactory;
+import lombok.RequiredArgsConstructor;
+
+import java.util.List;
+
+import static com.layby.domain.entity.QDelivery.*;
+import static com.layby.domain.entity.QItem.*;
+import static com.layby.domain.entity.QOrder.*;
+import static com.layby.domain.entity.QOrderItem.orderItem;
+
+@RequiredArgsConstructor
+public class OrderRepositoryImpl implements OrderRepositoryCustom {
+
+    private final JPAQueryFactory query;
+
+    @Override
+    public List<Order> findAllByUserIdWithOrderItemAndItem(Long userId) {
+        return query
+                .selectFrom(order)
+                .join(order.orderItems, orderItem).fetchJoin()
+                .join(orderItem.item, item).fetchJoin()
+                .where(order.user.userId.eq(userId))
+                .fetch();
+    }
+
+    @Override
+    public List<Order> findAfterRefund() {
+        return query
+                .selectFrom(order)
+                .join(order.orderItems, orderItem).fetchJoin()
+                .join(orderItem.item, item).fetchJoin()
+                .where(order.orderStatus.eq(OrderStatus.REFUND_PROCESS))
+                .fetch();
+    }
+
+    @Override
+    public Order findByOrderIdWithDelivery(Long orderId) {
+        return query
+                .selectFrom(order)
+                .join(order.delivery, delivery).fetchJoin()
+                .where(order.orderId.eq(orderId))
+                .fetchOne();
+    }
+}
Index: item-service/src/main/java/com/itemservice/domain/repository/implement/WishItemRepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/repository/implement/WishItemRepositoryImpl.java b/item-service/src/main/java/com/itemservice/domain/repository/implement/WishItemRepositoryImpl.java
new file mode 100644
--- /dev/null	(date 1714032041858)
+++ b/item-service/src/main/java/com/itemservice/domain/repository/implement/WishItemRepositoryImpl.java	(date 1714032041858)
@@ -0,0 +1,26 @@
+package com.itemservice.domain.repository.implement;
+
+import com.layby.domain.entity.WishItem;
+import com.layby.domain.repository.WishItemRepositoryCustom;
+import com.querydsl.jpa.impl.JPAQueryFactory;
+import lombok.RequiredArgsConstructor;
+
+import java.util.List;
+
+import static com.layby.domain.entity.QItem.item;
+import static com.layby.domain.entity.QWishItem.*;
+
+@RequiredArgsConstructor
+public class WishItemRepositoryImpl implements WishItemRepositoryCustom {
+
+    private final JPAQueryFactory query;
+
+    @Override
+    public List<WishItem> findAllByUserIdWithItem(Long userId) {
+        return query
+                .selectFrom(wishItem)
+                .join(wishItem.item, item).fetchJoin()
+                .where(wishItem.user.userId.eq(userId))
+                .fetch();
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/config/CorsConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/config/CorsConfig.java b/item-service/src/main/java/com/itemservice/web/config/CorsConfig.java
new file mode 100644
--- /dev/null	(date 1714032041860)
+++ b/item-service/src/main/java/com/itemservice/web/config/CorsConfig.java	(date 1714032041860)
@@ -0,0 +1,23 @@
+package com.itemservice.web.config;
+
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.web.cors.CorsConfiguration;
+import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
+import org.springframework.web.filter.CorsFilter;
+
+@Configuration
+public class CorsConfig {
+    @Bean
+    public CorsFilter corsFilter() {
+        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
+        CorsConfiguration config = new CorsConfiguration();
+        config.setAllowCredentials(true);
+        config.addAllowedOriginPattern("*");
+        config.addAllowedHeader("*");
+        config.addAllowedMethod("*");
+
+        source.registerCorsConfiguration("/api/**", config);
+        return new CorsFilter(source);
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/config/RedisConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/config/RedisConfig.java b/item-service/src/main/java/com/itemservice/web/config/RedisConfig.java
new file mode 100644
--- /dev/null	(date 1714032041864)
+++ b/item-service/src/main/java/com/itemservice/web/config/RedisConfig.java	(date 1714032041864)
@@ -0,0 +1,34 @@
+package com.itemservice.web.config;
+
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.data.redis.connection.RedisConnectionFactory;
+import org.springframework.data.redis.connection.RedisStandaloneConfiguration;
+import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;
+import org.springframework.data.redis.core.RedisTemplate;
+import org.springframework.data.redis.core.StringRedisTemplate;
+
+@Configuration
+public class RedisConfig {
+
+    @Value("${spring.data.redis.host}")
+    private String redisHost;
+
+    @Value("${spring.data.redis.port}")
+    private int redisPort;
+
+    @Bean
+    public RedisConnectionFactory redisConnectionFactory() {
+        return new LettuceConnectionFactory(
+                new RedisStandaloneConfiguration(redisHost, redisPort)
+        );
+    }
+
+    @Bean
+    public RedisTemplate<String, String> redisTemplate() {
+        StringRedisTemplate redisTemplate = new StringRedisTemplate();
+        redisTemplate.setConnectionFactory(redisConnectionFactory());
+        return redisTemplate;
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/config/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/config/SecurityConfig.java b/item-service/src/main/java/com/itemservice/web/config/SecurityConfig.java
new file mode 100644
--- /dev/null	(date 1714032041866)
+++ b/item-service/src/main/java/com/itemservice/web/config/SecurityConfig.java	(date 1714032041866)
@@ -0,0 +1,91 @@
+package com.itemservice.web.config;
+
+import com.layby.web.filter.JwtAuthenticationFilter;
+import jakarta.servlet.ServletException;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
+import lombok.RequiredArgsConstructor;
+import org.springframework.beans.factory.annotation.Configurable;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
+import org.springframework.security.config.annotation.web.configurers.CsrfConfigurer;
+import org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer;
+import org.springframework.security.config.http.SessionCreationPolicy;
+import org.springframework.security.core.AuthenticationException;
+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
+import org.springframework.security.crypto.password.PasswordEncoder;
+import org.springframework.security.web.AuthenticationEntryPoint;
+import org.springframework.security.web.SecurityFilterChain;
+import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
+import org.springframework.web.cors.CorsConfiguration;
+import org.springframework.web.cors.CorsConfigurationSource;
+import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
+
+import java.io.IOException;
+
+@Configurable
+@Configuration
+@EnableWebSecurity
+@EnableMethodSecurity
+@RequiredArgsConstructor
+public class SecurityConfig {
+
+    private final JwtAuthenticationFilter jwtAuthenticationFilter;
+
+    @Bean
+    public PasswordEncoder passwordEncoder() {
+        return new BCryptPasswordEncoder();
+    }
+
+    @Bean
+    protected SecurityFilterChain configure(HttpSecurity httpSecurity) throws Exception {
+
+        httpSecurity
+                .cors(cors -> cors
+                        .configurationSource(corsConfigurationSource()))
+                .csrf(CsrfConfigurer::disable)
+                .httpBasic(HttpBasicConfigurer::disable)
+                .sessionManagement(sessionManagement -> sessionManagement
+                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
+                )
+                .authorizeHttpRequests(request -> request
+                        .requestMatchers("/", "/api/v1/auth/**").permitAll()
+                        .anyRequest().authenticated()
+                )
+                .exceptionHandling(exceptionHandling -> exceptionHandling
+                        .authenticationEntryPoint(new FailedAuthenticationEntryPoint())
+                )
+                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
+
+        return httpSecurity.build();
+    }
+
+    @Bean
+    protected CorsConfigurationSource corsConfigurationSource() {
+
+        CorsConfiguration corsConfiguration = new CorsConfiguration();
+        corsConfiguration.addAllowedMethod("*");
+        corsConfiguration.addAllowedOrigin("*");
+        corsConfiguration.addAllowedHeader("*");
+
+        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
+        source.registerCorsConfiguration("/**", corsConfiguration);
+
+        return source;
+    }
+}
+
+
+class FailedAuthenticationEntryPoint implements AuthenticationEntryPoint {
+
+    @Override
+    public void commence(HttpServletRequest request, HttpServletResponse response,
+                         AuthenticationException authException) throws IOException, ServletException {
+        response.setContentType("application/json");
+        response.setStatus(HttpServletResponse.SC_FORBIDDEN);
+        response.getWriter().write("{\"code\": \"401\", \"message\": \"Authentication Failed.\"}");
+    }
+}
\ No newline at end of file
Index: item-service/src/main/java/com/itemservice/web/controller/ItemController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/controller/ItemController.java b/item-service/src/main/java/com/itemservice/web/controller/ItemController.java
new file mode 100644
--- /dev/null	(date 1714032041870)
+++ b/item-service/src/main/java/com/itemservice/web/controller/ItemController.java	(date 1714032041870)
@@ -0,0 +1,54 @@
+package com.itemservice.web.controller;
+
+import com.itemservice.domain.dto.request.WishItemSaveRequestDto;
+import com.itemservice.domain.dto.response.ItemListResponseDto;
+import com.itemservice.domain.dto.response.ItemResponseDto;
+import com.itemservice.domain.dto.response.ResponseDto;
+import com.itemservice.web.service.ItemService;
+import jakarta.validation.Valid;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.access.prepost.PreAuthorize;
+import org.springframework.security.core.Authentication;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+@Slf4j
+@RequiredArgsConstructor
+@RestController
+@RequestMapping("/api/item-service")
+public class ItemController {
+
+    private final ItemService itemService;
+
+    @GetMapping("/all")
+    public ResponseEntity<List<ItemListResponseDto>> referItemList() {
+        return itemService.referItemList();
+    }
+
+    @GetMapping("/{item_id}")
+    public ResponseEntity<ItemResponseDto> referItem(
+            @PathVariable(name = "item_id") Long itemId
+    ) {
+        return itemService.referItem(itemId);
+    }
+
+    @PostMapping("/{item_id}")
+    public ResponseEntity<ResponseDto> registerToWishlist(
+            @PathVariable(name = "item_id") Long itemId,
+            Authentication authentication,
+            @RequestBody @Valid WishItemSaveRequestDto dto
+    ) {
+        return itemService.registerToWishList(itemId, authentication, dto);
+    }
+
+    @PatchMapping("/{item_id}")
+    public void removeStockDuringPurchase(
+            @PathVariable(name = "item_id") Long itemId,
+            int count
+    ) {
+        return itemService.removeStock(itemId, count);
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/exception/AES256Exception.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/exception/AES256Exception.java b/item-service/src/main/java/com/itemservice/web/exception/AES256Exception.java
new file mode 100644
--- /dev/null	(date 1714032041874)
+++ b/item-service/src/main/java/com/itemservice/web/exception/AES256Exception.java	(date 1714032041874)
@@ -0,0 +1,19 @@
+package com.itemservice.web.exception;
+
+public class AES256Exception extends RuntimeException {
+    public AES256Exception() {
+        super();
+    }
+
+    public AES256Exception(String message) {
+        super(message);
+    }
+
+    public AES256Exception(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public AES256Exception(Throwable cause) {
+        super(cause);
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/exception/CertificationFailedException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/exception/CertificationFailedException.java b/item-service/src/main/java/com/itemservice/web/exception/CertificationFailedException.java
new file mode 100644
--- /dev/null	(date 1714032041876)
+++ b/item-service/src/main/java/com/itemservice/web/exception/CertificationFailedException.java	(date 1714032041876)
@@ -0,0 +1,19 @@
+package com.itemservice.web.exception;
+
+public class CertificationFailedException extends RuntimeException {
+    public CertificationFailedException() {
+        super();
+    }
+
+    public CertificationFailedException(String message) {
+        super(message);
+    }
+
+    public CertificationFailedException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public CertificationFailedException(Throwable cause) {
+        super(cause);
+    }
+}
Index: item-service/src/main/java/com/itemservice/domain/dto/response/ResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/dto/response/ResponseDto.java b/item-service/src/main/java/com/itemservice/domain/dto/response/ResponseDto.java
new file mode 100644
--- /dev/null	(date 1714032041783)
+++ b/item-service/src/main/java/com/itemservice/domain/dto/response/ResponseDto.java	(date 1714032041783)
@@ -0,0 +1,24 @@
+package com.itemservice.domain.dto.response;
+
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+
+@Getter
+@AllArgsConstructor
+public class ResponseDto {
+
+    private String code;
+    private String message;
+
+    private ResponseDto() {
+        this.code = "200";
+        this.message = "Success.";
+    }
+
+    public static ResponseEntity<ResponseDto> success() {
+        ResponseDto responseBody = new ResponseDto();
+        return ResponseEntity.status(HttpStatus.OK).body(responseBody);
+    }
+}
Index: item-service/src/main/java/com/itemservice/domain/dto/response/UserResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/dto/response/UserResponseDto.java b/item-service/src/main/java/com/itemservice/domain/dto/response/UserResponseDto.java
new file mode 100644
--- /dev/null	(date 1714032041786)
+++ b/item-service/src/main/java/com/itemservice/domain/dto/response/UserResponseDto.java	(date 1714032041786)
@@ -0,0 +1,15 @@
+package com.itemservice.domain.dto.response;
+
+import lombok.Getter;
+import lombok.Setter;
+
+@Getter @Setter
+public class UserResponseDto {
+
+
+    private String phoneNumber;
+
+    public UserResponseDto(String phoneNumber) {
+        this.phoneNumber = phoneNumber;
+    }
+}
Index: item-service/src/main/java/com/itemservice/domain/dto/response/WishItemResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/dto/response/WishItemResponseDto.java b/item-service/src/main/java/com/itemservice/domain/dto/response/WishItemResponseDto.java
new file mode 100644
--- /dev/null	(date 1714032041789)
+++ b/item-service/src/main/java/com/itemservice/domain/dto/response/WishItemResponseDto.java	(date 1714032041789)
@@ -0,0 +1,42 @@
+package com.itemservice.domain.dto.response;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.layby.domain.entity.WishItem;
+import lombok.Builder;
+import lombok.Getter;
+import lombok.Setter;
+
+@Getter @Setter
+@Builder
+public class WishItemResponseDto {
+
+    @JsonIgnore
+    private Long wishItemId;
+
+    @JsonIgnore
+    private Long itemId;
+
+    private String itemName;
+
+    private int price;
+
+    private int count;
+
+    private int totalPrice;
+
+    //== 생성자 메서드 ==//
+    /** 위시아이템 엔티티로 WishItemResponseDto를 만드는 메서드 **/
+    public static WishItemResponseDto fromWishItem(WishItem wishItem) {
+
+        WishItemResponseDto wishItemResponseDto = WishItemResponseDto.builder()
+                .wishItemId(wishItem.getWishItemId())
+                .itemId(wishItem.getItem().getItemId())
+                .itemName(wishItem.getItem().getItemName())
+                .price(wishItem.getPrice())
+                .count(wishItem.getCount())
+                .totalPrice(wishItem.getTotalPrice())
+                .build();
+
+        return wishItemResponseDto;
+    }
+}
Index: item-service/src/main/java/com/itemservice/domain/dto/response/WishListReferResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/dto/response/WishListReferResponseDto.java b/item-service/src/main/java/com/itemservice/domain/dto/response/WishListReferResponseDto.java
new file mode 100644
--- /dev/null	(date 1714032041792)
+++ b/item-service/src/main/java/com/itemservice/domain/dto/response/WishListReferResponseDto.java	(date 1714032041792)
@@ -0,0 +1,30 @@
+package com.itemservice.domain.dto.response;
+
+import com.layby.domain.entity.WishItem;
+import lombok.Getter;
+import lombok.Setter;
+
+import java.util.ArrayList;
+import java.util.List;
+
+@Getter @Setter
+public class WishListReferResponseDto {
+
+    private List<WishItemResponseDto> wishItemResponseDtos = new ArrayList<>();
+
+    private int totalPrice = 0;
+
+    //== 생성자 ==//
+    /** 위시아이템 엔티티 리스트로 WishListReferResponseDto를 만드는 생성자 **/
+    public WishListReferResponseDto(List<WishItem> wishItems) {
+
+        for (WishItem wishItem : wishItems) {
+            this.wishItemResponseDtos
+                    .add(
+              WishItemResponseDto.fromWishItem(wishItem)
+            );
+
+            totalPrice += wishItem.getTotalPrice();
+        }
+    }
+}
Index: item-service/src/main/java/com/itemservice/domain/dto/response/auth/SignInResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/dto/response/auth/SignInResponseDto.java b/item-service/src/main/java/com/itemservice/domain/dto/response/auth/SignInResponseDto.java
new file mode 100644
--- /dev/null	(date 1714032041796)
+++ b/item-service/src/main/java/com/itemservice/domain/dto/response/auth/SignInResponseDto.java	(date 1714032041796)
@@ -0,0 +1,11 @@
+package com.itemservice.domain.dto.response.auth;
+
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+
+@Getter
+@AllArgsConstructor
+public class SignInResponseDto {
+
+    private String token;
+}
Index: item-service/src/main/java/com/itemservice/domain/entity/Address.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/entity/Address.java b/item-service/src/main/java/com/itemservice/domain/entity/Address.java
new file mode 100644
--- /dev/null	(date 1714032041799)
+++ b/item-service/src/main/java/com/itemservice/domain/entity/Address.java	(date 1714032041799)
@@ -0,0 +1,40 @@
+package com.itemservice.domain.entity;
+
+import com.layby.domain.dto.request.AddressRequestDto;
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+
+@Getter @Builder
+@AllArgsConstructor
+@NoArgsConstructor
+@Table(name = "address")
+@Entity(name = "address")
+public class Address extends BaseTimeEntity {
+
+    @Id
+    @Column(name = "address_id")
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long addressId;
+
+    @Column(name = "city")
+    private String city;
+
+    @Column(name = "street")
+    private String street;
+
+    @Column(name = "zipcode")
+    private String zipCode;
+
+    @ManyToOne(fetch = FetchType.LAZY)
+    @JoinColumn(name = "user_id")
+    private User user;
+
+    public void updateAddress(AddressRequestDto dto) {
+        this.city = dto.getCity();
+        this.street = dto.getStreet();
+        this.zipCode = dto.getZipCode();
+    }
+}
Index: item-service/src/main/java/com/itemservice/domain/entity/BaseTimeEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/entity/BaseTimeEntity.java b/item-service/src/main/java/com/itemservice/domain/entity/BaseTimeEntity.java
new file mode 100644
--- /dev/null	(date 1714032041802)
+++ b/item-service/src/main/java/com/itemservice/domain/entity/BaseTimeEntity.java	(date 1714032041802)
@@ -0,0 +1,22 @@
+package com.itemservice.domain.entity;
+
+import jakarta.persistence.EntityListeners;
+import jakarta.persistence.MappedSuperclass;
+import lombok.Getter;
+import org.springframework.data.annotation.CreatedDate;
+import org.springframework.data.annotation.LastModifiedDate;
+import org.springframework.data.jpa.domain.support.AuditingEntityListener;
+
+import java.time.LocalDateTime;
+
+@Getter
+@MappedSuperclass
+@EntityListeners(AuditingEntityListener.class)
+public abstract class BaseTimeEntity {
+
+    @CreatedDate
+    private LocalDateTime createdDate;
+
+    @LastModifiedDate
+    private LocalDateTime modifiedDate;
+}
Index: item-service/src/main/java/com/itemservice/domain/entity/Delivery.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/entity/Delivery.java b/item-service/src/main/java/com/itemservice/domain/entity/Delivery.java
new file mode 100644
--- /dev/null	(date 1714032041806)
+++ b/item-service/src/main/java/com/itemservice/domain/entity/Delivery.java	(date 1714032041806)
@@ -0,0 +1,72 @@
+package com.itemservice.domain.entity;
+
+import com.layby.domain.common.DeliveryStatus;
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+
+import java.time.LocalDateTime;
+import java.time.temporal.ChronoUnit;
+
+@Getter
+@AllArgsConstructor
+@NoArgsConstructor
+@Table(name = "delivery")
+@Entity(name = "delivery")
+public class Delivery extends BaseTimeEntity {
+
+    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Column(name = "delivery_id")
+    private Long deliveryId;
+
+    @ManyToOne(fetch = FetchType.LAZY)
+    @JoinColumn(name = "address_id")
+    private Address address;
+
+    @Enumerated(EnumType.STRING)
+    private DeliveryStatus deliveryStatus;
+
+    @OneToOne(mappedBy = "delivery", fetch = FetchType.LAZY)
+    private Order order;
+
+    public void mappingOrder(Order order) {
+        this.order = order;
+    }
+
+    // 주문 창에서 필요한 생성자
+    @Builder
+    public Delivery(Address address) {
+        this.address = address;
+        this.deliveryStatus = DeliveryStatus.PREPARE;
+    }
+
+    //== 비즈니스 로직 ==//
+
+    /** 배송 상태 업데이트하는 메서드 **/
+    public void updateStatus(DeliveryStatus status) {
+        this.deliveryStatus = status;
+    }
+
+    /** 날짜를 체크해 배송 상태를 업데이트하는 메서드 **/
+    public DeliveryStatus checkStatus() {
+        LocalDateTime now = LocalDateTime.now();
+        LocalDateTime createdDate = getCreatedDate();
+
+        long passDays = ChronoUnit.DAYS.between(now, createdDate);
+        if (passDays == 1L) updateStatus(DeliveryStatus.PROCESS);
+        else if (passDays > 1L) updateStatus(DeliveryStatus.COMPLETE);
+
+        return this.deliveryStatus;
+    }
+
+    /** 배송 정보가 생성되고 지난 일 수를 반환하는 메서드 **/
+    public long checkPastDay() {
+        LocalDateTime now = LocalDateTime.now();
+        LocalDateTime createdDate = getCreatedDate();
+
+        long passDays = ChronoUnit.DAYS.between(createdDate, now);
+        return passDays;
+    }
+}
Index: item-service/src/main/java/com/itemservice/domain/entity/Item.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/entity/Item.java b/item-service/src/main/java/com/itemservice/domain/entity/Item.java
new file mode 100644
--- /dev/null	(date 1714032041809)
+++ b/item-service/src/main/java/com/itemservice/domain/entity/Item.java	(date 1714032041809)
@@ -0,0 +1,52 @@
+package com.itemservice.domain.entity;
+
+import com.layby.domain.dto.request.ItemSaveRequestDto;
+import com.layby.web.exception.NotEnoughStockException;
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+
+import static com.layby.domain.common.ErrorCode.NOT_ENOUGH_STOCK;
+
+@Getter
+@AllArgsConstructor
+@NoArgsConstructor
+@Table(name = "item")
+@Entity(name = "item")
+public class Item extends BaseTimeEntity {
+
+    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Column(name = "item_id")
+    private Long itemId;
+
+    @Column(name = "item_name")
+    private String itemName;
+
+    @Column(name = "price")
+    private int price;
+
+    @Column(name = "details")
+    private String details;
+
+    @Column(name = "stock_quantity")
+    private int stockQuantity;
+
+    public void addStock(int quantity) {
+        this.stockQuantity += quantity;
+    }
+
+    public void removeStock(int quantity) {
+        int restStock = this.stockQuantity - quantity;
+        if (restStock < 0)
+            throw new NotEnoughStockException(NOT_ENOUGH_STOCK.getMessage());
+        this.stockQuantity = restStock;
+    }
+
+    public Item(ItemSaveRequestDto dto) {
+        this.itemName = dto.getItemName();
+        this.price = Integer.parseInt(dto.getPrice());
+        this.details = dto.getDetails();
+        this.stockQuantity = Integer.parseInt(dto.getStockQuantity());
+    }
+}
Index: item-service/src/main/java/com/itemservice/domain/entity/MailCertification.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/entity/MailCertification.java b/item-service/src/main/java/com/itemservice/domain/entity/MailCertification.java
new file mode 100644
--- /dev/null	(date 1714032041812)
+++ b/item-service/src/main/java/com/itemservice/domain/entity/MailCertification.java	(date 1714032041812)
@@ -0,0 +1,26 @@
+package com.itemservice.domain.entity;
+
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
+import jakarta.persistence.Table;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+
+@Getter @Builder
+@AllArgsConstructor
+@NoArgsConstructor
+@Table(name = "certification")
+@Entity(name = "certification")
+public class MailCertification {
+
+    @Id
+    @Column(name = "username")
+    private String username;
+
+    private String email;
+
+    private String certificationNumber;
+}
\ No newline at end of file
Index: item-service/src/main/java/com/itemservice/domain/entity/Order.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/entity/Order.java b/item-service/src/main/java/com/itemservice/domain/entity/Order.java
new file mode 100644
--- /dev/null	(date 1714032041815)
+++ b/item-service/src/main/java/com/itemservice/domain/entity/Order.java	(date 1714032041815)
@@ -0,0 +1,135 @@
+package com.itemservice.domain.entity;
+
+import com.layby.domain.common.DeliveryStatus;
+import com.layby.domain.common.OrderStatus;
+import com.layby.domain.dto.response.OrderStatusResponseDto;
+import com.layby.web.exception.DeliveryCancelFailedException;
+import com.layby.web.exception.RefundFailedException;
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+
+import java.time.LocalDate;
+import java.util.ArrayList;
+import java.util.List;
+
+import static com.layby.domain.common.ErrorCode.*;
+
+@Getter @Builder
+@AllArgsConstructor
+@NoArgsConstructor
+@Table(name = "orders")
+@Entity(name = "orders")
+public class Order extends BaseTimeEntity {
+
+    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Column(name = "order_id")
+    private Long orderId;
+
+    @Enumerated(EnumType.STRING)
+    private OrderStatus orderStatus;
+
+    @ManyToOne(fetch = FetchType.LAZY)
+    @JoinColumn(name = "user_id")
+    private User user;
+
+    @OneToMany(mappedBy = "order", cascade = CascadeType.ALL)
+    private List<OrderItem> orderItems = new ArrayList<>();
+
+    @OneToOne(fetch = FetchType.LAZY)
+    @JoinColumn(name = "delivery_id")
+    private Delivery delivery;
+
+    private LocalDate refundRequestDate;
+
+    //== 연관 관계 메서드 ==//
+    public void mappingUser(User user) {
+        this.user = user;
+        user.getOrders().add(this);
+    }
+
+    public void addOrderItem(OrderItem orderItem) {
+        orderItems.add(orderItem);
+        orderItem.mappingOrder(this);
+    }
+
+    public void mappingDelivery(Delivery delivery) {
+        this.delivery = delivery;
+        delivery.mappingOrder(this);
+    }
+
+    //== 생성 메서드 ==//
+    public static Order createOrder(
+            User user, Delivery delivery, List<OrderItem> orderItems
+    ) {
+        Order order = Order.builder()
+                .orderStatus(OrderStatus.ORDER)
+                .user(user)
+                .orderItems(new ArrayList<>())
+                .delivery(delivery)
+                .build();
+
+        for (OrderItem orderItem : orderItems) {
+            order.addOrderItem(orderItem);
+        }
+
+        return order;
+    }
+
+    //== 변환 메서드 ==//
+    public static OrderStatusResponseDto convertToStatusDto(Order order) {
+
+        // 배송 정보는 checkStatus() 로 업데이트해서 response
+        OrderStatusResponseDto orderStatusResponseDto = OrderStatusResponseDto.builder()
+                .orderStatus(order.getOrderStatus().getDescription())
+                .deliveryStatus(order.getDelivery().checkStatus().getDescription())
+                .totalPrice(order.getTotalPrice())
+                .build();
+
+        return orderStatusResponseDto;
+    }
+
+    //== 비즈니스 로직 ==//
+    /** 주문 취소 **/
+    public void cancel() {
+        DeliveryStatus deliveryStatus = delivery.checkStatus();
+        if (deliveryStatus == DeliveryStatus.PROCESS ||
+                deliveryStatus == DeliveryStatus.COMPLETE) {
+            throw new DeliveryCancelFailedException(DELIVERY_ALEADY_START.getMessage());
+        }
+
+        this.orderStatus = OrderStatus.CANCEL;
+        for (OrderItem orderItem : orderItems) {
+            orderItem.cancel();
+        }
+    }
+
+    /** 환불 **/
+    public void refund() {
+        long pastDay = delivery.checkPastDay();
+        if (pastDay == 3) {
+            this.orderStatus = OrderStatus.REFUND_PROCESS;
+            this.refundRequestDate = LocalDate.now();
+        }
+        else throw new RefundFailedException(REFUND_IS_NOT_POSSIBLE.getMessage());
+    }
+
+    /** 상태 업데이트 **/
+    public void updateStatus(OrderStatus orderStatus) {
+        this.orderStatus = orderStatus;
+    }
+
+
+
+    //== 조회 로직 ==//
+    /** 전체 주문 가격 조회 **/
+    public int getTotalPrice() {
+        int totalPrice = 0;
+        for (OrderItem orderItem : orderItems) {
+            totalPrice += orderItem.getTotalPrice();
+        }
+        return totalPrice;
+    }
+}
Index: item-service/src/main/java/com/itemservice/domain/entity/OrderItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/entity/OrderItem.java b/item-service/src/main/java/com/itemservice/domain/entity/OrderItem.java
new file mode 100644
--- /dev/null	(date 1714032041818)
+++ b/item-service/src/main/java/com/itemservice/domain/entity/OrderItem.java	(date 1714032041818)
@@ -0,0 +1,65 @@
+package com.itemservice.domain.entity;
+
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+
+@Getter @Builder
+@AllArgsConstructor
+@NoArgsConstructor
+@Table(name = "order_item")
+@Entity(name = "order_item")
+public class OrderItem {
+
+    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Column(name = "order_item_id")
+    private Long orderItemId;
+
+    @Column(name = "order_price")
+    private int orderPrice;
+
+    @Column(name = "count")
+    private int count;
+
+    @ManyToOne(fetch = FetchType.LAZY)
+    @JoinColumn(name = "item_id")
+    private Item item;
+
+    @ManyToOne(fetch = FetchType.LAZY)
+    @JoinColumn(name = "order_id")
+    private Order order;
+
+    public void mappingOrder(Order order) {
+        this.order = order;
+    }
+
+    //== 생성 메서드 ==//
+    public static OrderItem convertFromWishItem(
+            WishItem wishItem
+    ) {
+        Item item = wishItem.getItem();
+        int count = wishItem.getCount();
+
+        OrderItem orderItem = OrderItem.builder()
+                .item(item)
+                .orderPrice(wishItem.getPrice())
+                .count(count)
+                .build();
+
+        return orderItem;
+    }
+
+    //== 비즈니스 로직 ==//
+    /** 주문 취소 **/
+    public void cancel() {
+        this.item.addStock(this.count);
+    }
+
+    //== 조회 로직 ==//
+    /** 주문 상품 전체 가격 조회 **/
+    public int getTotalPrice() {
+        return this.orderPrice * this.count;
+    }
+}
Index: item-service/src/main/java/com/itemservice/domain/entity/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/entity/User.java b/item-service/src/main/java/com/itemservice/domain/entity/User.java
new file mode 100644
--- /dev/null	(date 1714032041822)
+++ b/item-service/src/main/java/com/itemservice/domain/entity/User.java	(date 1714032041822)
@@ -0,0 +1,69 @@
+package com.itemservice.domain.entity;
+
+import com.layby.domain.common.Role;
+import com.layby.domain.dto.request.auth.SignUpRequestDto;
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+
+import java.time.LocalDateTime;
+import java.util.List;
+
+@Getter @Builder
+@AllArgsConstructor
+@NoArgsConstructor
+@Table(name = "user")
+@Entity(name = "user")
+public class User extends BaseTimeEntity {
+
+    @Id
+    @Column(name = "user_id")
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long userId;
+
+    @Column(name = "username", length = 50, unique = true)
+    private String username;
+
+    @Column(name = "email", length = 100, unique = true)
+    private String email;
+
+    @Column(name = "email_verified_at")
+    private LocalDateTime emailVerifiedAt;
+
+    @Column(name = "password")
+    private String password;
+
+    @Column(name = "phone_number", length = 50)
+    private String phoneNumber;
+
+    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL)
+    private List<Address> addressList;
+
+    @Enumerated(EnumType.STRING)
+    private Role role;
+
+    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL)
+    private List<Order> orders;
+
+    public User(SignUpRequestDto dto) {
+        this.username = dto.getUsername();
+        this.email = dto.getEmail();
+        this.password = dto.getPassword();
+        this.phoneNumber = dto.getPhoneNumber();
+    }
+
+    public void updateAfterCertification(Role role, LocalDateTime emailVerifiedAt) {
+        this.role = role;
+        this.emailVerifiedAt = emailVerifiedAt;
+    }
+
+    public void updatePhoneNumber(String phoneNumber) {
+        this.phoneNumber = phoneNumber;
+    }
+
+    public void updatePassword(String password) {
+        this.password = password;
+    }
+}
\ No newline at end of file
Index: item-service/src/main/java/com/itemservice/domain/entity/WishItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/entity/WishItem.java b/item-service/src/main/java/com/itemservice/domain/entity/WishItem.java
new file mode 100644
--- /dev/null	(date 1714032041825)
+++ b/item-service/src/main/java/com/itemservice/domain/entity/WishItem.java	(date 1714032041825)
@@ -0,0 +1,64 @@
+package com.itemservice.domain.entity;
+
+
+import com.layby.domain.dto.response.WishItemResponseDto;
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+
+@Getter @Builder
+@AllArgsConstructor
+@NoArgsConstructor
+@Table(name = "wish_item")
+@Entity(name = "wish_item")
+public class WishItem {
+
+    @Id @Column(name = "wish_item_id")
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long wishItemId;
+
+    @OneToOne(fetch = FetchType.LAZY)
+    @JoinColumn(name = "user_id")
+    private User user;
+
+    @Column(name = "price")
+    private int price;
+
+    @Column(name = "count")
+    private int count;
+
+    @ManyToOne(fetch = FetchType.LAZY)
+    @JoinColumn(name = "item_id")
+    private Item item;
+
+    //== 조회 로직 ==//
+    /** 주문 상품 전체 가격 조회 **/
+    public int getTotalPrice() {
+        return this.price * this.count;
+    }
+
+    //== 생성 메서드 ==//
+    /** 위시리스트에서 사용자가 선택한 위시아이템 Dto를 위시아이템으로 바꾸는 메서드 **/
+    public static WishItem covertFromChooseDto(WishItemResponseDto dto, Item item) {
+        WishItem wishItem = WishItem.builder()
+                .price(dto.getPrice())
+                .count(dto.getCount())
+                .item(item)
+                .build();
+
+        return wishItem;
+    }
+
+    //== 비즈니스 로직 ==//
+
+    /** 수량 up **/
+    public void increaseCount() {
+        this.count++;
+    }
+
+    public void decreaseCount() {
+        this.count--;
+    }
+}
Index: item-service/src/main/java/com/itemservice/domain/repository/AddressRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/repository/AddressRepository.java b/item-service/src/main/java/com/itemservice/domain/repository/AddressRepository.java
new file mode 100644
--- /dev/null	(date 1714032041828)
+++ b/item-service/src/main/java/com/itemservice/domain/repository/AddressRepository.java	(date 1714032041828)
@@ -0,0 +1,14 @@
+package com.itemservice.domain.repository;
+
+import com.layby.domain.entity.Address;
+import com.layby.domain.entity.User;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import java.util.List;
+
+public interface AddressRepository extends JpaRepository<Address, Long> {
+
+    Address findByAddressId(Long addressId);
+
+    List<Address> findAllByUser(User user);
+}
Index: item-service/src/main/java/com/itemservice/domain/repository/CertificationRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/domain/repository/CertificationRepository.java b/item-service/src/main/java/com/itemservice/domain/repository/CertificationRepository.java
new file mode 100644
--- /dev/null	(date 1714032041830)
+++ b/item-service/src/main/java/com/itemservice/domain/repository/CertificationRepository.java	(date 1714032041830)
@@ -0,0 +1,13 @@
+package com.itemservice.domain.repository;
+
+import com.layby.domain.entity.MailCertification;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface CertificationRepository extends JpaRepository<MailCertification, Long> {
+
+    MailCertification findByUsername(String username);
+
+    boolean existsByUsername(String username);
+
+    void deleteAllByUsername(String username);
+}
Index: item-service/src/main/java/com/itemservice/web/service/DeliveryService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/service/DeliveryService.java b/item-service/src/main/java/com/itemservice/web/service/DeliveryService.java
new file mode 100644
--- /dev/null	(date 1714032041932)
+++ b/item-service/src/main/java/com/itemservice/web/service/DeliveryService.java	(date 1714032041932)
@@ -0,0 +1,8 @@
+package com.itemservice.web.service;
+
+import com.layby.domain.entity.Delivery;
+
+public interface DeliveryService {
+
+    void save(Delivery delivery);
+}
Index: item-service/src/main/java/com/itemservice/web/service/ItemService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/service/ItemService.java b/item-service/src/main/java/com/itemservice/web/service/ItemService.java
new file mode 100644
--- /dev/null	(date 1714032041935)
+++ b/item-service/src/main/java/com/itemservice/web/service/ItemService.java	(date 1714032041935)
@@ -0,0 +1,23 @@
+package com.itemservice.web.service;
+
+import com.layby.domain.dto.request.ItemSaveRequestDto;
+import com.layby.domain.dto.response.ItemListResponseDto;
+import com.layby.domain.dto.response.ItemResponseDto;
+import com.layby.domain.dto.response.ResponseDto;
+import com.layby.domain.entity.Item;
+import org.springframework.http.ResponseEntity;
+
+import java.util.List;
+
+public interface ItemService {
+
+    Item findByItemId(Long itemId);
+
+    Item findByItemName(String itemName);
+
+    ResponseEntity<ResponseDto> saveItem(ItemSaveRequestDto dto);
+
+    ResponseEntity<List<ItemListResponseDto>> referItemList();
+
+    ResponseEntity<ItemResponseDto> referItem(Long itemId);
+}
Index: item-service/src/main/java/com/itemservice/web/service/OrderItemService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/service/OrderItemService.java b/item-service/src/main/java/com/itemservice/web/service/OrderItemService.java
new file mode 100644
--- /dev/null	(date 1714032041940)
+++ b/item-service/src/main/java/com/itemservice/web/service/OrderItemService.java	(date 1714032041940)
@@ -0,0 +1,8 @@
+package com.itemservice.web.service;
+
+import com.layby.domain.entity.OrderItem;
+
+public interface OrderItemService {
+
+    void save(OrderItem orderItem);
+}
Index: item-service/src/main/java/com/itemservice/web/service/OrderService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/service/OrderService.java b/item-service/src/main/java/com/itemservice/web/service/OrderService.java
new file mode 100644
--- /dev/null	(date 1714032041943)
+++ b/item-service/src/main/java/com/itemservice/web/service/OrderService.java	(date 1714032041943)
@@ -0,0 +1,24 @@
+package com.itemservice.web.service;
+
+import com.layby.domain.dto.response.OrderStatusResponseDto;
+import com.layby.domain.dto.response.ResponseDto;
+import com.layby.domain.entity.Order;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.Authentication;
+
+import java.util.List;
+
+public interface OrderService {
+
+    void save(Order order);
+
+    Order findByOrderId(Long orderId);
+
+    List<Order> findAtferRefund();
+
+    ResponseEntity<List<OrderStatusResponseDto>> referOrdersStatus(Authentication authentication);
+
+    ResponseEntity<ResponseDto> cancelOrder(Long orderId);
+
+    ResponseEntity<ResponseDto> refundOrder(Long orderId);
+}
Index: item-service/src/main/java/com/itemservice/web/service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/service/UserService.java b/item-service/src/main/java/com/itemservice/web/service/UserService.java
new file mode 100644
--- /dev/null	(date 1714032041947)
+++ b/item-service/src/main/java/com/itemservice/web/service/UserService.java	(date 1714032041947)
@@ -0,0 +1,24 @@
+package com.itemservice.web.service;
+
+import com.layby.domain.dto.request.PhoneNumberUpdateRequestDto;
+import com.layby.domain.dto.request.UserPasswordUpdateRequestDto;
+import com.layby.domain.dto.response.ResponseDto;
+import com.layby.domain.dto.response.UserResponseDto;
+import com.layby.domain.entity.User;
+import org.springframework.http.ResponseEntity;
+import org.springframework.transaction.annotation.Transactional;
+
+public interface UserService {
+
+    User findByUserId(Long userId);
+
+    UserResponseDto referUser(Long userId);
+
+    User findByUsername(String username);
+
+    @Transactional
+    ResponseEntity<ResponseDto> updatePhoneNumber(Long userId, PhoneNumberUpdateRequestDto dto);
+
+    @Transactional
+    ResponseEntity<ResponseDto> updatePassword(Long userId, UserPasswordUpdateRequestDto dto);
+}
\ No newline at end of file
Index: item-service/src/main/java/com/itemservice/web/service/WishItemService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/service/WishItemService.java b/item-service/src/main/java/com/itemservice/web/service/WishItemService.java
new file mode 100644
--- /dev/null	(date 1714032041951)
+++ b/item-service/src/main/java/com/itemservice/web/service/WishItemService.java	(date 1714032041951)
@@ -0,0 +1,36 @@
+package com.itemservice.web.service;
+
+import com.layby.domain.dto.request.WishItemSaveRequestDto;
+import com.layby.domain.dto.response.ResponseDto;
+import com.layby.domain.dto.response.WishItemResponseDto;
+import com.layby.domain.dto.response.WishListReferResponseDto;
+import com.layby.domain.entity.User;
+import com.layby.domain.entity.WishItem;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.Authentication;
+
+import java.util.List;
+
+public interface WishItemService {
+
+    ResponseEntity<ResponseDto> save(WishItem wishItem);
+
+    WishItem findByWishItemId(Long wishItemId);
+
+    List<WishItem> findAllByUser(User user);
+
+    ResponseEntity<ResponseDto> increaseCount(Long wishItemId);
+
+    ResponseEntity<ResponseDto> decreaseCount(Long wishItemId);
+
+    ResponseEntity<ResponseDto> delete(Long wishItemId);
+
+    ResponseEntity<ResponseDto> register(Long itemId, Authentication authentication, WishItemSaveRequestDto dto);
+
+    ResponseEntity<WishListReferResponseDto> referWishList(Long userId);
+
+    ResponseEntity<ResponseDto> purchaseWishList(
+            Long userId, Long addressId, List<WishItemResponseDto> dtos);
+
+    ResponseEntity<ResponseDto> purchaseWishListTest(Long userId);
+}
Index: item-service/src/main/java/com/itemservice/web/service/implement/AddressServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/service/implement/AddressServiceImpl.java b/item-service/src/main/java/com/itemservice/web/service/implement/AddressServiceImpl.java
new file mode 100644
--- /dev/null	(date 1714032041956)
+++ b/item-service/src/main/java/com/itemservice/web/service/implement/AddressServiceImpl.java	(date 1714032041956)
@@ -0,0 +1,97 @@
+package com.itemservice.web.service.implement;
+
+import com.layby.domain.dto.request.AddressRequestDto;
+import com.layby.domain.dto.response.AddressListReferResponseDto;
+import com.layby.domain.dto.response.ResponseDto;
+import com.layby.domain.entity.Address;
+import com.layby.domain.entity.User;
+import com.layby.domain.repository.AddressRepository;
+import com.layby.web.exception.InternalServerErrorException;
+import com.layby.web.service.AddressService;
+import com.layby.web.service.UserService;
+import com.layby.web.util.AES256;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.util.List;
+
+import static com.layby.domain.common.ErrorCode.*;
+
+@Slf4j
+@Transactional(readOnly = true)
+@RequiredArgsConstructor
+@Service
+public class AddressServiceImpl implements AddressService {
+
+    private final AddressRepository addressRepository;
+    private final UserService userService;
+    private final AES256 personalDataEncoder;
+
+    @Override
+    public Address findByAddressId(Long addressId) {
+        return addressRepository.findByAddressId(addressId);
+    }
+
+    @Override
+    public List<Address> findAllByUser(User user) {
+        return addressRepository.findAllByUser(user);
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> updateAddress(Long addressId, AddressRequestDto dto) {
+        Address foundAddress = addressRepository.findById(addressId).orElse(null);
+        foundAddress.updateAddress(dto);
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> addAddress(String username, AddressRequestDto dto) {
+
+        String city = dto.getCity();
+        String street = dto.getStreet();
+        String zipCode = dto.getZipCode();
+        String encodedCity = null;
+        String encodedStreet = null;
+        String encodedZipCode = null;
+        String encodedUsername = null;
+
+        try {
+            encodedCity = personalDataEncoder.encode(city);
+            encodedStreet = personalDataEncoder.encode(street);
+            encodedZipCode = personalDataEncoder.encode(zipCode);
+            encodedUsername = personalDataEncoder.encode(username);
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new InternalServerErrorException(INTERNAL_SERVER_ERROR.getMessage());
+        }
+
+        User user = userService.findByUsername(encodedUsername);
+        Address address = Address.builder()
+                    .city(encodedCity)
+                    .street(encodedStreet)
+                    .zipCode(encodedZipCode)
+                    .user(user)
+                    .build();
+
+        addressRepository.save(address);
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    public ResponseEntity<AddressListReferResponseDto> referAddressListByUserId(Long userId) {
+
+        User user = userService.findByUserId(userId);
+        List<Address> addressList = findAllByUser(user);
+        AddressListReferResponseDto addressListReferResponseDto = new AddressListReferResponseDto(addressList);
+
+        return ResponseEntity.status(HttpStatus.OK).body(addressListReferResponseDto);
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/service/implement/AuthServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/service/implement/AuthServiceImpl.java b/item-service/src/main/java/com/itemservice/web/service/implement/AuthServiceImpl.java
new file mode 100644
--- /dev/null	(date 1714032041959)
+++ b/item-service/src/main/java/com/itemservice/web/service/implement/AuthServiceImpl.java	(date 1714032041959)
@@ -0,0 +1,242 @@
+package com.itemservice.web.service.implement;
+
+import com.layby.domain.common.RedisDao;
+import com.layby.domain.common.Role;
+import com.layby.domain.dto.request.auth.*;
+import com.layby.domain.dto.response.ResponseDto;
+import com.layby.domain.dto.response.auth.*;
+import com.layby.domain.entity.MailCertification;
+import com.layby.domain.entity.User;
+import com.layby.domain.repository.CertificationRepository;
+import com.layby.domain.repository.UserRepository;
+import com.layby.web.exception.*;
+import com.layby.web.jwt.JwtProvider;
+import com.layby.web.provider.EmailProvider;
+import com.layby.web.service.AuthService;
+import com.layby.web.util.AES256;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.Authentication;
+import org.springframework.security.crypto.password.PasswordEncoder;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.time.Duration;
+import java.time.LocalDateTime;
+
+import static com.layby.domain.common.ErrorCode.*;
+
+@Slf4j
+@RequiredArgsConstructor
+@Service
+public class AuthServiceImpl implements AuthService {
+
+    private final CertificationRepository certificationRepository;
+    private final UserRepository userRepository;
+    private final PasswordEncoder passwordEncoder;
+    private final AES256 personalDataEncoder;
+
+    private final JwtProvider jwtProvider;
+    private final EmailProvider emailProvider;
+
+    private final RedisDao redisDao;
+
+    @Override
+    @Transactional(readOnly = true)
+    public ResponseEntity<ResponseDto> usernameCheck(UsernameCheckRequestDto dto) {
+
+        try {
+            String username = dto.getUsername();
+            boolean isExist = userRepository.existsByUsername(username);
+            if (isExist) throw new DuplicatedUsernameException(DUPLICATED_USERNAME.getMessage());
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new DatabaseErrorException(DATABASE_ERROR.getMessage());
+        }
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> emailCertification(EmailCertificationRequestDto dto) {
+
+        String username = null;
+        String encodedUsername = null;
+        String email = null;
+        String encodedEmail = null;
+
+        try {
+            username = dto.getUsername();
+            encodedUsername = personalDataEncoder.encode(username);
+            email = dto.getEmail();
+            encodedEmail = personalDataEncoder.encode(email);
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new InternalServerErrorException(INTERNAL_SERVER_ERROR.getMessage());
+        }
+
+        try {
+            boolean isExist = userRepository.existsByUsername(encodedUsername);
+            if (!isExist) throw new MailFailedException(MAIL_FAIL.getMessage());
+
+            String certificationNumber = getCertificationNumber();
+
+            boolean isSuccessed = emailProvider.sendCertificationMail(email, certificationNumber);
+            if (!isSuccessed) throw new MailFailedException(MAIL_FAIL.getMessage());
+
+            boolean isExistCF = certificationRepository.existsByUsername(username);
+            if (isExistCF) certificationRepository.deleteAllByUsername(username);
+
+            MailCertification mailCertification = new MailCertification(username, email, certificationNumber);
+            certificationRepository.save(mailCertification);
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new DatabaseErrorException(DATABASE_ERROR.getMessage());
+        }
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> checkCertification(CheckCertificationRequestDto dto) {
+
+        String username = dto.getUsername();
+        String email = dto.getEmail();
+        String certificationNumber = dto.getCertificationNumber();
+
+        boolean isExist = certificationRepository.existsByUsername(username);
+        if (!isExist) throw new CertificationFailedException(CERTIFICATION_FAIL.getMessage());
+
+        MailCertification mailCertification = certificationRepository.findByUsername(username);
+        boolean isMatched = mailCertification.getEmail().equals(email) &&
+                mailCertification.getCertificationNumber().equals(certificationNumber);
+        if (!isMatched) throw new CertificationFailedException(CERTIFICATION_FAIL.getMessage());
+
+        String encodedUsername = null;
+
+        try {
+            encodedUsername = personalDataEncoder.encode(username);
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new InternalServerErrorException(INTERNAL_SERVER_ERROR.getMessage());
+        }
+
+        try {
+            User user = userRepository.findByUsername(encodedUsername);
+
+            user.updateAfterCertification(Role.USER, LocalDateTime.now());
+
+            certificationRepository.deleteAllByUsername(username);
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new DatabaseErrorException(DATABASE_ERROR.getMessage());
+        }
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> signUp(SignUpRequestDto dto) {
+
+        try {
+            String username = dto.getUsername();
+            boolean isExist = userRepository.existsByUsername(username);
+            if (isExist) throw new DuplicatedUsernameException(DUPLICATED_USERNAME.getMessage());
+            String encodedUsername = personalDataEncoder.encode(username);
+            dto.setUsername(encodedUsername);
+
+            String password = dto.getPassword();
+            String encodedPassword= passwordEncoder.encode(password);
+            dto.setPassword(encodedPassword);
+
+            String email = dto.getEmail();
+            String encodedEmail = personalDataEncoder.encode(email);
+            dto.setEmail(encodedEmail);
+
+            String phoneNumber = dto.getPhoneNumber();
+            String encodedPhoneNumber = personalDataEncoder.encode(phoneNumber);
+            dto.setPhoneNumber(encodedPhoneNumber);
+
+            User user = new User(dto);
+            userRepository.save(user);
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new InternalServerErrorException(INTERNAL_SERVER_ERROR.getMessage());
+        }
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<SignInResponseDto> signIn(SignInRequestDto dto) {
+
+        String token = null;
+        String encodedUsername = null;
+
+        try {
+            String username = dto.getUsername();
+            encodedUsername = personalDataEncoder.encode(username);
+            User user = userRepository.findByUsername(encodedUsername);
+            if (user == null) throw new SignInFailedException(SIGN_IN_FAIL.getMessage());
+
+            String password = dto.getPassword();
+            String encodedPassword = user.getPassword();
+            boolean isMatched = passwordEncoder.matches(password, encodedPassword);
+            if (!isMatched) throw new SignInFailedException(SIGN_IN_FAIL.getMessage());
+
+            token = jwtProvider.createToken(username);
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new InternalServerErrorException(INTERNAL_SERVER_ERROR.getMessage());
+        }
+
+        redisDao.setValue("JWT_TOKEN:" + encodedUsername, token, Duration.ofMillis(jwtProvider.getTokenValidTime()));
+        SignInResponseDto signInResponseDto = new SignInResponseDto(token);
+
+        return ResponseEntity.status(HttpStatus.OK).body(signInResponseDto);
+    }
+
+    public ResponseEntity<ResponseDto> logout(Authentication authentication) {
+        String username = authentication.getPrincipal().toString();
+        String encodedUsername = null;
+
+        try {
+            encodedUsername = personalDataEncoder.encode(username);
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new InternalServerErrorException(INTERNAL_SERVER_ERROR.getMessage());
+        }
+
+        String key = "JWT_TOKEN:" + encodedUsername;
+        String token = redisDao.getValue(key);
+        if (token != null) {
+            redisDao.deleteValue(key);
+        }
+
+        return ResponseDto.success();
+    }
+
+    private String getCertificationNumber() {
+
+        StringBuilder certificationNumber = new StringBuilder();
+
+        for (int i = 0; i < 6; i++) {
+            certificationNumber.append((int) (Math.random() * 10));
+        }
+
+        return certificationNumber.toString();
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/service/implement/DeliveryServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/service/implement/DeliveryServiceImpl.java b/item-service/src/main/java/com/itemservice/web/service/implement/DeliveryServiceImpl.java
new file mode 100644
--- /dev/null	(date 1714032041963)
+++ b/item-service/src/main/java/com/itemservice/web/service/implement/DeliveryServiceImpl.java	(date 1714032041963)
@@ -0,0 +1,21 @@
+package com.itemservice.web.service.implement;
+
+import com.layby.domain.entity.Delivery;
+import com.layby.domain.repository.DeliveryRepository;
+import com.layby.web.service.DeliveryService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+@Service
+@RequiredArgsConstructor
+public class DeliveryServiceImpl implements DeliveryService {
+
+    private final DeliveryRepository deliveryRepository;
+
+    @Override
+    @Transactional
+    public void save(Delivery delivery) {
+        deliveryRepository.save(delivery);
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/service/implement/ItemServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/service/implement/ItemServiceImpl.java b/item-service/src/main/java/com/itemservice/web/service/implement/ItemServiceImpl.java
new file mode 100644
--- /dev/null	(date 1714032041965)
+++ b/item-service/src/main/java/com/itemservice/web/service/implement/ItemServiceImpl.java	(date 1714032041965)
@@ -0,0 +1,67 @@
+package com.itemservice.web.service.implement;
+
+import com.layby.domain.dto.request.ItemSaveRequestDto;
+import com.layby.domain.dto.response.ItemListResponseDto;
+import com.layby.domain.dto.response.ItemResponseDto;
+import com.layby.domain.dto.response.ResponseDto;
+import com.layby.domain.entity.Item;
+import com.layby.domain.repository.ItemRepository;
+import com.layby.web.service.ItemService;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.util.List;
+import java.util.stream.Collectors;
+
+
+@Slf4j
+@Transactional(readOnly = true)
+@RequiredArgsConstructor
+@Service
+public class ItemServiceImpl implements ItemService {
+
+    private final ItemRepository itemRepository;
+
+    @Override
+    public Item findByItemId(Long itemId) {
+        return itemRepository.findByItemId(itemId);
+    }
+
+    @Override
+    public Item findByItemName(String itemName) {
+        return itemRepository.findByItemName(itemName);
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> saveItem(ItemSaveRequestDto dto) {
+        Item item = new Item(dto);
+        itemRepository.save(item);
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    public ResponseEntity<List<ItemListResponseDto>> referItemList() {
+        List<ItemListResponseDto> itemList = itemRepository.findAll().stream()
+                .map(itemEntity -> {
+                    return ItemListResponseDto.builder()
+                            .itemName(itemEntity.getItemName())
+                            .price(itemEntity.getPrice())
+                            .build();
+                })
+                .collect(Collectors.toList());
+
+        return ResponseEntity.status(HttpStatus.OK).body(itemList);
+    }
+
+    @Override
+    public ResponseEntity<ItemResponseDto> referItem(Long itemId) {
+        Item item = itemRepository.findById(itemId).orElse(null);
+        return ResponseEntity.status(HttpStatus.OK).body(new ItemResponseDto(item));
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/service/implement/OrderItemServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/service/implement/OrderItemServiceImpl.java b/item-service/src/main/java/com/itemservice/web/service/implement/OrderItemServiceImpl.java
new file mode 100644
--- /dev/null	(date 1714032041969)
+++ b/item-service/src/main/java/com/itemservice/web/service/implement/OrderItemServiceImpl.java	(date 1714032041969)
@@ -0,0 +1,20 @@
+package com.itemservice.web.service.implement;
+
+import com.layby.domain.entity.OrderItem;
+import com.layby.domain.repository.OrderItemRepository;
+import com.layby.web.service.OrderItemService;
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+
+@Service
+@RequiredArgsConstructor
+public class OrderItemServiceImpl implements OrderItemService {
+
+    private final OrderItemRepository orderItemRepository;
+
+
+    @Override
+    public void save(OrderItem orderItem) {
+        orderItemRepository.save(orderItem);
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/service/implement/OrderServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/service/implement/OrderServiceImpl.java b/item-service/src/main/java/com/itemservice/web/service/implement/OrderServiceImpl.java
new file mode 100644
--- /dev/null	(date 1714032041972)
+++ b/item-service/src/main/java/com/itemservice/web/service/implement/OrderServiceImpl.java	(date 1714032041972)
@@ -0,0 +1,90 @@
+package com.itemservice.web.service.implement;
+
+import com.layby.domain.common.ErrorCode;
+import com.layby.domain.dto.response.OrderStatusResponseDto;
+import com.layby.domain.dto.response.ResponseDto;
+import com.layby.domain.entity.Order;
+import com.layby.domain.entity.User;
+import com.layby.domain.repository.OrderRepository;
+import com.layby.web.exception.InternalServerErrorException;
+import com.layby.web.service.OrderService;
+import com.layby.web.service.UserService;
+import com.layby.web.util.AES256;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.Authentication;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.util.ArrayList;
+import java.util.List;
+
+@Service
+@RequiredArgsConstructor
+public class OrderServiceImpl implements OrderService {
+
+    private final OrderRepository orderRepository;
+    private final UserService userService;
+    private final AES256 personalDataEncoder;
+
+    @Override
+    public void save(Order order) {
+        orderRepository.save(order);
+    }
+
+    @Override
+    public Order findByOrderId(Long orderId) {
+        return orderRepository.findByOrderId(orderId);
+    }
+
+    @Override
+    public List<Order> findAtferRefund() {
+        return orderRepository.findAfterRefund();
+    }
+
+    @Override
+    public ResponseEntity<List<OrderStatusResponseDto>> referOrdersStatus(Authentication authentication) {
+        String username = authentication.getPrincipal().toString();
+        String encodedUsername = null;
+
+        try {
+            encodedUsername = personalDataEncoder.encode(username);
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new InternalServerErrorException(ErrorCode.INTERNAL_SERVER_ERROR.getMessage());
+        }
+
+        // 현재 인증되어진 유저의 전체 주문 목록을 조회해서
+        User user = userService.findByUsername(encodedUsername);
+        List<Order> allByUser = orderRepository.findAllByUserIdWithOrderItemAndItem(user.getUserId());
+        List<OrderStatusResponseDto> responseBody = new ArrayList<>();
+
+        // Dto로 변환해서
+        for (Order order : allByUser) {
+            OrderStatusResponseDto orderStatusResponseDto = Order.convertToStatusDto(order);
+            responseBody.add(orderStatusResponseDto);
+        }
+
+        // 반환한다.
+        return ResponseEntity.status(HttpStatus.OK).body(responseBody);
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> cancelOrder(Long orderId) {
+        Order order = orderRepository.findByOrderId(orderId);
+        order.cancel();
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> refundOrder(Long orderId) {
+        Order order = orderRepository.findByOrderIdWithDelivery(orderId);
+        order.refund();
+
+        return ResponseDto.success();
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/service/implement/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/service/implement/UserServiceImpl.java b/item-service/src/main/java/com/itemservice/web/service/implement/UserServiceImpl.java
new file mode 100644
--- /dev/null	(date 1714032041975)
+++ b/item-service/src/main/java/com/itemservice/web/service/implement/UserServiceImpl.java	(date 1714032041975)
@@ -0,0 +1,99 @@
+package com.itemservice.web.service.implement;
+
+
+import com.layby.domain.common.ErrorCode;
+import com.layby.domain.dto.request.PhoneNumberUpdateRequestDto;
+import com.layby.domain.dto.request.UserPasswordUpdateRequestDto;
+import com.layby.domain.dto.response.ResponseDto;
+import com.layby.domain.dto.response.UserResponseDto;
+import com.layby.domain.entity.User;
+import com.layby.domain.repository.UserRepository;
+import com.layby.web.exception.AES256Exception;
+import com.layby.web.service.UserService;
+import com.layby.web.util.AES256;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.ResponseEntity;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+@Slf4j
+@Transactional(readOnly = true)
+@RequiredArgsConstructor
+@Service
+public class UserServiceImpl implements UserService {
+
+    private final UserRepository userRepository;
+    private final AES256 personalDataEncoder;
+
+
+    @Override
+    public User findByUserId(Long userId) {
+        return userRepository.findByUserId(userId);
+    }
+
+    @Override
+    public UserResponseDto referUser(Long userId) {
+        User user = userRepository.findByUserId(userId);
+
+        String encodedPhoneNumber = user.getPhoneNumber();
+        String phoneNumber = null;
+
+        log.info("encodedPhoneNumber = {}", encodedPhoneNumber);
+
+        try {
+            phoneNumber = personalDataEncoder.decode(encodedPhoneNumber);
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new AES256Exception(ErrorCode.INTERNAL_SERVER_ERROR.getMessage());
+        }
+
+        return new UserResponseDto(phoneNumber);
+    }
+
+    @Override
+    public User findByUsername(String username) {
+        return userRepository.findByUsername(username);
+    }
+
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> updatePhoneNumber(Long userId, PhoneNumberUpdateRequestDto dto) {
+        User foundUser = userRepository.findByUserId(userId);
+
+        String phoneNumber = dto.getPhoneNumber();
+        String encodedPhoneNumber = null;
+
+        try {
+            encodedPhoneNumber  = personalDataEncoder.encode(phoneNumber);
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new AES256Exception(ErrorCode.INTERNAL_SERVER_ERROR.getMessage());
+        }
+
+        foundUser.updatePhoneNumber(encodedPhoneNumber);
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> updatePassword(Long userId, UserPasswordUpdateRequestDto dto) {
+        User foundUser = userRepository.findByUserId(userId);
+
+        String password = dto.getPassword();
+        String encodedPassword = null;
+
+        try {
+            encodedPassword = personalDataEncoder.encode(password);
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new AES256Exception(ErrorCode.INTERNAL_SERVER_ERROR.getMessage());
+        }
+
+        foundUser.updatePassword(encodedPassword);
+
+        return ResponseDto.success();
+    }
+}
\ No newline at end of file
Index: item-service/src/main/java/com/itemservice/web/service/implement/WishItemServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/service/implement/WishItemServiceImpl.java b/item-service/src/main/java/com/itemservice/web/service/implement/WishItemServiceImpl.java
new file mode 100644
--- /dev/null	(date 1714032041978)
+++ b/item-service/src/main/java/com/itemservice/web/service/implement/WishItemServiceImpl.java	(date 1714032041978)
@@ -0,0 +1,216 @@
+package com.itemservice.web.service.implement;
+
+import com.layby.domain.common.ErrorCode;
+import com.layby.domain.dto.request.WishItemSaveRequestDto;
+import com.layby.domain.dto.response.ResponseDto;
+import com.layby.domain.dto.response.WishItemResponseDto;
+import com.layby.domain.dto.response.WishListReferResponseDto;
+import com.layby.domain.entity.*;
+import com.layby.domain.repository.WishItemRepository;
+import com.layby.web.exception.DatabaseErrorException;
+import com.layby.web.exception.InternalServerErrorException;
+import com.layby.web.service.*;
+import com.layby.web.util.AES256;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.Authentication;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.util.ArrayList;
+import java.util.List;
+
+@Service @Slf4j
+@RequiredArgsConstructor
+@Transactional(readOnly = true)
+public class WishItemServiceImpl implements WishItemService {
+
+    private final WishItemRepository wishItemRepository;
+    private final ItemService itemService;
+    private final UserService userService;
+    private final OrderService orderService;
+    private final AddressService addressService;
+    private final DeliveryService deliveryService;
+    private final AES256 personalDataEncoder;
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> save(WishItem wishItem) {
+        try {
+            wishItemRepository.save(wishItem);
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new DatabaseErrorException(ErrorCode.DATABASE_ERROR.getMessage());
+        }
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    public WishItem findByWishItemId(Long wishItemId) {
+        return wishItemRepository.findByWishItemId(wishItemId);
+    }
+
+    @Override
+    public List<WishItem> findAllByUser(User user) {
+        return wishItemRepository.findAllByUser(user);
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> increaseCount(Long wishItemId) {
+        WishItem wishItem = findByWishItemId(wishItemId);
+        wishItem.increaseCount();
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> decreaseCount(Long wishItemId) {
+        WishItem wishItem = findByWishItemId(wishItemId);
+        wishItem.decreaseCount();
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    public ResponseEntity<ResponseDto> delete(Long wishItemId) {
+        WishItem forDelete = findByWishItemId(wishItemId);
+        wishItemRepository.delete(forDelete);
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> register(Long itemId, Authentication authentication, WishItemSaveRequestDto dto) {
+
+        String username = authentication.getPrincipal().toString(); // 로그인 된 유저의 네임을 가져온다
+        String encodedUsername = null;
+        try {
+            encodedUsername = personalDataEncoder.encode(username);
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw new InternalServerErrorException(ErrorCode.INTERNAL_SERVER_ERROR.getMessage());
+        }
+
+        User user = userService.findByUsername(encodedUsername);
+        Item item = itemService.findByItemId(itemId);
+
+
+        WishItem wishItem = WishItem.builder()
+                .item(item)
+                .price(item.getPrice())
+                .count(dto.getCount())
+                .user(user)
+                .build();
+
+        wishItemRepository.save(wishItem);
+
+        return ResponseDto.success();
+    }
+
+    @Override
+    public ResponseEntity<WishListReferResponseDto> referWishList(Long userId) {
+        User user = userService.findByUserId(userId);
+
+        // 사용자의 위시 리스트에 담긴 위시 아이템 리스트를 가져온다
+        List<WishItem> allByUser = wishItemRepository.findAllByUser(user);
+
+        // 가져온 위시 아이템 리스트를 응답 Dto로 변환한다.
+        WishListReferResponseDto wishlistReferResponseDto = new WishListReferResponseDto(allByUser);
+
+        return ResponseEntity.status(HttpStatus.OK).body(wishlistReferResponseDto);
+    }
+
+    /**
+     purchaseWishList 흐름
+     1. 클라이언트가 위시리스트에서 구매할 위시 아이템을 고른 후 결제창으로 넘어간다.
+     2. 결제창에서 이번에 배송받을 주소 정보를 선택한다.
+     3. user, delivery, orderItems 로 주문을 생성해 저장한다.
+     */
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> purchaseWishList(
+            Long userId, Long addressId, List<WishItemResponseDto> dtos
+    ) {
+        User user = userService.findByUserId(userId);
+        Address address = addressService.findByAddressId(addressId);
+        List<OrderItem> orderItems = new ArrayList<>(); // 오더에 매핑할 오더아이템 리스트
+
+        // 사용자가 고른 위시 아이템들을 orderItems에 넣는 루프
+        for (WishItemResponseDto dto : dtos) {
+
+            // 선택한 수량만큼 재고를 감소시킨다.
+            Item item = itemService.findByItemId(dto.getItemId());
+            item.removeStock(dto.getCount());
+
+            // 선택한 위시 아이템을 가져온다.
+            WishItem wishItem = findByWishItemId(dto.getWishItemId());
+
+            // 구입 후 위시 리스트에서 삭제된다.
+            wishItemRepository.delete(wishItem);
+
+            // 그 위시 아이템을 오더 아이템으로 변환한다.
+            OrderItem orderItem = OrderItem.convertFromWishItem(wishItem);
+
+            // 그 오더아이템을 오더아이템 리스트에 넣는다.
+            orderItems.add(orderItem);
+        }
+
+        // 사용자가 선택한 주소값으로 Delivery를 생성한다.
+        Delivery delivery = new Delivery(address);
+
+        // 해당 결제에 대한 오더를 생성한 후 저장한다.
+        Order order = Order.createOrder(user, delivery, orderItems);
+        orderService.save(order);
+
+        return ResponseDto.success();
+    }
+
+    /**
+     purchaseWishListTest 흐름
+     1. 클라이언트가 위시리스트에서 구입할 품목들만 선택하는 것 없이 위시리스트의 아이템들을 모두 구매한다.
+     2. 사용자가 갖고 있는 주소 중 처음으로 조회되는 곳으로 주문한다.
+     3. user, delivery, orderItems 로 주문을 생성해 저장한다.
+     */
+    @Override
+    @Transactional
+    public ResponseEntity<ResponseDto> purchaseWishListTest(Long userId) {
+        List<WishItem> wishItems = wishItemRepository.findAllByUserIdWithItem(userId);
+        User user = userService.findByUserId(userId);
+        Address address = addressService.findAllByUser(user).get(0);
+        List<OrderItem> orderItems = new ArrayList<>(); // 오더에 매핑할 오더아이템 리스트
+
+        // 각 상품의 재고를 위시리스트에 담은 갯수만큼 감소시키고, 처리가 끝난 상품은 위시리스트에서 제거한다.
+        for (WishItem wishItem : wishItems) {
+
+            // 선택한 수량만큼 재고를 감소시킨다.
+            Item item = itemService.findByItemId(wishItem.getItem().getItemId());
+            item.removeStock(wishItem.getCount());
+
+            // 구입한 상품은 위시 리스트에서 삭제된다.
+            wishItemRepository.delete(wishItem);
+
+            // 위시 아이템을 오더 아이템으로 변환한다.
+            OrderItem orderItem = OrderItem.convertFromWishItem(wishItem);
+
+            // 그 오더아이템을 오더아이템 리스트에 넣는다.
+            orderItems.add(orderItem);
+        }
+
+        // 사용자가 선택한 주소값으로 Delivery를 생성한다.
+        Delivery delivery = new Delivery(address);
+
+        // 해당 결제에 대한 오더를 생성한 후 배송 정보에 매핑하고
+        Order order = Order.createOrder(user, delivery, orderItems);
+
+        deliveryService.save(delivery);
+        orderService.save(order);
+
+        return ResponseDto.success();
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/util/AES256.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/util/AES256.java b/item-service/src/main/java/com/itemservice/web/util/AES256.java
new file mode 100644
--- /dev/null	(date 1714032041981)
+++ b/item-service/src/main/java/com/itemservice/web/util/AES256.java	(date 1714032041981)
@@ -0,0 +1,37 @@
+package com.itemservice.web.util;
+
+import org.springframework.stereotype.Component;
+
+import javax.crypto.Cipher;
+import javax.crypto.spec.IvParameterSpec;
+import javax.crypto.spec.SecretKeySpec;
+import java.util.Base64;
+
+@Component
+public class AES256 {
+
+    public static String alg = "AES/CBC/PKCS5Padding";
+    private final String key = "01234567890123456789012345678901";
+    private final String iv = key.substring(0, 16); // 16byte
+
+    public String encode(String text) throws Exception {
+        Cipher cipher = Cipher.getInstance(alg);
+        SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(), "AES");
+        IvParameterSpec ivParamSpec = new IvParameterSpec(iv.getBytes());
+        cipher.init(Cipher.ENCRYPT_MODE, keySpec, ivParamSpec);
+
+        byte[] encrypted = cipher.doFinal(text.getBytes("UTF-8"));
+        return Base64.getEncoder().encodeToString(encrypted);
+    }
+
+    public String decode(String cipherText) throws Exception {
+        Cipher cipher = Cipher.getInstance(alg);
+        SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(), "AES");
+        IvParameterSpec ivParamSpec = new IvParameterSpec(iv.getBytes());
+        cipher.init(Cipher.DECRYPT_MODE, keySpec, ivParamSpec);
+
+        byte[] decodedBytes = Base64.getDecoder().decode(cipherText);
+        byte[] decrypted = cipher.doFinal(decodedBytes);
+        return new String(decrypted, "UTF-8");
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/util/Scheduler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/util/Scheduler.java b/item-service/src/main/java/com/itemservice/web/util/Scheduler.java
new file mode 100644
--- /dev/null	(date 1714032041984)
+++ b/item-service/src/main/java/com/itemservice/web/util/Scheduler.java	(date 1714032041984)
@@ -0,0 +1,44 @@
+package com.itemservice.web.util;
+
+import com.layby.web.service.OrderService;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.stereotype.Component;
+
+@Slf4j
+@Component
+@RequiredArgsConstructor
+public class Scheduler {
+
+    private final OrderService orderService;
+
+    // 반품 후 재고 처리를 하는 로직
+//    @Scheduled(fixedRate = 10000)
+//    @Transactional
+//    public void inventoryProcessAfterRefund() throws InterruptedException {
+//
+//        // 반품 신청 상태인 오더들을 조회해온 후
+//        List<Order> orders = orderService.findAtferRefund();
+//
+//        // 만약 없으면 여기서 로직 종료
+//        if (orders.isEmpty()) return;
+//
+//        // 현재 시간으로 부터
+//        LocalDate now = LocalDate.now();
+//
+//        for (Order order : orders) {
+//            // 반품 신청한 날짜의 간격이 1일 이상이면
+//            LocalDate refundRequestDate = order.getRefundRequestDate();
+//            Period period = Period.between(refundRequestDate, now);
+//
+//            if (period.getDays() >= 1) {
+//                // 반품 완료로 상태를 바꾸고 재고를 채운다.
+//                order.updateStatus(OrderStatus.REFUND_COMPLETE);
+//                List<OrderItem> orderItems = order.getOrderItems();
+//                for (OrderItem orderItem : orderItems) {
+//                    orderItem.cancel();
+//                }
+//            }
+//        }
+//    }
+}
Index: item-service/src/main/java/com/itemservice/web/exception/DatabaseErrorException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/exception/DatabaseErrorException.java b/item-service/src/main/java/com/itemservice/web/exception/DatabaseErrorException.java
new file mode 100644
--- /dev/null	(date 1714032041880)
+++ b/item-service/src/main/java/com/itemservice/web/exception/DatabaseErrorException.java	(date 1714032041880)
@@ -0,0 +1,19 @@
+package com.itemservice.web.exception;
+
+public class DatabaseErrorException extends RuntimeException {
+    public DatabaseErrorException() {
+        super();
+    }
+
+    public DatabaseErrorException(String message) {
+        super(message);
+    }
+
+    public DatabaseErrorException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public DatabaseErrorException(Throwable cause) {
+        super(cause);
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/exception/DeliveryCancelFailedException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/exception/DeliveryCancelFailedException.java b/item-service/src/main/java/com/itemservice/web/exception/DeliveryCancelFailedException.java
new file mode 100644
--- /dev/null	(date 1714032041882)
+++ b/item-service/src/main/java/com/itemservice/web/exception/DeliveryCancelFailedException.java	(date 1714032041882)
@@ -0,0 +1,19 @@
+package com.itemservice.web.exception;
+
+public class DeliveryCancelFailedException extends RuntimeException {
+    public DeliveryCancelFailedException() {
+        super();
+    }
+
+    public DeliveryCancelFailedException(String message) {
+        super(message);
+    }
+
+    public DeliveryCancelFailedException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public DeliveryCancelFailedException(Throwable cause) {
+        super(cause);
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/exception/DuplicatedUsernameException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/exception/DuplicatedUsernameException.java b/item-service/src/main/java/com/itemservice/web/exception/DuplicatedUsernameException.java
new file mode 100644
--- /dev/null	(date 1714032041886)
+++ b/item-service/src/main/java/com/itemservice/web/exception/DuplicatedUsernameException.java	(date 1714032041886)
@@ -0,0 +1,19 @@
+package com.itemservice.web.exception;
+
+public class DuplicatedUsernameException extends RuntimeException {
+    public DuplicatedUsernameException() {
+        super();
+    }
+
+    public DuplicatedUsernameException(String message) {
+        super(message);
+    }
+
+    public DuplicatedUsernameException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public DuplicatedUsernameException(Throwable cause) {
+        super(cause);
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/exception/InternalServerErrorException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/exception/InternalServerErrorException.java b/item-service/src/main/java/com/itemservice/web/exception/InternalServerErrorException.java
new file mode 100644
--- /dev/null	(date 1714032041889)
+++ b/item-service/src/main/java/com/itemservice/web/exception/InternalServerErrorException.java	(date 1714032041889)
@@ -0,0 +1,19 @@
+package com.itemservice.web.exception;
+
+public class InternalServerErrorException extends RuntimeException {
+    public InternalServerErrorException() {
+        super();
+    }
+
+    public InternalServerErrorException(String message) {
+        super(message);
+    }
+
+    public InternalServerErrorException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public InternalServerErrorException(Throwable cause) {
+        super(cause);
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/exception/MailFailedException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/exception/MailFailedException.java b/item-service/src/main/java/com/itemservice/web/exception/MailFailedException.java
new file mode 100644
--- /dev/null	(date 1714032041892)
+++ b/item-service/src/main/java/com/itemservice/web/exception/MailFailedException.java	(date 1714032041892)
@@ -0,0 +1,19 @@
+package com.itemservice.web.exception;
+
+public class MailFailedException extends RuntimeException {
+    public MailFailedException() {
+        super();
+    }
+
+    public MailFailedException(String message) {
+        super(message);
+    }
+
+    public MailFailedException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public MailFailedException(Throwable cause) {
+        super(cause);
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/exception/NotEnoughStockException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/exception/NotEnoughStockException.java b/item-service/src/main/java/com/itemservice/web/exception/NotEnoughStockException.java
new file mode 100644
--- /dev/null	(date 1714032041894)
+++ b/item-service/src/main/java/com/itemservice/web/exception/NotEnoughStockException.java	(date 1714032041894)
@@ -0,0 +1,19 @@
+package com.itemservice.web.exception;
+
+public class NotEnoughStockException extends RuntimeException {
+    public NotEnoughStockException() {
+        super();
+    }
+
+    public NotEnoughStockException(String message) {
+        super(message);
+    }
+
+    public NotEnoughStockException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public NotEnoughStockException(Throwable cause) {
+        super(cause);
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/exception/RefundFailedException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/exception/RefundFailedException.java b/item-service/src/main/java/com/itemservice/web/exception/RefundFailedException.java
new file mode 100644
--- /dev/null	(date 1714032041897)
+++ b/item-service/src/main/java/com/itemservice/web/exception/RefundFailedException.java	(date 1714032041897)
@@ -0,0 +1,19 @@
+package com.itemservice.web.exception;
+
+public class RefundFailedException extends RuntimeException {
+    public RefundFailedException() {
+        super();
+    }
+
+    public RefundFailedException(String message) {
+        super(message);
+    }
+
+    public RefundFailedException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public RefundFailedException(Throwable cause) {
+        super(cause);
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/exception/SignInFailedException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/exception/SignInFailedException.java b/item-service/src/main/java/com/itemservice/web/exception/SignInFailedException.java
new file mode 100644
--- /dev/null	(date 1714032041900)
+++ b/item-service/src/main/java/com/itemservice/web/exception/SignInFailedException.java	(date 1714032041900)
@@ -0,0 +1,19 @@
+package com.itemservice.web.exception;
+
+public class SignInFailedException extends RuntimeException {
+    public SignInFailedException() {
+        super();
+    }
+
+    public SignInFailedException(String message) {
+        super(message);
+    }
+
+    public SignInFailedException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public SignInFailedException(Throwable cause) {
+        super(cause);
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/exception/ValidationFailedException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/exception/ValidationFailedException.java b/item-service/src/main/java/com/itemservice/web/exception/ValidationFailedException.java
new file mode 100644
--- /dev/null	(date 1714032041903)
+++ b/item-service/src/main/java/com/itemservice/web/exception/ValidationFailedException.java	(date 1714032041903)
@@ -0,0 +1,19 @@
+package com.itemservice.web.exception;
+
+public class ValidationFailedException extends RuntimeException {
+    public ValidationFailedException() {
+        super();
+    }
+
+    public ValidationFailedException(String message) {
+        super(message);
+    }
+
+    public ValidationFailedException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public ValidationFailedException(Throwable cause) {
+        super(cause);
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/filter/JwtAuthenticationFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/filter/JwtAuthenticationFilter.java b/item-service/src/main/java/com/itemservice/web/filter/JwtAuthenticationFilter.java
new file mode 100644
--- /dev/null	(date 1714032041907)
+++ b/item-service/src/main/java/com/itemservice/web/filter/JwtAuthenticationFilter.java	(date 1714032041907)
@@ -0,0 +1,97 @@
+package com.itemservice.web.filter;
+
+import com.layby.domain.common.RedisDao;
+import com.layby.domain.entity.User;
+import com.layby.domain.repository.UserRepository;
+import com.layby.web.jwt.JwtProvider;
+import com.layby.web.util.AES256;
+import jakarta.servlet.FilterChain;
+import jakarta.servlet.ServletException;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
+import lombok.RequiredArgsConstructor;
+import org.springframework.security.authentication.AbstractAuthenticationToken;
+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
+import org.springframework.security.core.GrantedAuthority;
+import org.springframework.security.core.authority.SimpleGrantedAuthority;
+import org.springframework.security.core.context.SecurityContext;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
+import org.springframework.stereotype.Component;
+import org.springframework.util.StringUtils;
+import org.springframework.web.filter.OncePerRequestFilter;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+@Component
+@RequiredArgsConstructor
+public class JwtAuthenticationFilter extends OncePerRequestFilter {
+
+    private final JwtProvider jwtProvider;
+    private final UserRepository userRepository;
+    private final AES256 personalDataEncoder;
+
+    private final RedisDao redisDao;
+
+    @Override
+    protected void doFilterInternal(
+            HttpServletRequest request, HttpServletResponse response, FilterChain filterChain
+    ) throws ServletException, IOException {
+
+        try {
+            String token = parseBearerToken(request);
+            if (token == null) { // 토큰이 없으면
+                filterChain.doFilter(request, response); // 다음 필터로 넘어가게 한다.
+                return;
+            }
+
+            String username = jwtProvider.validate(token);
+            if (username == null) { // 토큰에 유저 정보가 없으면
+                filterChain.doFilter(request, response); // 다음 필터로 넘어가게 한다.
+                return;
+            }
+
+            String encodedUsername = personalDataEncoder.encode(username);
+            String key = "JWT_TOKEN:" + encodedUsername;
+            String storedToken = redisDao.getValue(key);
+
+            // 로그인 여부 체크
+            if (redisDao.hasKey(key) && storedToken.equals(token)) {
+                User user = userRepository.findByUsername(encodedUsername);
+                String role = user.getRole().getKey(); // role : ROLE_USER, ROLE_ADMIN
+
+                List<GrantedAuthority> authorities = new ArrayList<>();
+                authorities.add(new SimpleGrantedAuthority(role));
+
+                SecurityContext securityContext = SecurityContextHolder.createEmptyContext();
+                AbstractAuthenticationToken authenticationToken =
+                        new UsernamePasswordAuthenticationToken(username, null, authorities);
+                authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
+
+                securityContext.setAuthentication(authenticationToken);
+                SecurityContextHolder.setContext(securityContext);
+            }
+
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+        filterChain.doFilter(request, response);
+    }
+
+    private String parseBearerToken(HttpServletRequest request) {
+
+        String authorization = request.getHeader("Authorization");
+
+        boolean hasAuthorization = StringUtils.hasText(authorization);
+        if (!hasAuthorization) return null;
+
+        boolean isBearer = authorization.startsWith("Bearer ");
+        if (!isBearer) return null;
+
+        String token = authorization.substring(7);
+        return token;
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/handler/RestResponseExceptionHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/handler/RestResponseExceptionHandler.java b/item-service/src/main/java/com/itemservice/web/handler/RestResponseExceptionHandler.java
new file mode 100644
--- /dev/null	(date 1714032041910)
+++ b/item-service/src/main/java/com/itemservice/web/handler/RestResponseExceptionHandler.java	(date 1714032041910)
@@ -0,0 +1,55 @@
+package com.itemservice.web.handler;
+
+import com.layby.domain.dto.ErrorDto;
+import com.layby.web.exception.*;
+import org.springframework.security.access.AccessDeniedException;
+import org.springframework.web.bind.annotation.ExceptionHandler;
+import org.springframework.web.bind.annotation.ResponseBody;
+import org.springframework.web.bind.annotation.ResponseStatus;
+import org.springframework.web.bind.annotation.RestControllerAdvice;
+import org.springframework.web.context.request.WebRequest;
+import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;
+
+import static org.springframework.http.HttpStatus.*;
+
+@RestControllerAdvice
+public class RestResponseExceptionHandler extends ResponseEntityExceptionHandler {
+
+    @ResponseStatus(INTERNAL_SERVER_ERROR)
+    @ExceptionHandler(value = { AES256Exception.class, DatabaseErrorException.class,
+            InternalServerErrorException.class })
+    @ResponseBody
+    protected ErrorDto interalServerError(RuntimeException ex, WebRequest request) {
+        return new ErrorDto(INTERNAL_SERVER_ERROR.value(), ex.getMessage());
+    }
+
+    @ResponseStatus(FORBIDDEN)
+    @ExceptionHandler(value = { AccessDeniedException.class })
+    @ResponseBody
+    protected ErrorDto forbidden(RuntimeException ex, WebRequest request) {
+        return new ErrorDto(FORBIDDEN.value(), ex.getMessage());
+    }
+
+    @ResponseStatus(UNAUTHORIZED)
+    @ExceptionHandler(value = { SignInFailedException.class, CertificationFailedException.class })
+    @ResponseBody
+    protected ErrorDto unauthorized(RuntimeException ex, WebRequest request) {
+        return new ErrorDto(UNAUTHORIZED.value(), ex.getMessage());
+    }
+
+
+    @ResponseStatus(BAD_REQUEST)
+    @ExceptionHandler(value = { DuplicatedUsernameException.class, MailFailedException.class })
+    @ResponseBody
+    protected ErrorDto badRequest(RuntimeException ex, WebRequest request) {
+        return new ErrorDto(BAD_REQUEST.value(), ex.getMessage());
+    }
+
+    @ResponseStatus(CONFLICT)
+    @ExceptionHandler(value = { NotEnoughStockException.class, DeliveryCancelFailedException.class,
+            RefundFailedException.class, NotEnoughStockException.class, DeliveryCancelFailedException.class })
+    @ResponseBody
+    protected ErrorDto conflict(RuntimeException ex, WebRequest request) {
+        return new ErrorDto(CONFLICT.value(), ex.getMessage());
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/handler/ValidationExceptionHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/handler/ValidationExceptionHandler.java b/item-service/src/main/java/com/itemservice/web/handler/ValidationExceptionHandler.java
new file mode 100644
--- /dev/null	(date 1714032041914)
+++ b/item-service/src/main/java/com/itemservice/web/handler/ValidationExceptionHandler.java	(date 1714032041914)
@@ -0,0 +1,21 @@
+package com.itemservice.web.handler;
+
+import com.layby.domain.dto.ErrorDto;
+import org.springframework.http.converter.HttpMessageNotReadableException;
+import org.springframework.web.bind.MethodArgumentNotValidException;
+import org.springframework.web.bind.annotation.ExceptionHandler;
+import org.springframework.web.bind.annotation.ResponseStatus;
+import org.springframework.web.bind.annotation.RestControllerAdvice;
+
+import static com.layby.domain.common.ErrorCode.*;
+import static org.springframework.http.HttpStatus.UNAUTHORIZED;
+
+@RestControllerAdvice
+public class ValidationExceptionHandler {
+
+    @ResponseStatus(UNAUTHORIZED)
+    @ExceptionHandler({ MethodArgumentNotValidException.class, HttpMessageNotReadableException.class })
+    public ErrorDto validationExceptionHandler(Exception e) {
+        return new ErrorDto(UNAUTHORIZED.value(), VALIDATION_FAIL.getMessage());
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/jwt/JwtProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/jwt/JwtProvider.java b/item-service/src/main/java/com/itemservice/web/jwt/JwtProvider.java
new file mode 100644
--- /dev/null	(date 1714032041916)
+++ b/item-service/src/main/java/com/itemservice/web/jwt/JwtProvider.java	(date 1714032041916)
@@ -0,0 +1,69 @@
+package com.itemservice.web.jwt;
+
+import io.jsonwebtoken.Jwts;
+import io.jsonwebtoken.SignatureAlgorithm;
+import io.jsonwebtoken.io.Decoders;
+import io.jsonwebtoken.security.Keys;
+import lombok.Getter;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.InitializingBean;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.stereotype.Component;
+
+import java.security.Key;
+import java.time.Instant;
+import java.time.temporal.ChronoUnit;
+import java.util.Date;
+
+@Slf4j
+@Component
+public class JwtProvider implements InitializingBean {
+
+    private final String secretKey;
+    private Key key;
+
+    @Getter
+    private final long tokenValidTime = 60 * 60 * 1000L;
+
+    public JwtProvider(
+            @Value("${jwt.secret-key}") String secretKey) {
+        this.secretKey = secretKey;
+    }
+
+    @Override
+    public void afterPropertiesSet() {
+        byte[] keyBytes = Decoders.BASE64.decode(secretKey);
+        this.key = Keys.hmacShaKeyFor(keyBytes);
+    }
+
+    public String createToken(String username) {
+
+        Date expiredDate = Date.from(Instant.now().plus(1, ChronoUnit.HOURS));
+
+        return Jwts.builder()
+                .signWith(key, SignatureAlgorithm.HS512)
+                .setSubject(username).setIssuedAt(new Date())
+                .setExpiration(expiredDate)
+                .compact();
+    }
+
+    public String validate(String jwt) {
+
+        String subject = null;
+
+        try {
+            subject = Jwts.parserBuilder()
+                    .setSigningKey(key)
+                    .build()
+                    .parseClaimsJws(jwt)
+                    .getBody()
+                    .getSubject();
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            return null;
+        }
+
+        return subject;
+    }
+}
\ No newline at end of file
Index: item-service/src/main/java/com/itemservice/web/provider/EmailProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/provider/EmailProvider.java b/item-service/src/main/java/com/itemservice/web/provider/EmailProvider.java
new file mode 100644
--- /dev/null	(date 1714032041920)
+++ b/item-service/src/main/java/com/itemservice/web/provider/EmailProvider.java	(date 1714032041920)
@@ -0,0 +1,47 @@
+package com.itemservice.web.provider;
+
+import jakarta.mail.MessagingException;
+import jakarta.mail.internet.MimeMessage;
+import lombok.RequiredArgsConstructor;
+import org.springframework.mail.javamail.JavaMailSender;
+import org.springframework.mail.javamail.MimeMessageHelper;
+import org.springframework.stereotype.Component;
+
+@RequiredArgsConstructor
+@Component
+public class EmailProvider {
+
+    private final JavaMailSender javaMailSender;
+    private final String SUBJECT = "[예약 구매 서비스] 인증 메일입니다.";
+
+    public boolean sendCertificationMail(String email, String certificationNumber) {
+
+        try {
+            MimeMessage message = javaMailSender.createMimeMessage();
+            MimeMessageHelper messageHelper = new MimeMessageHelper(message, true);
+
+            String htmlContent = getCertificationMessage(certificationNumber);
+
+            messageHelper.setTo(email);
+            messageHelper.setSubject(SUBJECT);
+            messageHelper.setText(htmlContent, true);
+
+            javaMailSender.send(message);
+
+        } catch (MessagingException e) {
+            e.printStackTrace();
+            return false;
+        }
+
+        return true;
+    }
+
+    private String getCertificationMessage(String certificationNumber) {
+
+        StringBuilder certificationMessage = new StringBuilder();
+        certificationMessage.append("<h1 style='text-align: center;'>[예약 구매 서비스] 인증 메일</h1>");
+        certificationMessage.append("<h3 style='text-align: center;'>인증 코드 : <strong style='font-size: 32px; letter-spacing: 8px;'>")
+                .append(certificationNumber).append("</strong><h3>");
+        return certificationMessage.toString();
+    }
+}
Index: item-service/src/main/java/com/itemservice/web/service/AddressService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/service/AddressService.java b/item-service/src/main/java/com/itemservice/web/service/AddressService.java
new file mode 100644
--- /dev/null	(date 1714032041924)
+++ b/item-service/src/main/java/com/itemservice/web/service/AddressService.java	(date 1714032041924)
@@ -0,0 +1,23 @@
+package com.itemservice.web.service;
+
+import com.layby.domain.dto.request.AddressRequestDto;
+import com.layby.domain.dto.response.AddressListReferResponseDto;
+import com.layby.domain.dto.response.ResponseDto;
+import com.layby.domain.entity.Address;
+import com.layby.domain.entity.User;
+import org.springframework.http.ResponseEntity;
+
+import java.util.List;
+
+public interface AddressService {
+
+    Address findByAddressId(Long addressId);
+
+    List<Address> findAllByUser(User user);
+
+    ResponseEntity<ResponseDto> updateAddress(Long addressId, AddressRequestDto dto);
+
+    ResponseEntity<ResponseDto> addAddress(String username, AddressRequestDto dto);
+
+    ResponseEntity<AddressListReferResponseDto> referAddressListByUserId(Long userId);
+}
Index: item-service/src/main/java/com/itemservice/web/service/AuthService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/service/AuthService.java b/item-service/src/main/java/com/itemservice/web/service/AuthService.java
new file mode 100644
--- /dev/null	(date 1714032041927)
+++ b/item-service/src/main/java/com/itemservice/web/service/AuthService.java	(date 1714032041927)
@@ -0,0 +1,22 @@
+package com.itemservice.web.service;
+
+import com.layby.domain.dto.request.auth.*;
+import com.layby.domain.dto.response.ResponseDto;
+import com.layby.domain.dto.response.auth.*;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.Authentication;
+
+public interface AuthService {
+
+    ResponseEntity<ResponseDto> usernameCheck(UsernameCheckRequestDto dto);
+
+    ResponseEntity<ResponseDto> emailCertification(EmailCertificationRequestDto dto);
+
+    ResponseEntity<ResponseDto> checkCertification(CheckCertificationRequestDto dto);
+
+    ResponseEntity<ResponseDto> signUp(SignUpRequestDto dto);
+
+    ResponseEntity<SignInResponseDto> signIn(SignInRequestDto dto);
+
+    ResponseEntity<ResponseDto> logout(Authentication authentication);
+}
Index: order-service/src/main/java/com/orderservice/domain/dto/ErrorDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/dto/ErrorDto.java b/order-service/src/main/java/com/orderservice/domain/dto/ErrorDto.java
new file mode 100644
--- /dev/null	(date 1714032042048)
+++ b/order-service/src/main/java/com/orderservice/domain/dto/ErrorDto.java	(date 1714032042048)
@@ -0,0 +1,22 @@
+package com.orderservice.domain.dto;
+
+import lombok.Getter;
+
+@Getter
+public class ErrorDto {
+    private final int status;
+    private final String message;
+
+    public ErrorDto(int status, String message) {
+        this.status = status;
+        this.message = message;
+    }
+
+    public int getStatus() {
+        return status;
+    }
+
+    public String getMessage() {
+        return message;
+    }
+}
Index: order-service/src/main/java/com/orderservice/domain/dto/request/AddressRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/dto/request/AddressRequestDto.java b/order-service/src/main/java/com/orderservice/domain/dto/request/AddressRequestDto.java
new file mode 100644
--- /dev/null	(date 1714032042052)
+++ b/order-service/src/main/java/com/orderservice/domain/dto/request/AddressRequestDto.java	(date 1714032042052)
@@ -0,0 +1,18 @@
+package com.orderservice.domain.dto.request;
+
+import jakarta.validation.constraints.NotBlank;
+import lombok.Getter;
+import lombok.Setter;
+
+@Getter @Setter
+public class AddressRequestDto {
+
+    @NotBlank
+    private String city;
+
+    @NotBlank
+    private String street;
+
+    @NotBlank
+    private String zipCode;
+}
Index: order-service/src/main/java/com/orderservice/domain/dto/request/ItemSaveRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/dto/request/ItemSaveRequestDto.java b/order-service/src/main/java/com/orderservice/domain/dto/request/ItemSaveRequestDto.java
new file mode 100644
--- /dev/null	(date 1714032042056)
+++ b/order-service/src/main/java/com/orderservice/domain/dto/request/ItemSaveRequestDto.java	(date 1714032042056)
@@ -0,0 +1,21 @@
+package com.orderservice.domain.dto.request;
+
+import jakarta.validation.constraints.NotBlank;
+import lombok.Getter;
+import lombok.Setter;
+
+@Getter @Setter
+public class ItemSaveRequestDto {
+
+    @NotBlank
+    private String itemName;
+
+    @NotBlank
+    private String price;
+
+    @NotBlank
+    private String details;
+
+    @NotBlank
+    private String stockQuantity;
+}
Index: order-service/src/main/java/com/orderservice/domain/dto/request/PhoneNumberUpdateRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/dto/request/PhoneNumberUpdateRequestDto.java b/order-service/src/main/java/com/orderservice/domain/dto/request/PhoneNumberUpdateRequestDto.java
new file mode 100644
--- /dev/null	(date 1714032042060)
+++ b/order-service/src/main/java/com/orderservice/domain/dto/request/PhoneNumberUpdateRequestDto.java	(date 1714032042060)
@@ -0,0 +1,10 @@
+package com.orderservice.domain.dto.request;
+
+import lombok.Getter;
+import lombok.Setter;
+
+@Getter @Setter
+public class PhoneNumberUpdateRequestDto {
+
+    private String phoneNumber;
+}
Index: order-service/src/main/java/com/orderservice/domain/dto/request/UserPasswordUpdateRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/dto/request/UserPasswordUpdateRequestDto.java b/order-service/src/main/java/com/orderservice/domain/dto/request/UserPasswordUpdateRequestDto.java
new file mode 100644
--- /dev/null	(date 1714032042064)
+++ b/order-service/src/main/java/com/orderservice/domain/dto/request/UserPasswordUpdateRequestDto.java	(date 1714032042064)
@@ -0,0 +1,12 @@
+package com.orderservice.domain.dto.request;
+
+import jakarta.validation.constraints.NotBlank;
+import lombok.Getter;
+import lombok.Setter;
+
+@Getter @Setter
+public class UserPasswordUpdateRequestDto {
+
+    @NotBlank
+    private String password;
+}
Index: order-service/src/main/java/com/orderservice/domain/dto/request/WishItemSaveRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/dto/request/WishItemSaveRequestDto.java b/order-service/src/main/java/com/orderservice/domain/dto/request/WishItemSaveRequestDto.java
new file mode 100644
--- /dev/null	(date 1714032042068)
+++ b/order-service/src/main/java/com/orderservice/domain/dto/request/WishItemSaveRequestDto.java	(date 1714032042068)
@@ -0,0 +1,10 @@
+package com.orderservice.domain.dto.request;
+
+import lombok.Getter;
+import lombok.Setter;
+
+@Getter @Setter
+public class WishItemSaveRequestDto {
+
+    private int count;
+}
Index: order-service/src/main/java/com/orderservice/domain/dto/request/auth/CheckCertificationRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/dto/request/auth/CheckCertificationRequestDto.java b/order-service/src/main/java/com/orderservice/domain/dto/request/auth/CheckCertificationRequestDto.java
new file mode 100644
--- /dev/null	(date 1714032042071)
+++ b/order-service/src/main/java/com/orderservice/domain/dto/request/auth/CheckCertificationRequestDto.java	(date 1714032042071)
@@ -0,0 +1,22 @@
+package com.orderservice.domain.dto.request.auth;
+
+import jakarta.validation.constraints.Email;
+import jakarta.validation.constraints.NotBlank;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+@Getter @Setter
+@NoArgsConstructor
+public class CheckCertificationRequestDto {
+
+    @NotBlank
+    private String username;
+
+    @NotBlank
+    @Email
+    private String email;
+
+    @NotBlank
+    private String certificationNumber;
+}
Index: order-service/src/main/java/com/orderservice/domain/dto/request/auth/EmailCertificationRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/dto/request/auth/EmailCertificationRequestDto.java b/order-service/src/main/java/com/orderservice/domain/dto/request/auth/EmailCertificationRequestDto.java
new file mode 100644
--- /dev/null	(date 1714032042075)
+++ b/order-service/src/main/java/com/orderservice/domain/dto/request/auth/EmailCertificationRequestDto.java	(date 1714032042075)
@@ -0,0 +1,20 @@
+package com.orderservice.domain.dto.request.auth;
+
+import jakarta.validation.constraints.Email;
+import jakarta.validation.constraints.NotBlank;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+
+@Getter @Setter
+@NoArgsConstructor
+public class EmailCertificationRequestDto {
+
+    @NotBlank
+    String username;
+
+    @NotBlank
+    @Email
+    private String email;
+
+}
Index: order-service/src/main/java/com/orderservice/domain/dto/request/auth/SignInRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/dto/request/auth/SignInRequestDto.java b/order-service/src/main/java/com/orderservice/domain/dto/request/auth/SignInRequestDto.java
new file mode 100644
--- /dev/null	(date 1714032042078)
+++ b/order-service/src/main/java/com/orderservice/domain/dto/request/auth/SignInRequestDto.java	(date 1714032042078)
@@ -0,0 +1,19 @@
+package com.orderservice.domain.dto.request.auth;
+
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.Size;
+import lombok.*;
+
+@Getter @Setter @Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class SignInRequestDto {
+
+    @NotBlank
+    @Size(min = 3, max = 50)
+    private String username;
+
+    @NotBlank
+    @Size(min = 3, max = 100)
+    private String password;
+}
Index: order-service/src/main/java/com/orderservice/domain/dto/request/auth/SignUpRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/dto/request/auth/SignUpRequestDto.java b/order-service/src/main/java/com/orderservice/domain/dto/request/auth/SignUpRequestDto.java
new file mode 100644
--- /dev/null	(date 1714032042081)
+++ b/order-service/src/main/java/com/orderservice/domain/dto/request/auth/SignUpRequestDto.java	(date 1714032042081)
@@ -0,0 +1,27 @@
+package com.orderservice.domain.dto.request.auth;
+
+import jakarta.validation.constraints.Email;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.Size;
+import lombok.*;
+
+@Getter @Setter @Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class SignUpRequestDto {
+
+    @NotBlank
+    @Size(min = 3, max = 50)
+    private String username;
+
+    @NotBlank
+    @Size(min = 3, max = 100)
+    private String password;
+
+    @NotBlank
+    @Email
+    private String email;
+
+    @NotBlank
+    private String phoneNumber;
+}
Index: order-service/src/main/java/com/orderservice/domain/dto/request/auth/UsernameCheckRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/dto/request/auth/UsernameCheckRequestDto.java b/order-service/src/main/java/com/orderservice/domain/dto/request/auth/UsernameCheckRequestDto.java
new file mode 100644
--- /dev/null	(date 1714032042084)
+++ b/order-service/src/main/java/com/orderservice/domain/dto/request/auth/UsernameCheckRequestDto.java	(date 1714032042084)
@@ -0,0 +1,13 @@
+package com.orderservice.domain.dto.request.auth;
+
+import jakarta.validation.constraints.NotBlank;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+
+@Getter
+@NoArgsConstructor
+public class UsernameCheckRequestDto {
+
+    @NotBlank
+    private String username;
+}
Index: order-service/src/main/java/com/orderservice/domain/dto/response/AddressListReferResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/dto/response/AddressListReferResponseDto.java b/order-service/src/main/java/com/orderservice/domain/dto/response/AddressListReferResponseDto.java
new file mode 100644
--- /dev/null	(date 1714032042087)
+++ b/order-service/src/main/java/com/orderservice/domain/dto/response/AddressListReferResponseDto.java	(date 1714032042087)
@@ -0,0 +1,24 @@
+package com.orderservice.domain.dto.response;
+
+import com.layby.domain.entity.Address;
+import lombok.Getter;
+import lombok.Setter;
+
+import java.util.ArrayList;
+import java.util.List;
+
+@Getter @Setter
+public class AddressListReferResponseDto {
+
+    private List<AddressReferResponseDto> addressReferResponseDtos = new ArrayList<>();
+
+    //== 생성자 ==//
+    /** Address 엔티티 리스트로 AddressListReferResponseDto를 생성하는 생성자 **/
+    public AddressListReferResponseDto(List<Address> addressList) {
+
+        for (Address address : addressList) {
+            AddressReferResponseDto addressReferResponseDto = new AddressReferResponseDto(address);
+            this.addressReferResponseDtos.add(addressReferResponseDto);
+        }
+    }
+}
Index: order-service/src/main/java/com/orderservice/domain/dto/response/AddressReferResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/dto/response/AddressReferResponseDto.java b/order-service/src/main/java/com/orderservice/domain/dto/response/AddressReferResponseDto.java
new file mode 100644
--- /dev/null	(date 1714032042090)
+++ b/order-service/src/main/java/com/orderservice/domain/dto/response/AddressReferResponseDto.java	(date 1714032042090)
@@ -0,0 +1,29 @@
+package com.orderservice.domain.dto.response;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.layby.domain.entity.Address;
+import lombok.Getter;
+import lombok.Setter;
+
+@Getter @Setter
+public class AddressReferResponseDto {
+
+    @JsonIgnore
+    private Long addressId;
+
+    private String city;
+
+    private String street;
+
+    private String zipCode;
+
+
+    //== 생성자 ==//
+    // Address -> AddressReferResponseDto로 변환하는 생성자
+    public AddressReferResponseDto(Address address) {
+        this.addressId = address.getAddressId();
+        this.city = address.getCity();
+        this.street = address.getStreet();
+        this.zipCode = address.getZipCode();
+    }
+}
Index: order-service/src/main/java/com/orderservice/domain/dto/response/ItemListResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/dto/response/ItemListResponseDto.java b/order-service/src/main/java/com/orderservice/domain/dto/response/ItemListResponseDto.java
new file mode 100644
--- /dev/null	(date 1714032042094)
+++ b/order-service/src/main/java/com/orderservice/domain/dto/response/ItemListResponseDto.java	(date 1714032042094)
@@ -0,0 +1,14 @@
+package com.orderservice.domain.dto.response;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Getter;
+
+@Builder @Getter
+@AllArgsConstructor
+public class ItemListResponseDto {
+
+    private String itemName;
+
+    private int price;
+}
Index: order-service/src/main/java/com/orderservice/domain/dto/response/ItemResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/dto/response/ItemResponseDto.java b/order-service/src/main/java/com/orderservice/domain/dto/response/ItemResponseDto.java
new file mode 100644
--- /dev/null	(date 1714032042098)
+++ b/order-service/src/main/java/com/orderservice/domain/dto/response/ItemResponseDto.java	(date 1714032042098)
@@ -0,0 +1,30 @@
+package com.orderservice.domain.dto.response;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.layby.domain.entity.Item;
+import jakarta.persistence.JoinColumn;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Getter;
+
+@Builder @Getter
+@AllArgsConstructor
+public class ItemResponseDto {
+
+    @JsonIgnore
+    private Long itemId;
+
+    private String itemName;
+
+    private int price;
+
+    private String details;
+
+    //== 생성자 ==//
+    /** Item 엔티티로 ItemResponseDto를 만드는 생성자 **/
+    public ItemResponseDto(Item item) {
+        this.itemName = item.getItemName();
+        this.price = item.getPrice();
+        this.details = item.getDetails();
+    }
+}
Index: order-service/src/main/java/com/orderservice/domain/dto/response/OrderItemResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/dto/response/OrderItemResponseDto.java b/order-service/src/main/java/com/orderservice/domain/dto/response/OrderItemResponseDto.java
new file mode 100644
--- /dev/null	(date 1714032042100)
+++ b/order-service/src/main/java/com/orderservice/domain/dto/response/OrderItemResponseDto.java	(date 1714032042100)
@@ -0,0 +1,7 @@
+package com.orderservice.domain.dto.response;
+
+public class OrderItemResponseDto {
+
+    private ItemResponseDto itemResponseDto;
+
+}
Index: item-service/src/main/java/com/itemservice/web/util/SecurityUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/main/java/com/itemservice/web/util/SecurityUtil.java b/item-service/src/main/java/com/itemservice/web/util/SecurityUtil.java
new file mode 100644
--- /dev/null	(date 1714032041987)
+++ b/item-service/src/main/java/com/itemservice/web/util/SecurityUtil.java	(date 1714032041987)
@@ -0,0 +1,35 @@
+package com.itemservice.web.util;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.security.core.userdetails.UserDetails;
+
+import java.util.Optional;
+
+public class SecurityUtil {
+
+    private static final Logger logger = LoggerFactory.getLogger(SecurityUtil.class);
+
+    private SecurityUtil() {}
+
+    public static Optional<String> getCurrentUsername() {
+        final Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
+
+        if (authentication == null) {
+            logger.debug("Security Context에 인증 정보가 없습니다.");
+            return Optional.empty();
+        }
+
+        String username = null;
+        if (authentication.getPrincipal() instanceof UserDetails) {
+            UserDetails springSecurityUser = (UserDetails) authentication.getPrincipal();
+            username = springSecurityUser.getUsername();
+        } else if (authentication.getPrincipal() instanceof String) {
+            username = (String) authentication.getPrincipal();
+        }
+
+        return Optional.ofNullable(username);
+    }
+}
Index: item-service/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/item-service/src/main/resources/application.properties b/item-service/src/main/resources/application.properties
new file mode 100644
--- /dev/null	(date 1714032041990)
+++ b/item-service/src/main/resources/application.properties	(date 1714032041990)
@@ -0,0 +1,1 @@
+spring.application.name=item-service
Index: item-service/src/test/java/com/itemservice/ItemServiceApplicationTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/item-service/src/test/java/com/itemservice/ItemServiceApplicationTests.java b/item-service/src/test/java/com/itemservice/ItemServiceApplicationTests.java
new file mode 100644
--- /dev/null	(date 1714032041993)
+++ b/item-service/src/test/java/com/itemservice/ItemServiceApplicationTests.java	(date 1714032041993)
@@ -0,0 +1,13 @@
+package com.itemservice;
+
+import org.junit.jupiter.api.Test;
+import org.springframework.boot.test.context.SpringBootTest;
+
+@SpringBootTest
+class ItemServiceApplicationTests {
+
+    @Test
+    void contextLoads() {
+    }
+
+}
Index: order-service/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/.gitignore b/order-service/.gitignore
new file mode 100644
--- /dev/null	(date 1714032041995)
+++ b/order-service/.gitignore	(date 1714032041995)
@@ -0,0 +1,37 @@
+HELP.md
+.gradle
+build/
+!gradle/wrapper/gradle-wrapper.jar
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### STS ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+bin/
+!**/src/main/**/bin/
+!**/src/test/**/bin/
+
+### IntelliJ IDEA ###
+.idea
+*.iws
+*.iml
+*.ipr
+out/
+!**/src/main/**/out/
+!**/src/test/**/out/
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+
+### VS Code ###
+.vscode/
Index: order-service/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/build.gradle b/order-service/build.gradle
new file mode 100644
--- /dev/null	(date 1714032041998)
+++ b/order-service/build.gradle	(date 1714032041998)
@@ -0,0 +1,43 @@
+plugins {
+	id 'java'
+	id 'org.springframework.boot' version '3.2.5'
+	id 'io.spring.dependency-management' version '1.1.4'
+}
+
+ext {
+	springCloudVersion = "2023.0.1"
+}
+
+group = 'com'
+version = '0.0.1-SNAPSHOT'
+
+java {
+	sourceCompatibility = '21'
+}
+
+repositories {
+	mavenCentral()
+}
+
+dependencies {
+	implementation 'org.springframework.boot:spring-boot-starter-web'
+	implementation 'org.projectlombok:lombok'
+	implementation 'org.springframework.boot:spring-boot-starter-validation'
+	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
+	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
+	implementation 'org.springframework.boot:spring-boot-starter-security'
+	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
+	testImplementation 'org.springframework.boot:spring-boot-starter-test'
+	testImplementation 'org.springframework.security:spring-security-test'
+	runtimeOnly 'com.mysql:mysql-connector-j'
+}
+
+dependencyManagement {
+	imports {
+		mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
+	}
+}
+
+tasks.named('test') {
+	useJUnitPlatform()
+}
Index: order-service/gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/order-service/gradle/wrapper/gradle-wrapper.properties b/order-service/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
--- /dev/null	(date 1714032042003)
+++ b/order-service/gradle/wrapper/gradle-wrapper.properties	(date 1714032042003)
@@ -0,0 +1,7 @@
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.7-bin.zip
+networkTimeout=10000
+validateDistributionUrl=true
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
Index: order-service/gradlew
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/gradlew b/order-service/gradlew
new file mode 100644
--- /dev/null	(date 1714032042006)
+++ b/order-service/gradlew	(date 1714032042006)
@@ -0,0 +1,249 @@
+#!/bin/sh
+
+#
+# Copyright © 2015-2021 the original authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+##############################################################################
+#
+#   Gradle start up script for POSIX generated by Gradle.
+#
+#   Important for running:
+#
+#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
+#       noncompliant, but you have some other compliant shell such as ksh or
+#       bash, then to run this script, type that shell name before the whole
+#       command line, like:
+#
+#           ksh Gradle
+#
+#       Busybox and similar reduced shells will NOT work, because this script
+#       requires all of these POSIX shell features:
+#         * functions;
+#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
+#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
+#         * compound commands having a testable exit status, especially «case»;
+#         * various built-in commands including «command», «set», and «ulimit».
+#
+#   Important for patching:
+#
+#   (2) This script targets any POSIX shell, so it avoids extensions provided
+#       by Bash, Ksh, etc; in particular arrays are avoided.
+#
+#       The "traditional" practice of packing multiple parameters into a
+#       space-separated string is a well documented source of bugs and security
+#       problems, so this is (mostly) avoided, by progressively accumulating
+#       options in "$@", and eventually passing that to Java.
+#
+#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
+#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
+#       see the in-line comments for details.
+#
+#       There are tweaks for specific operating systems such as AIX, CygWin,
+#       Darwin, MinGW, and NonStop.
+#
+#   (3) This script is generated from the Groovy template
+#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
+#       within the Gradle project.
+#
+#       You can find Gradle at https://github.com/gradle/gradle/.
+#
+##############################################################################
+
+# Attempt to set APP_HOME
+
+# Resolve links: $0 may be a link
+app_path=$0
+
+# Need this for daisy-chained symlinks.
+while
+    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
+    [ -h "$app_path" ]
+do
+    ls=$( ls -ld "$app_path" )
+    link=${ls#*' -> '}
+    case $link in             #(
+      /*)   app_path=$link ;; #(
+      *)    app_path=$APP_HOME$link ;;
+    esac
+done
+
+# This is normally unused
+# shellcheck disable=SC2034
+APP_BASE_NAME=${0##*/}
+# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
+APP_HOME=$( cd "${APP_HOME:-./}" > /dev/null && pwd -P ) || exit
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD=maximum
+
+warn () {
+    echo "$*"
+} >&2
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+} >&2
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "$( uname )" in                #(
+  CYGWIN* )         cygwin=true  ;; #(
+  Darwin* )         darwin=true  ;; #(
+  MSYS* | MINGW* )  msys=true    ;; #(
+  NONSTOP* )        nonstop=true ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD=$JAVA_HOME/jre/sh/java
+    else
+        JAVACMD=$JAVA_HOME/bin/java
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD=java
+    if ! command -v java >/dev/null 2>&1
+    then
+        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+fi
+
+# Increase the maximum file descriptors if we can.
+if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
+    case $MAX_FD in #(
+      max*)
+        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
+        # shellcheck disable=SC2039,SC3045
+        MAX_FD=$( ulimit -H -n ) ||
+            warn "Could not query maximum file descriptor limit"
+    esac
+    case $MAX_FD in  #(
+      '' | soft) :;; #(
+      *)
+        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
+        # shellcheck disable=SC2039,SC3045
+        ulimit -n "$MAX_FD" ||
+            warn "Could not set maximum file descriptor limit to $MAX_FD"
+    esac
+fi
+
+# Collect all arguments for the java command, stacking in reverse order:
+#   * args from the command line
+#   * the main class name
+#   * -classpath
+#   * -D...appname settings
+#   * --module-path (only if needed)
+#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.
+
+# For Cygwin or MSYS, switch paths to Windows format before running java
+if "$cygwin" || "$msys" ; then
+    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
+    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )
+
+    JAVACMD=$( cygpath --unix "$JAVACMD" )
+
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    for arg do
+        if
+            case $arg in                                #(
+              -*)   false ;;                            # don't mess with options #(
+              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
+                    [ -e "$t" ] ;;                      #(
+              *)    false ;;
+            esac
+        then
+            arg=$( cygpath --path --ignore --mixed "$arg" )
+        fi
+        # Roll the args list around exactly as many times as the number of
+        # args, so each arg winds up back in the position where it started, but
+        # possibly modified.
+        #
+        # NB: a `for` loop captures its iteration list before it begins, so
+        # changing the positional parameters here affects neither the number of
+        # iterations, nor the values presented in `arg`.
+        shift                   # remove old arg
+        set -- "$@" "$arg"      # push replacement arg
+    done
+fi
+
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
+
+# Collect all arguments for the java command:
+#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
+#     and any embedded shellness will be escaped.
+#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
+#     treated as '${Hostname}' itself on the command line.
+
+set -- \
+        "-Dorg.gradle.appname=$APP_BASE_NAME" \
+        -classpath "$CLASSPATH" \
+        org.gradle.wrapper.GradleWrapperMain \
+        "$@"
+
+# Stop when "xargs" is not available.
+if ! command -v xargs >/dev/null 2>&1
+then
+    die "xargs is not available"
+fi
+
+# Use "xargs" to parse quoted args.
+#
+# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
+#
+# In Bash we could simply go:
+#
+#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
+#   set -- "${ARGS[@]}" "$@"
+#
+# but POSIX shell has neither arrays nor command substitution, so instead we
+# post-process each arg (as a line of input to sed) to backslash-escape any
+# character that might be a shell metacharacter, then use eval to reverse
+# that process (while maintaining the separation between arguments), and wrap
+# the whole thing up as a single "set" statement.
+#
+# This will of course break if any of these variables contains a newline or
+# an unmatched quote.
+#
+
+eval "set -- $(
+        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
+        xargs -n1 |
+        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
+        tr '\n' ' '
+    )" '"$@"'
+
+exec "$JAVACMD" "$@"
Index: order-service/settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/settings.gradle b/order-service/settings.gradle
new file mode 100644
--- /dev/null	(date 1714032042013)
+++ b/order-service/settings.gradle	(date 1714032042013)
@@ -0,0 +1,1 @@
+rootProject.name = 'order-service'
Index: order-service/src/main/java/com/orderservice/OrderServiceApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/OrderServiceApplication.java b/order-service/src/main/java/com/orderservice/OrderServiceApplication.java
new file mode 100644
--- /dev/null	(date 1714032042016)
+++ b/order-service/src/main/java/com/orderservice/OrderServiceApplication.java	(date 1714032042016)
@@ -0,0 +1,15 @@
+package com.orderservice;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.cloud.openfeign.EnableFeignClients;
+
+@EnableFeignClients
+@SpringBootApplication
+public class OrderServiceApplication {
+
+	public static void main(String[] args) {
+		SpringApplication.run(OrderServiceApplication.class, args);
+	}
+
+}
Index: order-service/src/main/java/com/orderservice/domain/common/DeliveryStatus.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/common/DeliveryStatus.java b/order-service/src/main/java/com/orderservice/domain/common/DeliveryStatus.java
new file mode 100644
--- /dev/null	(date 1714032042019)
+++ b/order-service/src/main/java/com/orderservice/domain/common/DeliveryStatus.java	(date 1714032042019)
@@ -0,0 +1,14 @@
+package com.orderservice.domain.common;
+
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+
+@Getter
+@RequiredArgsConstructor
+public enum DeliveryStatus {
+    PREPARE("상품 준비중"),
+    PROCESS("배송 중"),
+    COMPLETE("배송 완료");
+
+    private final String description;
+}
Index: order-service/src/main/java/com/orderservice/domain/common/ErrorCode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/common/ErrorCode.java b/order-service/src/main/java/com/orderservice/domain/common/ErrorCode.java
new file mode 100644
--- /dev/null	(date 1714032042035)
+++ b/order-service/src/main/java/com/orderservice/domain/common/ErrorCode.java	(date 1714032042035)
@@ -0,0 +1,33 @@
+package com.orderservice.domain.common;
+
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+
+@Getter
+@RequiredArgsConstructor
+public enum ErrorCode {
+    VALIDATION_FAIL("401", "Validation failed."),
+
+    DUPLICATED_USERNAME("409", "Duplicate Id."),
+
+    SIGN_IN_FAIL("400", "Login information mismatch."),
+
+    CERTIFICATION_FAIL("400", "Certification failed"),
+
+    MAIL_FAIL("400", "Mail send failed."),
+
+    DATABASE_ERROR("500", "Database error."),
+
+    INTERNAL_SERVER_ERROR("500", "Server Error aroused. Please contact the server administrator"),
+
+    NOT_ENOUGH_STOCK("409", "All stock has been sold out."),
+
+    DELIVERY_ALEADY_START("409", "Cancellation is only possible before delivery begins."),
+
+    REFUND_IS_NOT_POSSIBLE("409", "Refunds are not possible after 2 days after delivery.");
+
+
+    private final String code;
+
+    private final String message;
+}
Index: order-service/src/main/java/com/orderservice/domain/common/OrderStatus.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/common/OrderStatus.java b/order-service/src/main/java/com/orderservice/domain/common/OrderStatus.java
new file mode 100644
--- /dev/null	(date 1714032042039)
+++ b/order-service/src/main/java/com/orderservice/domain/common/OrderStatus.java	(date 1714032042039)
@@ -0,0 +1,15 @@
+package com.orderservice.domain.common;
+
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+
+@Getter
+@RequiredArgsConstructor
+public enum OrderStatus {
+    ORDER("주문 완료"),
+    CANCEL("주문 취소"),
+    REFUND_PROCESS("반품 처리중"),
+    REFUND_COMPLETE("반품 완료");
+
+    private final String description;
+}
Index: order-service/src/main/java/com/orderservice/domain/common/RedisDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/common/RedisDao.java b/order-service/src/main/java/com/orderservice/domain/common/RedisDao.java
new file mode 100644
--- /dev/null	(date 1714032042042)
+++ b/order-service/src/main/java/com/orderservice/domain/common/RedisDao.java	(date 1714032042042)
@@ -0,0 +1,40 @@
+package com.orderservice.domain.common;
+
+import org.springframework.data.redis.core.RedisTemplate;
+import org.springframework.data.redis.core.ValueOperations;
+import org.springframework.stereotype.Component;
+
+import java.time.Duration;
+
+@Component
+public class RedisDao {
+
+    private final RedisTemplate<String, String> redisTemplate;
+
+    public RedisDao(RedisTemplate<String, String> redisTemplate) {
+        this.redisTemplate = redisTemplate;
+    }
+
+    public void setValue(String key, String data) {
+        ValueOperations<String, String> values = redisTemplate.opsForValue();
+        values.set(key, data);
+    }
+
+    public void setValue(String key, String data, Duration duration) {
+        ValueOperations<String, String> values = redisTemplate.opsForValue();
+        values.set(key, data, duration);
+    }
+
+    public String getValue(String key) {
+        ValueOperations<String, String> values = redisTemplate.opsForValue();
+        return values.get(key);
+    }
+
+    public void deleteValue(String key) {
+        redisTemplate.delete(key);
+    }
+
+    public boolean hasKey(String key) {
+        return redisTemplate.hasKey(key);
+    }
+}
Index: order-service/src/main/java/com/orderservice/domain/common/Role.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order-service/src/main/java/com/orderservice/domain/common/Role.java b/order-service/src/main/java/com/orderservice/domain/common/Role.java
new file mode 100644
--- /dev/null	(date 1714032042045)
+++ b/order-service/src/main/java/com/orderservice/domain/common/Role.java	(date 1714032042045)
@@ -0,0 +1,14 @@
+package com.orderservice.domain.common;
+
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+
+@Getter
+@RequiredArgsConstructor
+public enum Role {
+    USER("ROLE_USER", "서비스 사용자"),
+    ADMIN("ROLE_ADMIN", "관리자");
+
+    private final String key;
+    private final String description;
+}
diff --git a/order-service/gradlew.bat b/order-service/gradlew.bat
new file mode 100644
