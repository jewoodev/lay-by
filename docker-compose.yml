version: '3'
services:
  user-service:
    image: mysql:8.0.35
    platform: linux/x86_64
    restart: always
    volumes:
      - ./db/user-service/data:/var/lib/mysql
      - ./db/user-service/config:/etc/mysql/conf.d
      - ./db/user-service/init:/docker-entrypoint-initdb.d
    container_name: user-service
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: my1234
      TZ: Asia/Seoul
      MYSQL_USER: jewoo
      MYSQL_PASSWORD: 1234

  order-service:
    image: mysql:8.0.35
    platform: linux/x86_64
    restart: always
    volumes:
      - ./db/order-service/data:/var/lib/mysql
      - ./db/order-service/config:/etc/mysql/conf.d
      - ./db/order-service/init:/docker-entrypoint-initdb.d
    container_name: order-service
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: my1234
      TZ: Asia/Seoul
      MYSQL_USER: jewoo
      MYSQL_PASSWORD: 1234

  item-service:
    image: mysql:8.0.35
    platform: linux/x86_64
    restart: always
    volumes:
      - ./db/item-service/data:/var/lib/mysql
      - ./db/item-service/config:/etc/mysql/conf.d
      - ./db/item-service/init:/docker-entrypoint-initdb.d
    container_name: item-service
    ports:
      - "3308:3306"
    environment:
      MYSQL_ROOT_PASSWORD: my1234
      TZ: Asia/Seoul
      MYSQL_USER: jewoo
      MYSQL_PASSWORD: 1234

  redis:
    image: redis:alpine
    container_name: redis_boot
    command: redis-server --port 6379
    hostname: redis
    ports:
      - "6379:6379"

  zookeeper1:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zookeeper1
    container_name: zookeeper1
    ports: 
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888
      ZOOKEEPER_TRICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
  
  kafka1:
    image: confluentinc/cp-kafka:7.3.0
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      # 외부에서 접속하기 위한 리스너 설정
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      # 보안을 위한 프로토콜 매핑. 이 값은 KAFKA_ADVERTISED_LISTENER와 함께 key-value로 지정함
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      # docker 내부에서 사용할 리스너 이름
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      # kafka가 연결될 zookeeper 지정
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper1:2181"
      # kafka 브로커 아이디. unique한 값이어야 함
      KAFKA_BROKER_ID: 1
      # 로그 설정
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefualtEventHandler=INFO,state.change.logger=INFO"
       # 요청 권한 부여. ACL(Access Control List) 접근 제어 목록
      # KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      # kafka 브로커가 접근 권한이 없어도 동작할 수 있도록 함
      # KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      # kafka broker가 의존하는 zookeeper 설정
    depends_on:
      - zookeeper1

  kafka2:
    image: confluentinc/cp-kafka:7.3.0
    hostname: kafka2
    container_name: kafka2
    ports:
      - "9093:9093"
      - "29093:29093"
    environment:
      # 외부에서 접속하기 위한 리스너 설정
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:19093,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093,DOCKER://host.docker.internal:29093
      # 보안을 위한 프로토콜 매핑. 이 값은 KAFKA_ADVERTISED_LISTENER와 함께 key-value로 지정함
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      # docker 내부에서 사용할 리스너 이름
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      # kafka가 연결될 zookeeper 지정
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper1:2181"
      # kafka 브로커 아이디. unique한 값이어야 함
      KAFKA_BROKER_ID: 2
      # 로그 설정
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefualtEventHandler=INFO,state.change.logger=INFO"
      # KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      # KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zookeeper1

  kafka3:
    image: confluentinc/cp-kafka:7.3.0
    hostname: kafka3
    container_name: kafka3
    ports:
      - "9094:9094"
      - "29094:29094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:19094,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094,DOCKER://host.docker.internal:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper1:2181"
      KAFKA_BROKER_ID: 3
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      # KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      # KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zookeeper1
